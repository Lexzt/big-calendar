{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as RxDB from 'rxdb';\nimport schema from './schemas/events';\nRxDB.plugin(require('pouchdb-adapter-idb'));\nRxDB.plugin(require('pouchdb-adapter-http'));\nvar dbPromise = null;\nvar collections = [{\n  name: 'events' + new Date().getTime(),\n  schema: schema\n}];\n\nvar createDb =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var db;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return RxDB.create({\n              name: 'eventsdb',\n              adapter: 'idb',\n              queryChangeDetection: true\n            });\n\n          case 2:\n            db = _context.sent;\n            window['db'] = db;\n            _context.next = 6;\n            return Promise.all(collections.map(function (colData) {\n              return db.collection(colData);\n            }));\n\n          case 6:\n            return _context.abrupt(\"return\", db);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function createDb() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default (function () {\n  debugger;\n\n  if (!dbPromise) {\n    dbPromise = createDb();\n  }\n\n  return dbPromise;\n});","map":{"version":3,"sources":["/Users/sham/big-calendar/src/db/index.js"],"names":["RxDB","schema","plugin","require","dbPromise","collections","name","Date","getTime","createDb","create","adapter","queryChangeDetection","db","window","Promise","all","map","colData","collection"],"mappings":";;AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEAD,IAAI,CAACE,MAAL,CAAYC,OAAO,CAAC,qBAAD,CAAnB;AACAH,IAAI,CAACE,MAAL,CAAYC,OAAO,CAAC,sBAAD,CAAnB;AAEA,IAAIC,SAAS,GAAG,IAAhB;AAEA,IAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,IAAI,EAAE,WAAY,IAAIC,IAAJ,GAAWC,OAAX,EADpB;AAEEP,EAAAA,MAAM,EAAEA;AAFV,CADkB,CAApB;;AAOA,IAAMQ,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACET,IAAI,CAACU,MAAL,CAAY;AAC3BJ,cAAAA,IAAI,EAAE,UADqB;AAE3BK,cAAAA,OAAO,EAAE,KAFkB;AAG3BC,cAAAA,oBAAoB,EAAE;AAHK,aAAZ,CADF;;AAAA;AACTC,YAAAA,EADS;AAMfC,YAAAA,MAAM,CAAC,IAAD,CAAN,GAAeD,EAAf;AANe;AAAA,mBAOTE,OAAO,CAACC,GAAR,CACJX,WAAW,CAACY,GAAZ,CAAgB,UAAAC,OAAO;AAAA,qBAAIL,EAAE,CAACM,UAAH,CAAcD,OAAd,CAAJ;AAAA,aAAvB,CADI,CAPS;;AAAA;AAAA,6CAURL,EAVQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARJ,QAAQ;AAAA;AAAA;AAAA,GAAd;;AAeA,gBAAe,YAAM;AACnB;;AACA,MAAG,CAACL,SAAJ,EAAe;AACbA,IAAAA,SAAS,GAAGK,QAAQ,EAApB;AACD;;AACD,SAAOL,SAAP;AACD,CAND","sourcesContent":["import * as RxDB from 'rxdb';\nimport schema from './schemas/events';\n\nRxDB.plugin(require('pouchdb-adapter-idb'));\nRxDB.plugin(require('pouchdb-adapter-http'));\n\nlet dbPromise = null;\n\nconst collections = [\n  {\n    name: 'events'  + new Date().getTime(),\n    schema: schema\n  }\n]\n\nconst createDb = async () => {\n  const db = await RxDB.create({\n    name: 'eventsdb',\n    adapter: 'idb',\n    queryChangeDetection: true\n  });\n  window['db'] = db;\n  await Promise.all(\n    collections.map(colData => db.collection(colData))\n  );\n  return db;\n}\n\n\n\nexport default () => {\n  debugger\n  if(!dbPromise) {\n    dbPromise = createDb();\n  }\n  return dbPromise;\n}\n"]},"metadata":{},"sourceType":"module"}