{"ast":null,"code":"import _toConsumableArray from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Sameenhaja/big-calendar/src/react-calendar-view.js\";\nimport React from \"react\";\nimport { DragDropContext } from \"react-dnd\";\nimport BigCalendar from \"react-big-calendar\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport moment from \"moment\";\nimport './react-calendar-view.css';\nimport { withRouter } from 'react-router-dom';\nimport CalendarEventForm from './calendar-event-form';\nimport { Modal } from 'react-bootstrap';\nvar localizer = BigCalendar.momentLocalizer(moment);\nvar DragAndDropCalendar = withDragAndDrop(BigCalendar);\n\nvar ReactCalendarView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ReactCalendarView, _React$Component);\n\n  function ReactCalendarView(props) {\n    var _this;\n\n    _classCallCheck(this, ReactCalendarView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactCalendarView).call(this, props));\n\n    _this.resizeEvent = function (resizeType, _ref) {\n      var event = _ref.event,\n          start = _ref.start,\n          end = _ref.end;\n      var events = _this.state.events;\n      var nextEvents = events.map(function (existingEvent) {\n        return existingEvent.id === event.id ? _objectSpread({}, existingEvent, {\n          start: start,\n          end: end\n        }) : existingEvent;\n      });\n\n      _this.setState({\n        events: nextEvents\n      });\n    };\n\n    _this.handleSelect = function (_ref2) {\n      var start = _ref2.start,\n          end = _ref2.end;\n      var title = window.prompt('New Event name');\n      if (title) _this.setState({\n        events: _toConsumableArray(_this.state.events).concat([{\n          start: start,\n          end: end,\n          title: title\n        }])\n      });\n    };\n\n    _this.handleSelectDate = function () {\n      _this.setState({\n        isCreateEvent: true\n      });\n    };\n\n    _this.handleHide = function () {\n      _this.setState({\n        isCreateEvent: false\n      });\n    };\n\n    _this.state = {\n      events: [{\n        allDay: false,\n        end: new Date('December 10, 2018 11:13:00'),\n        start: new Date('December 09, 2018 12:13:00'),\n        title: 'hi'\n      }, {\n        allDay: true,\n        end: new Date('December 09, 2018 11:13:00'),\n        start: new Date('December 09, 2018 11:13:00'),\n        title: 'All Day Event'\n      }],\n      isCreateEvent: false,\n      start: '',\n      end: ''\n    };\n    _this.moveEvent = _this.moveEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ReactCalendarView, [{\n    key: \"moveEvent\",\n    value: function moveEvent(_ref3) {\n      var event = _ref3.event,\n          start = _ref3.start,\n          end = _ref3.end;\n      var events = this.state.events;\n      var idx = events.indexOf(event);\n\n      var updatedEvent = _objectSpread({}, event, {\n        start: start,\n        end: end\n      });\n\n      var nextEvents = _toConsumableArray(events);\n\n      nextEvents.splice(idx, 1, updatedEvent);\n      this.setState({\n        events: nextEvents\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isCreateEvent = this.state.isCreateEvent;\n      return React.createElement(\"div\", {\n        classname: \"modal-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        show: this.handleSelectDate,\n        onHide: this.handleHide,\n        container: this,\n        \"aria-labelledby\": \"contained-modal-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Modal heading\"))), React.createElement(DragAndDropCalendar, {\n        className: \"react-calendar-view\",\n        selectable: true,\n        localizer: localizer,\n        events: this.state.events,\n        onEventDrop: this.moveEvent,\n        resizable: true,\n        onEventResize: this.resizeEvent,\n        defaultView: BigCalendar.Views.MONTH,\n        onSelectSlot: this.handleSelectDate,\n        popup: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ReactCalendarView;\n}(React.Component);\n\nvar Calendar = DragDropContext(HTML5Backend)(ReactCalendarView);\nexport default withRouter(Calendar);","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/react-calendar-view.js"],"names":["React","DragDropContext","BigCalendar","HTML5Backend","withDragAndDrop","moment","withRouter","CalendarEventForm","Modal","localizer","momentLocalizer","DragAndDropCalendar","ReactCalendarView","props","resizeEvent","resizeType","event","start","end","events","state","nextEvents","map","existingEvent","id","setState","handleSelect","title","window","prompt","handleSelectDate","isCreateEvent","handleHide","allDay","Date","moveEvent","bind","idx","indexOf","updatedEvent","splice","Views","MONTH","Component","Calendar"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { DragDropContext } from \"react-dnd\";\nimport BigCalendar from \"react-big-calendar\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport moment from \"moment\";\nimport './react-calendar-view.css';\nimport { withRouter } from 'react-router-dom';\nimport CalendarEventForm from './calendar-event-form';\nimport { Modal } from 'react-bootstrap';\n\n\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\n\nclass ReactCalendarView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [\n        {\n          allDay: false,\n          end: new Date('December 10, 2018 11:13:00'),\n          start: new Date('December 09, 2018 12:13:00'),\n          title: 'hi',\n        },\n        {\n          allDay: true,\n          end: new Date('December 09, 2018 11:13:00'),\n          start: new Date('December 09, 2018 11:13:00'),\n          title: 'All Day Event',\n        }\n      ],\n      isCreateEvent: false,\n      start: '',\n      end: ''\n    };\n\n    this.moveEvent = this.moveEvent.bind(this);\n  }\n\n  moveEvent({ event, start, end }) {\n      const { events } = this.state;\n\n      const idx = events.indexOf(event);\n      const updatedEvent = { ...event, start, end };\n\n      const nextEvents = [...events];\n      nextEvents.splice(idx, 1, updatedEvent);\n\n      this.setState({\n        events: nextEvents\n      });\n  }\n\n  resizeEvent = (resizeType, { event, start, end }) => {\n    const { events } = this.state;\n\n    const nextEvents = events.map(existingEvent => {\n      return existingEvent.id === event.id\n        ? { ...existingEvent, start, end }\n        : existingEvent;\n    });\n\n    this.setState({\n      events: nextEvents\n    });\n  };\n\n  handleSelect = ({ start, end }) => {\n    const title = window.prompt('New Event name')\n    if (title)\n      this.setState({\n        events: [\n          ...this.state.events,\n          {\n            start,\n            end,\n            title,\n          },\n        ],\n      })\n  }\n\n  handleSelectDate = () => {\n    this.setState({\n      isCreateEvent: true,\n    })\n  }\n\n  handleHide = () => {\n    this.setState({ isCreateEvent: false });\n  }\n\n  render() {\n    const isCreateEvent = this.state.isCreateEvent;\n    return (\n      <div classname=\"modal-container\">\n          <Modal\n            show={this.handleSelectDate}\n            onHide={this.handleHide}\n            container={this}\n            aria-labelledby=\"contained-modal-title\"\n          >\n          <Modal.Header closeButton>\n            <Modal.Title>Modal heading</Modal.Title>\n          </Modal.Header>\n          </Modal>\n          <DragAndDropCalendar\n            className=\"react-calendar-view\"\n            selectable\n            localizer={localizer}\n            events={this.state.events}\n            onEventDrop={this.moveEvent}\n            resizable\n            onEventResize={this.resizeEvent}\n            defaultView={BigCalendar.Views.MONTH}\n            onSelectSlot={this.handleSelectDate}\n            popup\n          />\n      </div>\n    );\n  }\n}\n\nconst Calendar = DragDropContext(HTML5Backend)(ReactCalendarView);\n\nexport default withRouter(Calendar);\n"]},"metadata":{},"sourceType":"module"}