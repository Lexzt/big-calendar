{"ast":null,"code":"import { createLogger } from 'redux-logger';\nimport axios from 'axios';\nexport var loggerMiddleware = createLogger();\nvar CALENDAR_ID = 'shamsheer619@gmail.com';\n\nfunction googleCalendarEvents() {\n  return window.gapi.client.request({\n    'path': \"https://www.googleapis.com/calendar/v3/calendars/\".concat(CALENDAR_ID, \"/events\")\n  }).then(function (resp) {\n    var events = resp.result.items;\n    console.log(events);\n  }, function (reason) {\n    console.log(reason);\n  });\n}\n\nfunction getUserEvents(callback) {\n  var accessToken = window.localStorage.getItem('at');\n  debugger;\n  getAccessToken(function (accessToken) {\n    if (accessToken) {\n      // Create a Graph client\n      var client = MicrosoftGraph.Client.init({\n        authProvider: function authProvider(done) {\n          // Just return the token\n          done(null, accessToken);\n        }\n      }); // Get the 10 newest events\n\n      client.api('/me/events').top(10).select('subject,start,end,createdDateTime').orderby('createdDateTime DESC').get(function (err, res) {\n        if (err) {\n          callback(null, err);\n        } else {\n          callback(res.value);\n        }\n      });\n    } else {\n      var error = {\n        responseText: 'Could not retrieve access token'\n      };\n      callback(null, error);\n    }\n  });\n}\n\nexport var apiMiddleware = function apiMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'GET_GOOGLE_EVENTS') {\n        googleCalendarEvents();\n      }\n\n      if (action.type == 'GET_OUTLOOK_EVENTS') {\n        var url = action.payload.url;\n        outLookCalendarEvents(url);\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/redux/middleware.js"],"names":["createLogger","axios","loggerMiddleware","CALENDAR_ID","googleCalendarEvents","window","gapi","client","request","then","resp","events","result","items","console","log","reason","getUserEvents","callback","accessToken","localStorage","getItem","getAccessToken","MicrosoftGraph","Client","init","authProvider","done","api","top","select","orderby","get","err","res","value","error","responseText","apiMiddleware","store","next","action","type","url","payload","outLookCalendarEvents"],"mappings":"AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAMC,gBAAgB,GAAGF,YAAY,EAArC;AAGP,IAAMG,WAAW,GAAG,wBAApB;;AAEA,SAASC,oBAAT,GAAgC;AAC9B,SAAOC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,OAAnB,CAA2B;AAC5B,uEAA4DL,WAA5D;AAD4B,GAA3B,EAEAM,IAFA,CAEK,UAAAC,IAAI,EAAI;AAChB,QAAIC,MAAM,GAAGD,IAAI,CAACE,MAAL,CAAYC,KAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACD,GALI,EAKF,UAACK,MAAD,EAAY;AACbF,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACD,GAPI,CAAP;AAQD;;AAED,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC/B,MAAMC,WAAW,GAAGd,MAAM,CAACe,YAAP,CAAoBC,OAApB,CAA4B,IAA5B,CAApB;AACA;AACAC,EAAAA,cAAc,CAAC,UAASH,WAAT,EAAsB;AACnC,QAAIA,WAAJ,EAAiB;AACf;AACA,UAAIZ,MAAM,GAAGgB,cAAc,CAACC,MAAf,CAAsBC,IAAtB,CAA2B;AACtCC,QAAAA,YAAY,EAAE,sBAACC,IAAD,EAAU;AACtB;AACAA,UAAAA,IAAI,CAAC,IAAD,EAAOR,WAAP,CAAJ;AACD;AAJqC,OAA3B,CAAb,CAFe,CASf;;AACAZ,MAAAA,MAAM,CACHqB,GADH,CACO,YADP,EAEGC,GAFH,CAEO,EAFP,EAGGC,MAHH,CAGU,mCAHV,EAIGC,OAJH,CAIW,sBAJX,EAKGC,GALH,CAKO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAID,GAAJ,EAAS;AACPf,UAAAA,QAAQ,CAAC,IAAD,EAAOe,GAAP,CAAR;AACD,SAFD,MAEO;AACLf,UAAAA,QAAQ,CAACgB,GAAG,CAACC,KAAL,CAAR;AACD;AACF,OAXH;AAYD,KAtBD,MAsBO;AACL,UAAIC,KAAK,GAAG;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAAZ;AACAnB,MAAAA,QAAQ,CAAC,IAAD,EAAOkB,KAAP,CAAR;AACD;AACF,GA3Ba,CAAd;AA4BD;;AAGD,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtD,UAAGA,MAAM,CAACC,IAAP,KAAgB,mBAAnB,EAAwC;AACtCtC,QAAAA,oBAAoB;AACrB;;AACD,UAAGqC,MAAM,CAACC,IAAP,IAAe,oBAAlB,EAAwC;AACtC,YAAMC,GAAG,GAAGF,MAAM,CAACG,OAAP,CAAeD,GAA3B;AACAE,QAAAA,qBAAqB,CAACF,GAAD,CAArB;AACD;;AACD,aAAOH,IAAI,CAACC,MAAD,CAAX;AACD,KATyC;AAAA,GAAR;AAAA,CAA3B","sourcesContent":["import { createLogger } from 'redux-logger';\nimport axios from 'axios';\nexport const loggerMiddleware = createLogger();\n\n\nconst CALENDAR_ID = 'shamsheer619@gmail.com';\n\nfunction googleCalendarEvents() {\n  return window.gapi.client.request({\n        'path': `https://www.googleapis.com/calendar/v3/calendars/${CALENDAR_ID}/events`,\n      }).then(resp => {\n      let events = resp.result.items;\n      console.log(events);\n    }, (reason) => {\n      console.log(reason);\n    });\n}\n\nfunction getUserEvents(callback) {\n  const accessToken = window.localStorage.getItem('at');\n  debugger\n  getAccessToken(function(accessToken) {\n    if (accessToken) {\n      // Create a Graph client\n      var client = MicrosoftGraph.Client.init({\n        authProvider: (done) => {\n          // Just return the token\n          done(null, accessToken);\n        }\n      });\n\n      // Get the 10 newest events\n      client\n        .api('/me/events')\n        .top(10)\n        .select('subject,start,end,createdDateTime')\n        .orderby('createdDateTime DESC')\n        .get((err, res) => {\n          if (err) {\n            callback(null, err);\n          } else {\n            callback(res.value);\n          }\n        });\n    } else {\n      var error = { responseText: 'Could not retrieve access token' };\n      callback(null, error);\n    }\n  });\n}\n\n\nexport const apiMiddleware = store => next => action => {\n  if(action.type === 'GET_GOOGLE_EVENTS') {\n    googleCalendarEvents();\n  }\n  if(action.type == 'GET_OUTLOOK_EVENTS') {\n    const url = action.payload.url;\n    outLookCalendarEvents(url);\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}