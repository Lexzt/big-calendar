{"ast":null,"code":"import { UPDATE_STORED_EVENTS } from '../actions/events';\nimport { SUCCESS_STORED_EVENTS } from '../actions/db/events';\nvar initialState = {\n  calEvents: {},\n  calEventIds: []\n};\n\nvar mergeIds = function mergeIds(oldIds, newIds) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = newIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      if (!oldIds.includes(key)) {\n        oldIds.push(key);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return oldIds;\n};\n\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, {\n        calEvents: action.payload\n      });\n\n    case SUCCESS_STORED_EVENTS:\n      {\n        var newEventsIds = mergeIds(state.calEventsIds, action.payload.result.events);\n        var newEvents = mergeEvents(state.calEvents, action.payload, newEventsIds);\n        return Object.assign({}, state, {\n          calEvents: newEvents,\n          calEventIds: newEventsIds\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sham/big-calendar/src/newReducers/events.js"],"names":["UPDATE_STORED_EVENTS","SUCCESS_STORED_EVENTS","initialState","calEvents","calEventIds","mergeIds","oldIds","newIds","key","includes","push","eventsReducer","state","action","type","Object","assign","payload","newEventsIds","calEventsIds","result","events","newEvents","mergeEvents"],"mappings":"AAAA,SACEA,oBADF,QAEO,mBAFP;AAGA,SACEC,qBADF,QAEO,sBAFP;AAIA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB;;AAOA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAASC,MAAT,EAAoB;AAAA;AAAA;AAAA;;AAAA;AACnC,yBAAeA,MAAf,8HAAuB;AAAA,UAAfC,GAAe;;AACrB,UAAG,CAACF,MAAM,CAACG,QAAP,CAAgBD,GAAhB,CAAJ,EAA0B;AACxBF,QAAAA,MAAM,CAACI,IAAP,CAAYF,GAAZ;AACD;AACF;AALkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMnC,SAAOF,MAAP;AACD,CAPD;;AASA,eAAe,SAASK,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBV,YAAsB;AAAA,MAARW,MAAQ;;AAClE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKd,oBAAL;AACE,aAAOe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAET,QAAAA,SAAS,EAAEU,MAAM,CAACI;AAApB,OAAzB,CAAP;;AACF,SAAKhB,qBAAL;AAA4B;AAC1B,YAAIiB,YAAY,GAAGb,QAAQ,CAACO,KAAK,CAACO,YAAP,EAAqBN,MAAM,CAACI,OAAP,CAAeG,MAAf,CAAsBC,MAA3C,CAA3B;AACA,YAAIC,SAAS,GAAGC,WAAW,CAACX,KAAK,CAACT,SAAP,EAAkBU,MAAM,CAACI,OAAzB,EAAkCC,YAAlC,CAA3B;AACA,eAAOH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAET,UAAAA,SAAS,EAAEmB,SAAb;AAAwBlB,UAAAA,WAAW,EAAEc;AAArC,SAAzB,CAAP;AACD;;AACD;AACE,aAAON,KAAP;AATJ;AAWD","sourcesContent":["import {\n  UPDATE_STORED_EVENTS\n} from '../actions/events';\nimport {\n  SUCCESS_STORED_EVENTS\n} from '../actions/db/events';\n\nconst initialState = {\n  calEvents: {},\n  calEventIds: []\n}\n\n\n\nconst mergeIds = (oldIds, newIds) => {\n  for(let key of newIds) {\n    if(!oldIds.includes(key)) {\n      oldIds.push(key);\n    }\n  }\n  return oldIds;\n}\n\nexport default function eventsReducer(state = initialState, action) {\n  switch(action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, { calEvents: action.payload });\n    case SUCCESS_STORED_EVENTS: {\n      let newEventsIds = mergeIds(state.calEventsIds, action.payload.result.events);\n      let newEvents = mergeEvents(state.calEvents, action.payload, newEventsIds)\n      return Object.assign({}, state, { calEvents: newEvents, calEventIds: newEventsIds })\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}