{"ast":null,"code":"\"use strict\";\n/**\r\n * @module PageIterator\r\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Class for PageIterator\r\n */\n\nvar PageIterator =\n/** @class */\nfunction () {\n  /**\r\n   * Creates new instance for PageIterator\r\n   * @param {Client} client - The graph client instance\r\n   * @param {PageCollection} pageCollection - The page collection object\r\n   * @param {PageIteratorCallback} callBack - The callback function\r\n   */\n  function PageIterator(client, pageCollection, callback) {\n    var self = this;\n    self.client = client;\n    self.collection = pageCollection.value;\n    self.nextLink = pageCollection[\"@odata.nextLink\"];\n    self.deltaLink = pageCollection[\"@odata.deltaLink\"];\n    self.callback = callback;\n  }\n  /**\r\n   * @private\r\n   * Iterates over a collection by enqueuing entries one by one and kicking the callback with the enqueued entry\r\n   * @return A boolean indicating the continue flag to process next page\r\n   */\n\n\n  PageIterator.prototype.iterationHelper = function () {\n    var self = this;\n\n    if (self.collection === undefined || self.collection.length === 0) {\n      return false;\n    }\n\n    var advance = true;\n\n    while (advance && self.collection.length !== 0) {\n      var item = self.collection.shift();\n      advance = self.callback(item);\n    }\n\n    return advance;\n  };\n  /**\r\n   * @private\r\n   * @async\r\n   * Helper to make a get request to fetch next page with nextLink url and update the page iterator instance with the returned response\r\n   * @return A promise that resolves to a response data with next page collection\r\n   */\n\n\n  PageIterator.prototype.fetchAndUpdateNextPageData = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var self_1, response, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            self_1 = this;\n            return [4\n            /*yield*/\n            , self_1.client.api(self_1.nextLink).get()];\n\n          case 1:\n            response = _a.sent();\n            self_1.collection = response.value;\n            self_1.nextLink = response[\"@odata.nextLink\"];\n            self_1.deltaLink = response[\"@odata.deltaLink\"];\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_1 = _a.sent();\n            throw error_1;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Getter to get the deltaLink in the current response\r\n   * @return A deltaLink which is being used to make delta requests in future\r\n   */\n\n\n  PageIterator.prototype.getDeltaLink = function () {\n    return this.deltaLink;\n  };\n  /**\r\n   * @async\r\n   * Iterates over the collection and kicks callback for each item on iteration. Fetches next set of data through nextLink and iterates over again\r\n   * This happens until the nextLink is drained out or the user responds with a red flag to continue from callback\r\n   * @return A Promise that resolves to nothing on completion and throws error incase of any discrepancy.\r\n   */\n\n\n  PageIterator.prototype.iterate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var self_2, advance, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 6,, 7]);\n\n            self_2 = this, advance = self_2.iterationHelper();\n            _a.label = 1;\n\n          case 1:\n            if (!advance) return [3\n            /*break*/\n            , 5];\n            if (!(self_2.nextLink !== undefined)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , self_2.fetchAndUpdateNextPageData()];\n\n          case 2:\n            _a.sent();\n\n            advance = self_2.iterationHelper();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            advance = false;\n            _a.label = 4;\n\n          case 4:\n            return [3\n            /*break*/\n            , 1];\n\n          case 5:\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            error_2 = _a.sent();\n            throw error_2;\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * @async\r\n   * This internally calls the iterate method, It's just for more readability.\r\n   * @return A Promise that resolves to nothing on completion and throws error incase of any discrepancy\r\n   */\n\n\n  PageIterator.prototype.resume = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        try {\n          return [2\n          /*return*/\n          , this.iterate()];\n        } catch (error) {\n          throw error;\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return PageIterator;\n}();\n\nexports.PageIterator = PageIterator;","map":null,"metadata":{},"sourceType":"script"}