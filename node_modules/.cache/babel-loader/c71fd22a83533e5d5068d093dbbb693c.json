{"ast":null,"code":"import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\nfunction loadGoogleClient() {\n  var result = window.gapi.client.load('calendar', 'v3').then(function () {\n    var syncToken = localStorage.getItem('sync');\n    var request;\n\n    if (syncToken == null) {\n      console.log('performing full sync');\n      request = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary'\n      });\n    } else {\n      console.log('performing incremental sync');\n      request = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary',\n        'syncToken': syncToken\n      });\n    }\n\n    return request;\n  }).then(function (resp) {\n    var result = [];\n    var results = new Promise(function (resolve, reject) {\n      fetchEvents(resp, result, resolve, reject);\n    });\n    return results;\n  }).then(function (response) {\n    debugger;\n    return response;\n  });\n  debugger;\n  return from(result);\n}\n\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), map(function () {\n    loadGoogleClient();\n    return duplicateAction();\n  }));\n};\n\nvar normalizeEvents = function normalizeEvents(response) {\n  var singleEvent = new schema.Entity('events');\n  var results = normalize({\n    events: response\n  }, {\n    events: [singleEvent]\n  });\n  return results;\n};\n\nvar fetchEvents = function fetchEvents(resp, items, resolve, reject) {\n  debugger;\n  var newItems = items.concat(resp.result.items);\n  var pageToken = resp.nextPageToken;\n  var syncToken = resp.nextSyncToken;\n\n  if (pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'pageToken': pageToken\n    }).then(function (nextResp) {\n      return fetchEvents(nextResp, newItems, resolve, reject);\n    }).catch(function (e) {\n      if (e.code === 410) {\n        console.log('Invalid sync token, clearing event store and re-syncing.');\n        localStorage.deleteItem('sync');\n        window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        }).then(function (newResp) {\n          return fetchEvents(newResp, items, resolve, reject);\n        });\n      } else {\n        console.log(e);\n        reject('Something went wrong, Please refresh and try again');\n      }\n    });\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","loadGoogleClient","result","window","gapi","client","load","then","syncToken","localStorage","getItem","request","console","log","calendar","events","list","resp","results","Promise","resolve","reject","fetchEvents","response","beginGetEventsEpics","action$","pipe","normalizeEvents","singleEvent","Entity","items","newItems","concat","pageToken","nextPageToken","nextSyncToken","undefined","nextResp","catch","e","code","deleteItem","newResp","setItem"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\nfunction loadGoogleClient() {\n  const result = window.gapi.client.load('calendar', 'v3')\n    .then(() => {\n      let syncToken = localStorage.getItem('sync');\n      let request;\n      if(syncToken == null) {\n        console.log('performing full sync');\n        request =  window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary'\n        });\n      }\n      else {\n        console.log('performing incremental sync');\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      return request;\n    })\n    .then(resp => {\n      let result = [];\n      const results = new Promise((resolve, reject) => {\n        fetchEvents(resp, result, resolve, reject);\n      })\n      return results;\n    })\n    .then(response => {\n      debugger\n      return response;\n    });\n    debugger\n    return from(result);\n}\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  map(() => {\n    loadGoogleClient()\n    return duplicateAction();\n  })\n)\n\nconst normalizeEvents = (response) => {\n  let singleEvent = new schema.Entity('events');\n  let results = normalize({ events : response}, { events: [ singleEvent ]});\n  return results;\n}\n\nconst fetchEvents = (resp, items, resolve, reject) => {\n  debugger\n  const newItems = items.concat(resp.result.items);\n  let pageToken = resp.nextPageToken;\n  let syncToken = resp.nextSyncToken;\n  if(pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary',\n      'pageToken': pageToken\n    }).then(nextResp => fetchEvents(nextResp, newItems, resolve, reject))\n      .catch(e => {\n        if(e.code === 410) {\n          console.log('Invalid sync token, clearing event store and re-syncing.');\n          localStorage.deleteItem('sync');\n          window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n          }).then(newResp => fetchEvents(newResp, items, resolve, reject))\n        } else {\n          console.log(e);\n          reject('Something went wrong, Please refresh and try again');\n        }\n      })\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}