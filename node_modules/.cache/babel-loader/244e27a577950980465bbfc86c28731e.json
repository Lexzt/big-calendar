{"ast":null,"code":"import _toConsumableArray from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { UPDATE_STORED_EVENTS } from '../actions/events';\nimport { SUCCESS_STORED_EVENTS } from '../actions/db/events';\nvar initialState = {\n  calEvents: [],\n  calEventIds: []\n};\n\nvar mergeEvents = function mergeEvents(state, newData, newIds) {\n  var newEvents = newData.normalData.entities.events;\n\n  var updatedEventList = _toConsumableArray(oldEvents);\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = newIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      if (!oldEvents.hasOwnProperty(key)) {\n        updatedEventList.push(newEvents[key]);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var updatedEventsList = [].concat(_toConsumableArray(oldEvents), [newPayload]);\n  return updatedEventsList;\n};\n\nvar mergeIds = function mergeIds(oldIds, newIds) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = newIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var key = _step2.value;\n\n      if (!oldIds.includes(key)) {\n        oldIds.push(key);\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return oldIds;\n};\n\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, {\n        calEvents: action.payload\n      });\n\n    case SUCCESS_STORED_EVENTS:\n      {\n        var newEventsIds = mergeIds(state.calEventsIds, action.payload.result.events);\n        var newEvents = mergeEvents(state, action.payload, newEventsIds);\n        return Object.assign({}, state, {\n          calEvents: newEvents,\n          calEventIds: newEventsIds\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sham/big-calendar/src/newReducers/events.js"],"names":["UPDATE_STORED_EVENTS","SUCCESS_STORED_EVENTS","initialState","calEvents","calEventIds","mergeEvents","state","newData","newIds","newEvents","normalData","entities","events","updatedEventList","oldEvents","key","hasOwnProperty","push","updatedEventsList","newPayload","mergeIds","oldIds","includes","eventsReducer","action","type","Object","assign","payload","newEventsIds","calEventsIds","result"],"mappings":";AAAA,SACEA,oBADF,QAEO,mBAFP;AAGA,SACEC,qBADF,QAEO,sBAFP;AAIA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAC9C,MAAIC,SAAS,GAAGF,OAAO,CAACG,UAAR,CAAmBC,QAAnB,CAA4BC,MAA5C;;AACA,MAAIC,gBAAgB,sBAAOC,SAAP,CAApB;;AAF8C;AAAA;AAAA;;AAAA;AAG9C,yBAAeN,MAAf,8HAAuB;AAAA,UAAfO,GAAe;;AACrB,UAAG,CAACD,SAAS,CAACE,cAAV,CAAyBD,GAAzB,CAAJ,EAAmC;AACjCF,QAAAA,gBAAgB,CAACI,IAAjB,CAAsBR,SAAS,CAACM,GAAD,CAA/B;AACD;AACF;AAP6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQ9C,MAAIG,iBAAiB,gCAAOJ,SAAP,IAAkBK,UAAlB,EAArB;AACA,SAAOD,iBAAP;AACD,CAVD;;AAYA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAASb,MAAT,EAAoB;AAAA;AAAA;AAAA;;AAAA;AACnC,0BAAeA,MAAf,mIAAuB;AAAA,UAAfO,GAAe;;AACrB,UAAG,CAACM,MAAM,CAACC,QAAP,CAAgBP,GAAhB,CAAJ,EAA0B;AACxBM,QAAAA,MAAM,CAACJ,IAAP,CAAYF,GAAZ;AACD;AACF;AALkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMnC,SAAOM,MAAP;AACD,CAPD;;AASA,eAAe,SAASE,aAAT,GAAqD;AAAA,MAA9BjB,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARsB,MAAQ;;AAClE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKzB,oBAAL;AACE,aAAO0B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrB,KAAlB,EAAyB;AAAEH,QAAAA,SAAS,EAAEqB,MAAM,CAACI;AAApB,OAAzB,CAAP;;AACF,SAAK3B,qBAAL;AAA4B;AAC1B,YAAI4B,YAAY,GAAGT,QAAQ,CAACd,KAAK,CAACwB,YAAP,EAAqBN,MAAM,CAACI,OAAP,CAAeG,MAAf,CAAsBnB,MAA3C,CAA3B;AACA,YAAIH,SAAS,GAAGJ,WAAW,CAACC,KAAD,EAAQkB,MAAM,CAACI,OAAf,EAAwBC,YAAxB,CAA3B;AACA,eAAOH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrB,KAAlB,EAAyB;AAAEH,UAAAA,SAAS,EAAEM,SAAb;AAAwBL,UAAAA,WAAW,EAAEyB;AAArC,SAAzB,CAAP;AACD;;AACD;AACE,aAAOvB,KAAP;AATJ;AAWD","sourcesContent":["import {\n  UPDATE_STORED_EVENTS\n} from '../actions/events';\nimport {\n  SUCCESS_STORED_EVENTS\n} from '../actions/db/events';\n\nconst initialState = {\n  calEvents: [],\n  calEventIds: []\n}\n\nconst mergeEvents = (state, newData, newIds) => {\n  let newEvents = newData.normalData.entities.events;\n  let updatedEventList = [...oldEvents];\n  for(let key of newIds) {\n    if(!oldEvents.hasOwnProperty(key)) {\n      updatedEventList.push(newEvents[key]);\n    }\n  }\n  let updatedEventsList = [...oldEvents, newPayload]\n  return updatedEventsList\n}\n\nconst mergeIds = (oldIds, newIds) => {\n  for(let key of newIds) {\n    if(!oldIds.includes(key)) {\n      oldIds.push(key);\n    }\n  }\n  return oldIds;\n}\n\nexport default function eventsReducer(state = initialState, action) {\n  switch(action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, { calEvents: action.payload });\n    case SUCCESS_STORED_EVENTS: {\n      let newEventsIds = mergeIds(state.calEventsIds, action.payload.result.events);\n      let newEvents = mergeEvents(state, action.payload, newEventsIds)\n      return Object.assign({}, state, { calEvents: newEvents, calEventIds: newEventsIds })\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}