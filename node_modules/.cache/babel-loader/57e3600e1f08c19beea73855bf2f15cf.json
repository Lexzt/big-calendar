{"ast":null,"code":"import _toConsumableArray from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { UPDATE_STORED_EVENTS } from '../actions/events';\nimport { SUCCESS_STORED_EVENTS } from '../actions/db/events';\nvar initialState = {\n  calEvents: [],\n  calEventIds: []\n};\n\nvar mergeEvents = function mergeEvents(oldEvents, newData) {\n  var newIds = newData.normalData.result.events;\n  var newEvents = newData.normalData.entities.events;\n\n  var updatedEventList = _toConsumableArray(oldEvents);\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = newIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      if (!oldEvents.hasOwnProperty(key)) {\n        updatedEventList.push(newEvents[key]);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var updatedEventsList = [].concat(_toConsumableArray(oldEvents), [newPayload]);\n  return updatedEventsList;\n};\n\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, {\n        calEvents: action.payload\n      });\n\n    case SUCCESS_STORED_EVENTS:\n      {\n        var newEvents = mergeEvents(state, action.payload);\n        return Object.assign({}, state, {\n          calEvents: newEvents\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sham/big-calendar/src/newReducers/events.js"],"names":["UPDATE_STORED_EVENTS","SUCCESS_STORED_EVENTS","initialState","calEvents","calEventIds","mergeEvents","oldEvents","newData","newIds","normalData","result","events","newEvents","entities","updatedEventList","key","hasOwnProperty","push","updatedEventsList","newPayload","eventsReducer","state","action","type","Object","assign","payload"],"mappings":";AAAA,SACEA,oBADF,QAEO,mBAFP;AAGA,SACEC,qBADF,QAEO,sBAFP;AAIA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAAYC,OAAZ,EAAwB;AAC1C,MAAIC,MAAM,GAAGD,OAAO,CAACE,UAAR,CAAmBC,MAAnB,CAA0BC,MAAvC;AACA,MAAIC,SAAS,GAAGL,OAAO,CAACE,UAAR,CAAmBI,QAAnB,CAA4BF,MAA5C;;AACA,MAAIG,gBAAgB,sBAAOR,SAAP,CAApB;;AAH0C;AAAA;AAAA;;AAAA;AAI1C,yBAAeE,MAAf,8HAAuB;AAAA,UAAfO,GAAe;;AACrB,UAAG,CAACT,SAAS,CAACU,cAAV,CAAyBD,GAAzB,CAAJ,EAAmC;AACjCD,QAAAA,gBAAgB,CAACG,IAAjB,CAAsBL,SAAS,CAACG,GAAD,CAA/B;AACD;AACF;AARyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAS1C,MAAIG,iBAAiB,gCAAOZ,SAAP,IAAkBa,UAAlB,EAArB;AACA,SAAOD,iBAAP;AACD,CAXD;;AAaA,eAAe,SAASE,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBnB,YAAsB;AAAA,MAARoB,MAAQ;;AAClE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKvB,oBAAL;AACE,aAAOwB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAElB,QAAAA,SAAS,EAAEmB,MAAM,CAACI;AAApB,OAAzB,CAAP;;AACF,SAAKzB,qBAAL;AAA4B;AAC1B,YAAIW,SAAS,GAAGP,WAAW,CAACgB,KAAD,EAAQC,MAAM,CAACI,OAAf,CAA3B;AACA,eAAOF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAElB,UAAAA,SAAS,EAAES;AAAb,SAAzB,CAAP;AACD;;AACD;AACE,aAAOS,KAAP;AARJ;AAUD","sourcesContent":["import {\n  UPDATE_STORED_EVENTS\n} from '../actions/events';\nimport {\n  SUCCESS_STORED_EVENTS\n} from '../actions/db/events';\n\nconst initialState = {\n  calEvents: [],\n  calEventIds: []\n}\n\nconst mergeEvents = (oldEvents, newData) => {\n  let newIds = newData.normalData.result.events;\n  let newEvents = newData.normalData.entities.events;\n  let updatedEventList = [...oldEvents];\n  for(let key of newIds) {\n    if(!oldEvents.hasOwnProperty(key)) {\n      updatedEventList.push(newEvents[key]);\n    }\n  }\n  let updatedEventsList = [...oldEvents, newPayload]\n  return updatedEventsList\n}\n\nexport default function eventsReducer(state = initialState, action) {\n  switch(action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, { calEvents: action.payload });\n    case SUCCESS_STORED_EVENTS: {\n      let newEvents = mergeEvents(state, action.payload)\n      return Object.assign({}, state, { calEvents: newEvents })\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}