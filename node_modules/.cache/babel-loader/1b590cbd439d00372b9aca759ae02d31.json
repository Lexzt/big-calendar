{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nÍ;\n\nfunction loadClient() {\n  return _loadClient.apply(this, arguments);\n}\n\nfunction _loadClient() {\n  _loadClient = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            result = new Promise(function (resolve) {\n              resolve(window.gapi.client.load('calendar', 'v3'));\n            });\n            return _context.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _loadClient.apply(this, arguments);\n}\n\nfunction loadCalendar() {\n  return _loadCalendar.apply(this, arguments);\n}\n\nfunction _loadCalendar() {\n  _loadCalendar = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            result = new Promise(function (resolve) {\n              resolve(window.gapi.client.calendar.events.list({\n                'calendarId': 'primary'\n              }));\n            });\n            debugger;\n            return _context2.abrupt(\"return\", result);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _loadCalendar.apply(this, arguments);\n}\n\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), mergeMap(function () {\n    return from(loadClient()).pipe(mergeMap(function () {\n      return from(loadCalendar()).pipe(map(function (resp) {\n        debugger;\n        return duplicateAction();\n      }));\n    }));\n  }));\n};\n\nvar normalizeEvents = function normalizeEvents(response) {\n  var singleEvent = new schema.Entity('events');\n  var results = normalize({\n    events: response\n  }, {\n    events: [singleEvent]\n  });\n  return results;\n};\n\nvar fetchEvents = function fetchEvents(resp, items, resolve, reject) {\n  debugger;\n  var newItems = items.concat(resp.result.items);\n  var pageToken = resp.nextPageToken;\n  var syncToken = resp.nextSyncToken;\n\n  if (pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'pageToken': pageToken\n    }).then(function (nextResp) {\n      return fetchEvents(nextResp, newItems, resolve, reject);\n    }).catch(function (e) {\n      if (e.code === 410) {\n        console.log('Invalid sync token, clearing event store and re-syncing.');\n        localStorage.deleteItem('sync');\n        window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        }).then(function (newResp) {\n          return fetchEvents(newResp, items, resolve, reject);\n        });\n      } else {\n        console.log(e);\n        reject('Something went wrong, Please refresh and try again');\n      }\n    });\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","Í","loadClient","result","Promise","resolve","window","gapi","client","load","loadCalendar","calendar","events","list","beginGetEventsEpics","action$","pipe","resp","normalizeEvents","response","singleEvent","Entity","results","fetchEvents","items","reject","newItems","concat","pageToken","nextPageToken","syncToken","nextSyncToken","undefined","then","nextResp","catch","e","code","console","log","localStorage","deleteItem","newResp","setItem"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN, } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';Í\n\nasync function loadClient() {\n  let result =  new Promise((resolve) => {\n    resolve(window.gapi.client.load('calendar', 'v3'));\n  })\n  return result;\n}\n\nasync function loadCalendar() {\n  let result = new Promise((resolve) => {\n    resolve( window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary'\n    }));\n  })\n  debugger;\n  return result\n}\n\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  mergeMap(() => from(loadClient()).pipe(\n      mergeMap(() => from(loadCalendar()).pipe(\n          map(resp => {\n            debugger;\n            return duplicateAction();\n          })\n        )\n      )\n    )\n  )\n)\n\nconst normalizeEvents = (response) => {\n  let singleEvent = new schema.Entity('events');\n  let results = normalize({ events : response}, { events: [ singleEvent ]});\n  return results;\n}\n\nconst fetchEvents = (resp, items, resolve, reject) => {\n  debugger\n  const newItems = items.concat(resp.result.items);\n  let pageToken = resp.nextPageToken;\n  let syncToken = resp.nextSyncToken;\n  if(pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary',\n      'pageToken': pageToken\n    }).then(nextResp => fetchEvents(nextResp, newItems, resolve, reject))\n      .catch(e => {\n        if(e.code === 410) {\n          console.log('Invalid sync token, clearing event store and re-syncing.');\n          localStorage.deleteItem('sync');\n          window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n          }).then(newResp => fetchEvents(newResp, items, resolve, reject))\n        } else {\n          console.log(e);\n          reject('Something went wrong, Please refresh and try again');\n        }\n      })\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}