{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar es6_promise_1 = require(\"es6-promise\");\n\nrequire(\"isomorphic-fetch\");\n\nvar common_1 = require(\"./common\");\n\nvar ResponseHandler_1 = require(\"./ResponseHandler\");\n\nvar RequestMethod_1 = require(\"./RequestMethod\");\n\nvar ResponseType_1 = require(\"./ResponseType\");\n\nvar GraphHelper_1 = require(\"./GraphHelper\");\n\nvar GraphRequest =\n/** @class */\nfunction () {\n  function GraphRequest(config, path) {\n    var self = this;\n    self.config = config;\n    self._options = {};\n    self._headers = {};\n    self.urlComponents = {\n      host: self.config.baseUrl,\n      version: self.config.defaultVersion,\n      oDataQueryParams: {},\n      otherURLQueryParams: {}\n    };\n    self.parsePath(path);\n  }\n\n  GraphRequest.prototype.header = function (headerKey, headerValue) {\n    var self = this;\n    self._headers[headerKey] = headerValue;\n    return self;\n  };\n\n  GraphRequest.prototype.headers = function (headers) {\n    var self = this;\n\n    for (var key in headers) {\n      self._headers[key] = headers[key];\n    }\n\n    return self;\n  };\n\n  GraphRequest.prototype.option = function (key, value) {\n    var self = this;\n    self._options[key] = value;\n    return self;\n  };\n\n  GraphRequest.prototype.options = function (options) {\n    var self = this;\n\n    for (var key in options) {\n      self._options[key] = options[key];\n    }\n\n    return self;\n  };\n\n  GraphRequest.prototype.parsePath = function (rawPath) {\n    // break rawPath into this.urlComponents\n    // strip out the base url if they passed it in\n    if (rawPath.indexOf(\"https://\") != -1) {\n      rawPath = rawPath.replace(\"https://\", \"\"); // find where the host ends\n\n      var endOfHostStrPos = rawPath.indexOf(\"/\");\n      this.urlComponents.host = \"https://\" + rawPath.substring(0, endOfHostStrPos); // parse out the host\n      // strip the host from rawPath\n\n      rawPath = rawPath.substring(endOfHostStrPos + 1, rawPath.length); // then remove the following version\n\n      var endOfVersionStrPos = rawPath.indexOf(\"/\"); // parse out the version\n\n      this.urlComponents.version = rawPath.substring(0, endOfVersionStrPos); // strip version from rawPath\n\n      rawPath = rawPath.substring(endOfVersionStrPos + 1, rawPath.length);\n    } // strip out any leading \"/\"\n\n\n    if (rawPath.charAt(0) == \"/\") {\n      rawPath = rawPath.substr(1);\n    }\n\n    var queryStrPos = rawPath.indexOf(\"?\"); // let afterPath = \n\n    if (queryStrPos == -1) {\n      // no query string\n      this.urlComponents.path = rawPath;\n    } else {\n      this.urlComponents.path = rawPath.substr(0, queryStrPos); // capture query string into\n      // this.urlComponents.oDataQueryParams\n      // and\n      // this.urlComponents.otherURLQueryParams\n\n      var queryParams = rawPath.substring(queryStrPos + 1, rawPath.length).split(\"&\");\n\n      for (var _i = 0, queryParams_1 = queryParams; _i < queryParams_1.length; _i++) {\n        var queryParam = queryParams_1[_i]; //queryParam:  a=b\n\n        var queryParams_2 = queryParam.split(\"=\");\n        var key = queryParams_2[0];\n        var value = queryParams_2[1];\n\n        if (common_1.oDataQueryNames.indexOf(key)) {\n          this.urlComponents.oDataQueryParams[key] = value;\n        } else {\n          this.urlComponents.otherURLQueryParams[key] = value;\n        }\n      }\n    }\n  };\n\n  GraphRequest.prototype.urlJoin = function (urlSegments) {\n    var tr = function tr(s) {\n      return s.replace(/\\/+$/, '');\n    };\n\n    var tl = function tl(s) {\n      return s.replace(/^\\/+/, '');\n    };\n\n    var joiner = function joiner(pre, cur) {\n      return [tr(pre), tl(cur)].join('/');\n    };\n\n    var parts = Array.prototype.slice.call(urlSegments);\n    return parts.reduce(joiner);\n  };\n\n  GraphRequest.prototype.buildFullUrl = function () {\n    var url = this.urlJoin([this.urlComponents.host, this.urlComponents.version, this.urlComponents.path]) + this.createQueryString();\n\n    if (this.config.debugLogging) {\n      console.log(url);\n    }\n\n    return url;\n  };\n\n  GraphRequest.prototype.version = function (v) {\n    this.urlComponents.version = v;\n    return this;\n  };\n  /*\r\n   * Accepts .select(\"displayName,birthday\")\r\n   *     and .select([\"displayName\", \"birthday\"])\r\n   *     and .select(\"displayName\", \"birthday\")\r\n   *\r\n   */\n\n\n  GraphRequest.prototype.select = function (properties) {\n    this.addCsvQueryParameter(\"$select\", properties, arguments);\n    return this;\n  };\n\n  GraphRequest.prototype.expand = function (properties) {\n    this.addCsvQueryParameter(\"$expand\", properties, arguments);\n    return this;\n  };\n\n  GraphRequest.prototype.orderby = function (properties) {\n    this.addCsvQueryParameter(\"$orderby\", properties, arguments);\n    return this;\n  };\n\n  GraphRequest.prototype.filter = function (filterStr) {\n    this.urlComponents.oDataQueryParams[\"$filter\"] = filterStr;\n    return this;\n  };\n\n  GraphRequest.prototype.top = function (n) {\n    this.urlComponents.oDataQueryParams[\"$top\"] = n;\n    return this;\n  };\n\n  GraphRequest.prototype.skip = function (n) {\n    this.urlComponents.oDataQueryParams[\"$skip\"] = n;\n    return this;\n  };\n\n  GraphRequest.prototype.skipToken = function (token) {\n    this.urlComponents.oDataQueryParams[\"$skipToken\"] = token;\n    return this;\n  };\n\n  GraphRequest.prototype.count = function (count) {\n    this.urlComponents.oDataQueryParams[\"$count\"] = count.toString();\n    return this;\n  };\n\n  GraphRequest.prototype.responseType = function (responseType) {\n    this._responseType = responseType;\n    return this;\n  }; // helper for $select, $expand and $orderby (must be comma separated)\n\n\n  GraphRequest.prototype.addCsvQueryParameter = function (propertyName, propertyValue, additionalProperties) {\n    // if there are already $propertyName value there, append a \",\"\n    this.urlComponents.oDataQueryParams[propertyName] = this.urlComponents.oDataQueryParams[propertyName] ? this.urlComponents.oDataQueryParams[propertyName] + \",\" : \"\";\n    var allValues = [];\n\n    if (typeof propertyValue === \"string\") {\n      allValues.push(propertyValue);\n    } else {\n      // propertyValue passed in as array\n      allValues = allValues.concat(propertyValue);\n    } // merge in additionalProperties\n\n\n    if (additionalProperties.length > 1 && typeof propertyValue === \"string\") {\n      allValues = Array.prototype.slice.call(additionalProperties);\n    }\n\n    this.urlComponents.oDataQueryParams[propertyName] += allValues.join(\",\");\n  };\n\n  GraphRequest.prototype.delete = function (callback) {\n    var self = this,\n        url = self.buildFullUrl(),\n        options = {\n      method: RequestMethod_1.RequestMethod.DELETE\n    };\n    return self.sendRequestAndRouteResponse(url, options, callback);\n  };\n  /**\r\n   * Alias for delete call\r\n   */\n\n\n  GraphRequest.prototype.del = function (callback) {\n    return this.delete(callback);\n  };\n\n  GraphRequest.prototype.patch = function (content, callback) {\n    var self = this,\n        url = self.buildFullUrl(),\n        options = {\n      method: RequestMethod_1.RequestMethod.PATCH,\n      body: GraphHelper_1.GraphHelper.serializeContent(content),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    return self.sendRequestAndRouteResponse(url, options, callback);\n  };\n\n  GraphRequest.prototype.post = function (content, callback) {\n    var self = this,\n        url = self.buildFullUrl(),\n        options = {\n      method: RequestMethod_1.RequestMethod.POST,\n      body: GraphHelper_1.GraphHelper.serializeContent(content),\n      headers: content.constructor !== undefined && content.constructor.name === \"FormData\" ? {} : {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    return self.sendRequestAndRouteResponse(url, options, callback);\n  };\n  /**\r\n   * Alias for Post call\r\n   */\n\n\n  GraphRequest.prototype.create = function (content, callback) {\n    return this.post(content, callback);\n  };\n\n  GraphRequest.prototype.put = function (content, callback) {\n    var self = this,\n        url = self.buildFullUrl(),\n        options = {\n      method: RequestMethod_1.RequestMethod.PUT,\n      body: GraphHelper_1.GraphHelper.serializeContent(content),\n      headers: {\n        \"Content-Type\": \"application/octet-stream\"\n      }\n    };\n    return self.sendRequestAndRouteResponse(url, options, callback);\n  };\n  /**\r\n   * Alias for update call\r\n   */\n\n\n  GraphRequest.prototype.update = function (content, callback) {\n    return this.patch(content, callback);\n  };\n\n  GraphRequest.prototype.get = function (callback) {\n    var self = this,\n        url = self.buildFullUrl(),\n        options = {\n      method: RequestMethod_1.RequestMethod.GET\n    };\n    return self.sendRequestAndRouteResponse(url, options, callback);\n  };\n\n  GraphRequest.prototype.getStream = function (callback) {\n    var self = this,\n        url = self.buildFullUrl(),\n        options = {\n      method: RequestMethod_1.RequestMethod.GET\n    };\n    self.responseType(ResponseType_1.ResponseType.STREAM);\n    return self.sendRequestAndRouteResponse(url, options, callback);\n  };\n\n  GraphRequest.prototype.putStream = function (stream, callback) {\n    var self = this,\n        url = self.buildFullUrl(),\n        options = {\n      method: RequestMethod_1.RequestMethod.PUT,\n      headers: {\n        \"Content-Type\": \"application/octet-stream\"\n      },\n      body: stream\n    };\n    return self.sendRequestAndRouteResponse(url, options, callback);\n  };\n  /**\r\n   * @private\r\n   * Sends request and routes response to the callback or resolves to promise\r\n   * @param {RequestInfo} request - The Request object or url string value\r\n   * @param {FetchOptions} options - The options for the fetch api request\r\n   * @param {GraphRequestCallback} callback - The callback that needs to be called on response\r\n   * @return The promise in case if the callback param is empty\r\n   */\n\n\n  GraphRequest.prototype.sendRequestAndRouteResponse = function (request, options, callback) {\n    // return a promise when Promises are supported and no callback was provided\n    if (callback == null && typeof es6_promise_1.Promise !== \"undefined\") {\n      return this.routeResponseToPromise(request, options);\n    } else {\n      this.routeResponseToCallback(request, options, callback);\n    }\n  };\n  /**\r\n   * @private\r\n   * Gets the Promise that will resolve or reject with fetch api request\r\n   * @param {RequestInfo} request - The Request object or url string value\r\n   * @param {FetchOptions} options - The options for the fetch api request\r\n   * @return The Promise that resolves with Response\r\n   */\n\n\n  GraphRequest.prototype.routeResponseToPromise = function (request, options) {\n    var _this = this;\n\n    return new es6_promise_1.Promise(function (resolve, reject) {\n      _this.routeResponseToCallback(request, options, function (err, body) {\n        if (err != null) {\n          reject(err);\n        } else {\n          resolve(body);\n        }\n      });\n    });\n  };\n  /**\r\n   * @private\r\n   * Makes request to the service by getting auth token from the auth provider\r\n   * @param {RequestInfo} request - The Request object or url string value\r\n   * @param {FetchOptions} options - The options for the fetch api request\r\n   * @param {GraphRequestCallback} callback - The callback function\r\n   */\n\n\n  GraphRequest.prototype.routeResponseToCallback = function (request, options, callback) {\n    var _this = this;\n\n    if (callback === void 0) {\n      callback = function callback() {};\n    }\n\n    var self = this;\n    self.config.authProvider(function (err, accessToken) {\n      if (err == null && accessToken != null) {\n        options = self.configureRequestOptions(options, accessToken);\n        fetch(request, options).then(function (response) {\n          _this.convertResponseType(response).then(function (responseValue) {\n            ResponseHandler_1.ResponseHandler.init(response, undefined, responseValue, callback);\n          }).catch(function (error) {\n            ResponseHandler_1.ResponseHandler.init(response, error, undefined, callback);\n          });\n        }).catch(function (error) {\n          ResponseHandler_1.ResponseHandler.init(undefined, error, undefined, callback);\n        });\n      } else {\n        callback(err, null, null);\n      }\n    });\n  };\n  /**\r\n   * @private\r\n   * Customizes the fetch options with the Auth token, SDKVersion header and customization applied via init, .header, .headers, .option, .options etc\r\n   * @param {FetchOptions} options - The options for the fetch api request\r\n   * @param {string} accessToken - The access token value\r\n   * @return The fetch options with customization\r\n   */\n\n\n  GraphRequest.prototype.configureRequestOptions = function (options, accessToken) {\n    var self = this,\n        defaultHeaders = {\n      Authorization: \"Bearer \" + accessToken,\n      SdkVersion: \"graph-js-\" + common_1.PACKAGE_VERSION\n    };\n    var configuredOptions = {\n      headers: {}\n    };\n    Object.assign(configuredOptions, self.config.fetchOptions, self._options, options);\n    Object.assign(configuredOptions.headers, defaultHeaders, self._headers, options.headers);\n    return configuredOptions;\n  }; // append query strings to the url, accepts either a string like $select=displayName or a dictionary {\"$select\": \"displayName\"}\n\n\n  GraphRequest.prototype.query = function (queryDictionaryOrString) {\n    if (typeof queryDictionaryOrString === \"string\") {\n      // is string\n      var queryStr = queryDictionaryOrString;\n      var queryKey = queryStr.split(\"=\")[0];\n      var queryValue = queryStr.split(\"=\")[1];\n      this.urlComponents.otherURLQueryParams[queryKey] = queryValue;\n    } else {\n      // is dictionary\n      for (var key in queryDictionaryOrString) {\n        this.urlComponents.otherURLQueryParams[key] = queryDictionaryOrString[key];\n      }\n    }\n\n    return this;\n  }; // ex: ?$select=displayName&$filter=startsWith(displayName, 'A')\n  // does not include starting ?\n\n\n  GraphRequest.prototype.createQueryString = function () {\n    // need to combine first this.urlComponents.oDataQueryParams and this.urlComponents.otherURLQueryParams\n    var q = [];\n\n    if (Object.keys(this.urlComponents.oDataQueryParams).length != 0) {\n      for (var property in this.urlComponents.oDataQueryParams) {\n        q.push(property + \"=\" + this.urlComponents.oDataQueryParams[property]);\n      }\n    }\n\n    if (Object.keys(this.urlComponents.otherURLQueryParams).length != 0) {\n      for (var property in this.urlComponents.otherURLQueryParams) {\n        q.push(property + \"=\" + this.urlComponents.otherURLQueryParams[property]);\n      }\n    }\n\n    if (q.length > 0) {\n      return \"?\" + q.join(\"&\");\n    }\n\n    return \"\";\n  };\n\n  GraphRequest.prototype.convertResponseType = function (response) {\n    var responseValue;\n\n    if (!this._responseType) {\n      this._responseType = '';\n    }\n\n    switch (this._responseType.toLowerCase()) {\n      case ResponseType_1.ResponseType.ARRAYBUFFER:\n        responseValue = response.arrayBuffer();\n        break;\n\n      case ResponseType_1.ResponseType.BLOB:\n        responseValue = response.blob();\n        break;\n\n      case ResponseType_1.ResponseType.DOCUMENT:\n        // XMLHTTPRequest only :(\n        responseValue = response.json();\n        break;\n\n      case ResponseType_1.ResponseType.JSON:\n        responseValue = response.json();\n        break;\n\n      case ResponseType_1.ResponseType.STREAM:\n        responseValue = es6_promise_1.Promise.resolve(response.body);\n        break;\n\n      case ResponseType_1.ResponseType.TEXT:\n        responseValue = response.text();\n        break;\n\n      default:\n        responseValue = response.json();\n        break;\n    }\n\n    return responseValue;\n  };\n\n  return GraphRequest;\n}();\n\nexports.GraphRequest = GraphRequest;","map":null,"metadata":{},"sourceType":"script"}