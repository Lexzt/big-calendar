{"ast":null,"code":"var _this = this;\n\nimport { BEGIN_GOOGLE_AUTH, successGoogleAuth } from '../redux/actions';\nimport { mergeMap, map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nvar GOOGLE_CLIENT_ID = '65724758895-gc7lubjkjsqqddfhlb7jcme80i3mjqn0.apps.googleusercontent.com';\nvar API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nvar GOOGLE_SCOPE = \"https://www.googleapis.com/auth/calendar.events\";\nvar OUTLOOK_CLIENT_ID = '6b770a68-2156-4345-b0aa-d95419e31be1';\nvar BASE_URL = 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize?';\nvar OUTLOOK_SCOPE = 'openid profile Calendars.ReadWrite.Shared';\nvar PARAMS_URL = \"response_type=id_token+token&client_id=\".concat(OUTLOOK_CLIENT_ID, \"\\n                    &redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Foutlook-redirect\\n                    &scope=\").concat(OUTLOOK_SCOPE, \"&state=f175f48d-d277-9893-9c8d-dcc2a95ffe16\\n                    &nonce=593a2b06-d77b-31c2-ae43-e74c0ebeb304\\n                    &response_mode=fragment\");\nvar GoogleAuth;\nexport var beginGoogleOldAuthEpic = function beginGoogleOldAuthEpic(action$) {\n  return action$.ofType(BEGIN_GOOGLE_AUTH).mergeMap(function () {\n    window.gapi.load('client:auth2', initClient()).map(function () {\n      debugger;\n      GoogleAuth = window.gapi.auth2.getAuthInstance();\n      var user = GoogleAuth.currentUser.get();\n      var isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n\n      if (isAuthorized) {\n        return successGoogleAuth(user);\n      }\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  });\n};\nexport var beginGoogleAuthEpic = function beginGoogleAuthEpic(action$) {\n  return action$.pipe(ofType(BEGIN_GOOGLE_AUTH), mergeMap(function () {\n    return window.gapi.load('client:auth2', initClient()).pipe( // <----- here\n    map(function () {\n      GoogleAuth = window.gapi.auth2.getAuthInstance();\n      var user = GoogleAuth.currentUser.get();\n      var isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n\n      if (isAuthorized) {\n        return successGoogleAuth(user);\n      }\n    }).catch(function (error) {\n      return console.log(error);\n    }));\n  }));\n};\n\nvar initClient = function initClient() {\n  debugger;\n  window.gapi.client.init({\n    'apiKey': API_KEY,\n    'clientId': GOOGLE_CLIENT_ID,\n    'scope': GOOGLE_SCOPE,\n    'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n  }).then(function () {\n    GoogleAuth = window.gapi.auth2.getAuthInstance();\n    handleAuthClick();\n    GoogleAuth.isSignedIn.listen(updateSigninStatus);\n    setSigninStatus();\n  });\n};\n\nvar handleAuthClick = function handleAuthClick() {\n  if (GoogleAuth.isSignedIn.get()) {\n    GoogleAuth.signOut();\n  } else {\n    GoogleAuth.signIn();\n  }\n};\n\nvar updateSigninStatus = function updateSigninStatus(isSignedIn) {\n  _this.setSigninStatus();\n};\n\nvar setSigninStatus = function setSigninStatus() {\n  var user = GoogleAuth.currentUser.get();\n  var isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n\n  if (isAuthorized) {\n    console.log(\"Authorized\");\n\n    _this.props.getGoogleEvents();\n  } else {\n    console.log(\"Not authorized\");\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/auth.js"],"names":["BEGIN_GOOGLE_AUTH","successGoogleAuth","mergeMap","map","ofType","GOOGLE_CLIENT_ID","API_KEY","GOOGLE_SCOPE","OUTLOOK_CLIENT_ID","BASE_URL","OUTLOOK_SCOPE","PARAMS_URL","GoogleAuth","beginGoogleOldAuthEpic","action$","window","gapi","load","initClient","auth2","getAuthInstance","user","currentUser","get","isAuthorized","hasGrantedScopes","catch","error","console","log","beginGoogleAuthEpic","pipe","client","init","then","handleAuthClick","isSignedIn","listen","updateSigninStatus","setSigninStatus","signOut","signIn","props","getGoogleEvents"],"mappings":"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","sourcesContent":["import { BEGIN_GOOGLE_AUTH, successGoogleAuth } from '../redux/actions';\nimport { mergeMap, map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nconst GOOGLE_CLIENT_ID = '65724758895-gc7lubjkjsqqddfhlb7jcme80i3mjqn0.apps.googleusercontent.com';\nconst API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nconst GOOGLE_SCOPE = `https://www.googleapis.com/auth/calendar.events`;\nconst OUTLOOK_CLIENT_ID = '6b770a68-2156-4345-b0aa-d95419e31be1';\nconst BASE_URL = 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize?';\nconst OUTLOOK_SCOPE = 'openid profile Calendars.ReadWrite.Shared';\nconst PARAMS_URL = `response_type=id_token+token&client_id=${OUTLOOK_CLIENT_ID}\n                    &redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Foutlook-redirect\n                    &scope=${OUTLOOK_SCOPE}&state=f175f48d-d277-9893-9c8d-dcc2a95ffe16\n                    &nonce=593a2b06-d77b-31c2-ae43-e74c0ebeb304\n                    &response_mode=fragment`;\n\nvar GoogleAuth;\n\n\nexport const beginGoogleOldAuthEpic = action$ => action$.ofType(BEGIN_GOOGLE_AUTH)\n  .mergeMap(() => {\n      window.gapi.load('client:auth2', initClient())\n      .map(() => {\n        debugger\n        GoogleAuth = window.gapi.auth2.getAuthInstance()\n        const user = GoogleAuth.currentUser.get();\n        const isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n        if(isAuthorized) {\n          return successGoogleAuth(user);\n        }\n      })\n      .catch(error => console.log(error))\n  })\n\nexport const beginGoogleAuthEpic = action$ =>\n  action$.pipe(\n    ofType(BEGIN_GOOGLE_AUTH),\n    mergeMap(() =>\n      window.gapi.load('client:auth2', initClient()).pipe( // <----- here\n        map(() => {\n          GoogleAuth = window.gapi.auth2.getAuthInstance()\n          const user = GoogleAuth.currentUser.get();\n          const isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n          if(isAuthorized) {\n            return successGoogleAuth(user);\n          }\n        })\n        .catch(error => console.log(error))\n      )\n    )\n  );\nconst initClient = () => {\n  debugger\n  window.gapi.client.init({\n      'apiKey': API_KEY,\n      'clientId': GOOGLE_CLIENT_ID,\n      'scope': GOOGLE_SCOPE,\n      'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'],\n  }).then( () => {\n      GoogleAuth = window.gapi.auth2.getAuthInstance();\n      handleAuthClick();\n      GoogleAuth.isSignedIn.listen(updateSigninStatus);\n      setSigninStatus();\n  })\n}\n\nconst handleAuthClick = () => {\n  if (GoogleAuth.isSignedIn.get()) {\n      GoogleAuth.signOut();\n  } else {\n      GoogleAuth.signIn();\n    }\n}\n\nconst updateSigninStatus = (isSignedIn) => {\n  this.setSigninStatus();\n}\n\nconst setSigninStatus = () => {\n  var user = GoogleAuth.currentUser.get();\n  var isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n  if (isAuthorized) {\n    console.log(\"Authorized\");\n    this.props.getGoogleEvents();\n  } else {\n    console.log(\"Not authorized\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}