{"ast":null,"code":"import _objectSpread from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_NEW_EVENT, UPDATE_EVENTS, GET_GOOGLE_EVENTS_SUCCESS, GET_GOOGLE_EVENTS_FAILURE } from './actions';\nvar initialState = {\n  events: [{\n    allDay: false,\n    end: new Date('December 12, 2018 02:13:00'),\n    start: new Date('December 12, 2018 01:13:00'),\n    title: 'New Event'\n  }],\n  data: [],\n  error: ''\n};\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_NEW_EVENT:\n      var newEventsList = state.events.concat(action.payload.newEvent);\n      return {\n        events: newEventsList\n      };\n\n    case UPDATE_EVENTS:\n      return {\n        events: action.payload.updatedEvents\n      };\n\n    case GET_GOOGLE_EVENTS_SUCCESS:\n      return _objectSpread({}, state, {\n        data: action.payload.data\n      });\n\n    case GET_GOOGLE_EVENTS_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload.error\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/redux/reducers.js"],"names":["ADD_NEW_EVENT","UPDATE_EVENTS","GET_GOOGLE_EVENTS_SUCCESS","GET_GOOGLE_EVENTS_FAILURE","initialState","events","allDay","end","Date","start","title","data","error","eventsReducer","state","action","type","newEventsList","concat","payload","newEvent","updatedEvents"],"mappings":";AAAA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,yBAAvC,EAAkEC,yBAAlE,QAAmG,WAAnG;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,GAAG,EAAE,IAAIC,IAAJ,CAAS,4BAAT,CAFP;AAGEC,IAAAA,KAAK,EAAE,IAAID,IAAJ,CAAS,4BAAT,CAHT;AAIEE,IAAAA,KAAK,EAAE;AAJT,GADM,CADW;AAUnBC,EAAAA,IAAI,EAAE,EAVa;AAWnBC,EAAAA,KAAK,EAAE;AAXY,CAArB;AAeA,eAAe,SAASC,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBV,YAAsB;AAAA,MAARW,MAAQ;;AAClE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKhB,aAAL;AACE,UAAMiB,aAAa,GAAGH,KAAK,CAACT,MAAN,CAAaa,MAAb,CAAoBH,MAAM,CAACI,OAAP,CAAeC,QAAnC,CAAtB;AACA,aAAO;AACLf,QAAAA,MAAM,EAAEY;AADH,OAAP;;AAGF,SAAKhB,aAAL;AACE,aAAO;AACLI,QAAAA,MAAM,EAAEU,MAAM,CAACI,OAAP,CAAeE;AADlB,OAAP;;AAGF,SAAKnB,yBAAL;AACE,+BACKY,KADL;AAEEH,QAAAA,IAAI,EAAEI,MAAM,CAACI,OAAP,CAAeR;AAFvB;;AAIF,SAAKR,yBAAL;AACE,+BACKW,KADL;AAEEF,QAAAA,KAAK,EAAEG,MAAM,CAACI,OAAP,CAAeP;AAFxB;;AAIF;AACE,aAAOE,KAAP;AArBJ;AAuBD","sourcesContent":["import { ADD_NEW_EVENT, UPDATE_EVENTS, GET_GOOGLE_EVENTS_SUCCESS, GET_GOOGLE_EVENTS_FAILURE } from './actions';\n\nconst initialState = {\n  events: [\n    {\n      allDay: false,\n      end: new Date('December 12, 2018 02:13:00'),\n      start: new Date('December 12, 2018 01:13:00'),\n      title: 'New Event',\n\n    }\n  ],\n  data: [],\n  error: ''\n}\n\n\nexport default function eventsReducer(state = initialState, action) {\n  switch(action.type) {\n    case ADD_NEW_EVENT:\n      const newEventsList = state.events.concat(action.payload.newEvent);\n      return {\n        events: newEventsList\n      }\n    case UPDATE_EVENTS:\n      return {\n        events: action.payload.updatedEvents\n      }\n    case GET_GOOGLE_EVENTS_SUCCESS:\n      return {\n        ...state,\n        data: action.payload.data\n      }\n    case GET_GOOGLE_EVENTS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.error\n      }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}