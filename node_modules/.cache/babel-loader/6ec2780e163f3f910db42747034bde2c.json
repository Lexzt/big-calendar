{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { RETRIEVE_STORED_EVENTS, duplicateAction } from '../../actions/db/events';\nimport getDb from '../../db';\n\nfunction retrieveEvents() {\n  return _retrieveEvents.apply(this, arguments);\n}\n\nfunction _retrieveEvents() {\n  _retrieveEvents = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var db, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getDb();\n\n          case 2:\n            db = _context.sent;\n            data = [];\n            _context.next = 6;\n            return db.events.find().exec().then(function (events) {\n              data = events.map(function (singleEvent) {\n                return {\n                  'id': md5(singleEvent.id),\n                  'end': singleEvent.end,\n                  'start': singleEvent.start,\n                  'summary': singleEvent.summary,\n                  'organizer': singleEvent.organizer,\n                  'recurrence': singleEvent.recurrence,\n                  'iCalUID': singleEvent.iCalUID,\n                  'attendees': singleEvent.attendees\n                };\n              });\n            });\n\n          case 6:\n            return _context.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _retrieveEvents.apply(this, arguments);\n}\n\nexport var retrieveEventsEpic = function retrieveEventsEpic(action$) {\n  return action$.pipe(ofType(RETRIEVE_STORED_EVENTS), map(function () {\n    from(getDb()).pipe(map(function (db) {\n      retrieveEvents().then(function (resp) {\n        return updateStoredEvents(resp);\n      });\n    }));\n  }));\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/db/events.js"],"names":["map","ofType","from","RETRIEVE_STORED_EVENTS","duplicateAction","getDb","retrieveEvents","db","data","events","find","exec","then","singleEvent","md5","id","end","start","summary","organizer","recurrence","iCalUID","attendees","retrieveEventsEpic","action$","pipe","resp","updateStoredEvents"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SACEC,sBADF,EAEEC,eAFF,QAGO,yBAHP;AAIA,OAAOC,KAAP,MAAkB,UAAlB;;SAEeC,c;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmBD,KAAK,EADxB;;AAAA;AACQE,YAAAA,EADR;AAEMC,YAAAA,IAFN,GAEa,EAFb;AAAA;AAAA,mBAGQD,EAAE,CAACE,MAAH,CAAUC,IAAV,GAAiBC,IAAjB,GAAwBC,IAAxB,CAA6B,UAAAH,MAAM,EAAI;AACzCD,cAAAA,IAAI,GAAGC,MAAM,CAACT,GAAP,CAAW,UAAAa,WAAW,EAAI;AAC/B,uBAAO;AACL,wBAAOC,GAAG,CAACD,WAAW,CAACE,EAAb,CADL;AAEL,yBAAQF,WAAW,CAACG,GAFf;AAGL,2BAASH,WAAW,CAACI,KAHhB;AAIL,6BAAWJ,WAAW,CAACK,OAJlB;AAKL,+BAAaL,WAAW,CAACM,SALpB;AAML,gCAAcN,WAAW,CAACO,UANrB;AAOL,6BAAWP,WAAW,CAACQ,OAPlB;AAQL,+BAAaR,WAAW,CAACS;AARpB,iBAAP;AAUD,eAXM,CAAP;AAYH,aAbK,CAHR;;AAAA;AAAA,6CAiBSd,IAjBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAoBA,OAAO,IAAMe,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC3CxB,MAAM,CAACE,sBAAD,CADqC,EAE3CH,GAAG,CAAC,YAAM;AACRE,IAAAA,IAAI,CAACG,KAAK,EAAN,CAAJ,CAAcoB,IAAd,CACEzB,GAAG,CAAC,UAAAO,EAAE,EAAI;AACRD,MAAAA,cAAc,GAAGM,IAAjB,CAAsB,UAACc,IAAD;AAAA,eAAUC,kBAAkB,CAACD,IAAD,CAA5B;AAAA,OAAtB;AACD,KAFE,CADL;AAKD,GANE,CAFwC,CAAJ;AAAA,CAAlC","sourcesContent":["import { map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport {\n  RETRIEVE_STORED_EVENTS,\n  duplicateAction\n} from '../../actions/db/events';\nimport getDb from '../../db';\n\nasync function retrieveEvents() {\n  const db = await getDb();\n  let data = [];\n  await db.events.find().exec().then(events => {\n      data = events.map(singleEvent => {\n        return {\n          'id' : md5(singleEvent.id),\n          'end' : singleEvent.end,\n          'start': singleEvent.start,\n          'summary': singleEvent.summary,\n          'organizer': singleEvent.organizer,\n          'recurrence': singleEvent.recurrence,\n          'iCalUID': singleEvent.iCalUID,\n          'attendees': singleEvent.attendees\n        }\n      });\n  });\n  return data;\n}\n\nexport const retrieveEventsEpic = action$ => action$.pipe(\n  ofType(RETRIEVE_STORED_EVENTS),\n  map(() => {\n    from(getDb()).pipe(\n      map(db => {\n        retrieveEvents().then((resp) => updateStoredEvents(resp));\n      })\n    )\n  }),\n)\n"]},"metadata":{},"sourceType":"module"}