{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport { RETRIEVE_STORED_EVENTS, duplicateAction, updateStoredEvents } from '../../actions/db/events';\nimport getDb from '../../db';\n/*function retrieveEvents(db) {\n  let data = [];\n  await db.events.find().exec().then(events => {\n      data = events.map(singleEvent => {\n        return {\n          'id' : md5(singleEvent.id),\n          'end' : singleEvent.end,\n          'start': singleEvent.start,\n          'summary': singleEvent.summary,\n          'organizer': singleEvent.organizer,\n          'recurrence': singleEvent.recurrence,\n          'iCalUID': singleEvent.iCalUID,\n          'attendees': singleEvent.attendees\n        }\n      });\n  });\n  debugger\n  return data;\n}*/\n\nexport var retrieveEventsEpic = function retrieveEventsEpic(action$) {\n  return action$.pipe(ofType(RETRIEVE_STORED_EVENTS), map(function () {\n    return from(getDb());\n  }), map(function (db) {\n    return db.subscribe(function (db) {\n      return from(db.events.find().exec());\n    });\n  }), map(function (data) {\n    return data.subscribe(function (events) {\n      events.map(function (singleEvent) {\n        return {\n          'id': md5(singleEvent.id),\n          'end': singleEvent.end,\n          'start': singleEvent.start,\n          'summary': singleEvent.summary,\n          'organizer': singleEvent.organizer,\n          'recurrence': singleEvent.recurrence,\n          'iCalUID': singleEvent.iCalUID,\n          'attendees': singleEvent.attendees\n        };\n      });\n    });\n  }), map(function (events) {\n    debugger;\n    return duplicateAction();\n  }));\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/db/events.js"],"names":["map","ofType","from","md5","RETRIEVE_STORED_EVENTS","duplicateAction","updateStoredEvents","getDb","retrieveEventsEpic","action$","pipe","db","subscribe","events","find","exec","data","singleEvent","id","end","start","summary","organizer","recurrence","iCalUID","attendees"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,SACEC,sBADF,EAEEC,eAFF,EAGEC,kBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAkB,UAAlB;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC3CT,MAAM,CAACG,sBAAD,CADqC,EAE3CJ,GAAG,CAAC;AAAA,WAAME,IAAI,CAACK,KAAK,EAAN,CAAV;AAAA,GAAD,CAFwC,EAG3CP,GAAG,CAAC,UAAAW,EAAE;AAAA,WAAIA,EAAE,CAACC,SAAH,CAAa,UAAAD,EAAE;AAAA,aAAIT,IAAI,CAACS,EAAE,CAACE,MAAH,CAAUC,IAAV,GAAiBC,IAAjB,EAAD,CAAR;AAAA,KAAf,CAAJ;AAAA,GAAH,CAHwC,EAI3Cf,GAAG,CAAC,UAACgB,IAAD;AAAA,WAAUA,IAAI,CAACJ,SAAL,CAAe,UAACC,MAAD,EAAY;AACvCA,MAAAA,MAAM,CAACb,GAAP,CAAW,UAAAiB,WAAW,EAAI;AACxB,eAAO;AACL,gBAAOd,GAAG,CAACc,WAAW,CAACC,EAAb,CADL;AAEL,iBAAQD,WAAW,CAACE,GAFf;AAGL,mBAASF,WAAW,CAACG,KAHhB;AAIL,qBAAWH,WAAW,CAACI,OAJlB;AAKL,uBAAaJ,WAAW,CAACK,SALpB;AAML,wBAAcL,WAAW,CAACM,UANrB;AAOL,qBAAWN,WAAW,CAACO,OAPlB;AAQL,uBAAaP,WAAW,CAACQ;AARpB,SAAP;AAUD,OAXD;AAYD,KAba,CAAV;AAAA,GAAD,CAJwC,EAkB3CzB,GAAG,CAAC,UAACa,MAAD,EAAY;AACd;AACA,WAAOR,eAAe,EAAtB;AACD,GAHE,CAlBwC,CAAJ;AAAA,CAAlC","sourcesContent":["import { map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport {\n  RETRIEVE_STORED_EVENTS,\n  duplicateAction,\n  updateStoredEvents\n} from '../../actions/db/events';\nimport getDb from '../../db';\n\n/*function retrieveEvents(db) {\n  let data = [];\n  await db.events.find().exec().then(events => {\n      data = events.map(singleEvent => {\n        return {\n          'id' : md5(singleEvent.id),\n          'end' : singleEvent.end,\n          'start': singleEvent.start,\n          'summary': singleEvent.summary,\n          'organizer': singleEvent.organizer,\n          'recurrence': singleEvent.recurrence,\n          'iCalUID': singleEvent.iCalUID,\n          'attendees': singleEvent.attendees\n        }\n      });\n  });\n  debugger\n  return data;\n}*/\n\nexport const retrieveEventsEpic = action$ => action$.pipe(\n  ofType(RETRIEVE_STORED_EVENTS),\n  map(() => from(getDb())),\n  map(db => db.subscribe(db => from(db.events.find().exec()))),\n  map((data) => data.subscribe((events) => {\n    events.map(singleEvent => {\n      return {\n        'id' : md5(singleEvent.id),\n        'end' : singleEvent.end,\n        'start': singleEvent.start,\n        'summary': singleEvent.summary,\n        'organizer': singleEvent.organizer,\n        'recurrence': singleEvent.recurrence,\n        'iCalUID': singleEvent.iCalUID,\n        'attendees': singleEvent.attendees\n      }\n    })\n  })),\n  map((events) => {\n    debugger;\n    return duplicateAction();\n  })\n)\n"]},"metadata":{},"sourceType":"module"}