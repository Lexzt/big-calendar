{"ast":null,"code":"import _toConsumableArray from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { UPDATE_STORED_EVENTS } from '../actions/events';\nimport { SUCCESS_STORED_EVENTS } from '../actions/db/events';\nvar initialState = {\n  calEvents: []\n};\n\nvar mergeEvents = function mergeEvents(oldEvents, newData, newIds) {\n  var newEvents = newData.normalData.entities.events;\n\n  var newPayload = _toConsumableArray(oldEvents);\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = newIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      if (!oldEvents.hasOwnProperty(key)) {\n        newPayload[key] = newEvents[key];\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var updatedEventsList = [].concat(_toConsumableArray(oldEvents), [newPayload]);\n  return updatedEventsList;\n};\n\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, {\n        calEvents: action.payload\n      });\n\n    case SUCCESS_STORED_EVENTS:\n      {\n        var newEvents = mergeEvents(state.calEvents, action.payload, newEventsIds);\n        return Object.assign({}, state, {\n          calEvents: newEvents,\n          calEventIds: newEventsIds\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sham/big-calendar/src/newReducers/events.js"],"names":["UPDATE_STORED_EVENTS","SUCCESS_STORED_EVENTS","initialState","calEvents","mergeEvents","oldEvents","newData","newIds","newEvents","normalData","entities","events","newPayload","key","hasOwnProperty","updatedEventsList","eventsReducer","state","action","type","Object","assign","payload","newEventsIds","calEventIds"],"mappings":";AAAA,SACEA,oBADF,QAEO,mBAFP;AAGA,SACEC,qBADF,QAEO,sBAFP;AAIA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAArB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,MAArB,EAAgC;AAClD,MAAIC,SAAS,GAAGF,OAAO,CAACG,UAAR,CAAmBC,QAAnB,CAA4BC,MAA5C;;AACA,MAAIC,UAAU,sBAAOP,SAAP,CAAd;;AAFkD;AAAA;AAAA;;AAAA;AAGlD,yBAAeE,MAAf,8HAAuB;AAAA,UAAfM,GAAe;;AACrB,UAAG,CAACR,SAAS,CAACS,cAAV,CAAyBD,GAAzB,CAAJ,EAAmC;AACjCD,QAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBL,SAAS,CAACK,GAAD,CAA3B;AACD;AACF;AAPiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQlD,MAAIE,iBAAiB,gCAAOV,SAAP,IAAkBO,UAAlB,EAArB;AACA,SAAOG,iBAAP;AACD,CAVD;;AAYA,eAAe,SAASC,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBf,YAAsB;AAAA,MAARgB,MAAQ;;AAClE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKnB,oBAAL;AACE,aAAOoB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEd,QAAAA,SAAS,EAAEe,MAAM,CAACI;AAApB,OAAzB,CAAP;;AACF,SAAKrB,qBAAL;AAA4B;AAC1B,YAAIO,SAAS,GAAGJ,WAAW,CAACa,KAAK,CAACd,SAAP,EAAkBe,MAAM,CAACI,OAAzB,EAAkCC,YAAlC,CAA3B;AACA,eAAOH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEd,UAAAA,SAAS,EAAEK,SAAb;AAAwBgB,UAAAA,WAAW,EAAED;AAArC,SAAzB,CAAP;AACD;;AACD;AACE,aAAON,KAAP;AARJ;AAUD","sourcesContent":["import {\n  UPDATE_STORED_EVENTS\n} from '../actions/events';\nimport {\n  SUCCESS_STORED_EVENTS\n} from '../actions/db/events';\n\nconst initialState = {\n  calEvents: [],\n}\n\nconst mergeEvents = (oldEvents, newData, newIds) => {\n  let newEvents = newData.normalData.entities.events;\n  let newPayload = [...oldEvents];\n  for(let key of newIds) {\n    if(!oldEvents.hasOwnProperty(key)) {\n      newPayload[key] = newEvents[key];\n    }\n  }\n  let updatedEventsList = [...oldEvents, newPayload]\n  return updatedEventsList\n}\n\nexport default function eventsReducer(state = initialState, action) {\n  switch(action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, { calEvents: action.payload });\n    case SUCCESS_STORED_EVENTS: {\n      let newEvents = mergeEvents(state.calEvents, action.payload, newEventsIds)\n      return Object.assign({}, state, { calEvents: newEvents, calEventIds: newEventsIds })\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}