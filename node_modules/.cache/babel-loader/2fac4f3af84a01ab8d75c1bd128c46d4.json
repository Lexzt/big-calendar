{"ast":null,"code":"import _readOnlyError from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nimport { createLogger } from 'redux-logger';\nimport request from 'superagent';\nexport var loggerMiddleware = createLogger();\nvar CALENDAR_ID = 'shamsheer619@gmail.com';\nvar CLIENT_ID = '65724758895-gc7lubjkjsqqddfhlb7jcme80i3mjqn0.apps.googleusercontent.com';\nvar API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nvar SCOPE = \"https://www.googleapis.com/auth/calendar.events\";\nvar GoogleAuth;\nvar isAuthorized;\nexport function handleClientLoad() {\n  // Load the API's client and auth2 modules.\n  // Call the initClient function after the modules load.\n  gapi.load('client:auth2', initClient);\n}\n\nfunction initClient() {\n  window.gapi.client.init({\n    'apiKey': API_KEY,\n    'clientId': CLIENT_ID,\n    'scope': SCOPE,\n    'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n  }).then(function () {\n    GoogleAuth = window.gapi.auth2.getAuthInstance(); // Listen for sign-in state changes.\n\n    GoogleAuth.isSignedIn.listen(updateSigninStatus); // Handle initial sign-in state. (Determine if user is already signed in)\n\n    var user = GoogleAuth.currentUser.get();\n    handleAuthClick();\n    gapi.client.request;\n  });\n}\n\nfunction handleAuthClick() {\n  if (GoogleAuth.isSignedIn.get()) {\n    // User is authorized and has clicked 'Sign out' button.\n    GoogleAuth.signOut();\n  } else {\n    // User is not signed in. Start Google auth flow.\n    GoogleAuth.signIn();\n  }\n}\n\nfunction updateSigninStatus(isSignedIn) {\n  setSigninStatus();\n}\n\nfunction setSigninStatus(isSignedIn) {\n  var user = GoogleAuth.currentUser.get();\n  var isAuthorized = user.hasGrantedScopes(SCOPE);\n\n  if (isAuthorized) {} else {}\n}\n\nfunction sendAuthorizedApiRequest(requestDetails) {\n  var currentApiRequest = requestDetails;\n\n  if (isAuthorized) {\n    // Make API request\n    window.gapi.client.request(requestDetails); // Reset currentApiRequest variable.\n\n    currentApiRequest = (_readOnlyError(\"currentApiRequest\"), {});\n  } else {\n    GoogleAuth.signIn();\n  }\n}\n\nexport var apiMiddleware = function apiMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'GET_EVENTS') {\n        initClient();\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/redux/middleware.js"],"names":["createLogger","request","loggerMiddleware","CALENDAR_ID","CLIENT_ID","API_KEY","SCOPE","GoogleAuth","isAuthorized","handleClientLoad","gapi","load","initClient","window","client","init","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","user","currentUser","get","handleAuthClick","signOut","signIn","setSigninStatus","hasGrantedScopes","sendAuthorizedApiRequest","requestDetails","currentApiRequest","apiMiddleware","store","next","action","type"],"mappings":";AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,OAAOC,OAAP,MAAqB,YAArB;AACA,OAAO,IAAMC,gBAAgB,GAAGF,YAAY,EAArC;AAEP,IAAMG,WAAW,GAAG,wBAApB;AACA,IAAMC,SAAS,GAAG,yEAAlB;AACA,IAAMC,OAAO,GAAG,yCAAhB;AACA,IAAMC,KAAK,oDAAX;AACA,IAAIC,UAAJ;AACA,IAAIC,YAAJ;AAEA,OAAO,SAASC,gBAAT,GAA4B;AACjC;AACA;AACAC,EAAAA,IAAI,CAACC,IAAL,CAAU,cAAV,EAA0BC,UAA1B;AACD;;AAED,SAASA,UAAT,GAAsB;AACpBC,EAAAA,MAAM,CAACH,IAAP,CAAYI,MAAZ,CAAmBC,IAAnB,CAAwB;AACpB,cAAUV,OADU;AAEpB,gBAAYD,SAFQ;AAGpB,aAASE,KAHW;AAIpB,qBAAiB,CAAC,4DAAD;AAJG,GAAxB,EAKGU,IALH,CAKQ,YAAY;AAChBT,IAAAA,UAAU,GAAGM,MAAM,CAACH,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAb,CADgB,CAGhB;;AACAX,IAAAA,UAAU,CAACY,UAAX,CAAsBC,MAAtB,CAA6BC,kBAA7B,EAJgB,CAOhB;;AACA,QAAIC,IAAI,GAAGf,UAAU,CAACgB,WAAX,CAAuBC,GAAvB,EAAX;AAEAC,IAAAA,eAAe;AACff,IAAAA,IAAI,CAACI,MAAL,CAAYb,OAAZ;AAEH,GAlBD;AAmBD;;AAED,SAASwB,eAAT,GAA2B;AACzB,MAAIlB,UAAU,CAACY,UAAX,CAAsBK,GAAtB,EAAJ,EAAiC;AAC7B;AACAjB,IAAAA,UAAU,CAACmB,OAAX;AACH,GAHD,MAGO;AACH;AACAnB,IAAAA,UAAU,CAACoB,MAAX;AACD;AACJ;;AAED,SAASN,kBAAT,CAA4BF,UAA5B,EAAwC;AACtCS,EAAAA,eAAe;AAChB;;AAED,SAASA,eAAT,CAAyBT,UAAzB,EAAqC;AAClC,MAAIG,IAAI,GAAGf,UAAU,CAACgB,WAAX,CAAuBC,GAAvB,EAAX;AACA,MAAIhB,YAAY,GAAGc,IAAI,CAACO,gBAAL,CAAsBvB,KAAtB,CAAnB;;AACA,MAAIE,YAAJ,EAAkB,CACjB,CADD,MACO,CACN;AACF;;AAGF,SAASsB,wBAAT,CAAkCC,cAAlC,EAAkD;AAChD,MAAMC,iBAAiB,GAAGD,cAA1B;;AACA,MAAIvB,YAAJ,EAAkB;AAChB;AACAK,IAAAA,MAAM,CAACH,IAAP,CAAYI,MAAZ,CAAmBb,OAAnB,CAA2B8B,cAA3B,EAFgB,CAIhB;;AACAC,IAAAA,iBAAiB,yCAAG,EAAH,CAAjB;AACD,GAND,MAMO;AACLzB,IAAAA,UAAU,CAACoB,MAAX;AACD;AACF;;AAED,OAAO,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtD,UAAGA,MAAM,CAACC,IAAP,KAAgB,YAAnB,EAAiC;AAC/BzB,QAAAA,UAAU;AACX;;AACD,aAAOuB,IAAI,CAACC,MAAD,CAAX;AACD,KALyC;AAAA,GAAR;AAAA,CAA3B","sourcesContent":["import { createLogger } from 'redux-logger';\nimport request from  'superagent';\nexport const loggerMiddleware = createLogger();\n\nconst CALENDAR_ID = 'shamsheer619@gmail.com';\nconst CLIENT_ID = '65724758895-gc7lubjkjsqqddfhlb7jcme80i3mjqn0.apps.googleusercontent.com';\nconst API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nconst SCOPE = `https://www.googleapis.com/auth/calendar.events`;\nlet GoogleAuth;\nlet isAuthorized;\n\nexport function handleClientLoad() {\n  // Load the API's client and auth2 modules.\n  // Call the initClient function after the modules load.\n  gapi.load('client:auth2', initClient);\n}\n\nfunction initClient() {\n  window.gapi.client.init({\n      'apiKey': API_KEY,\n      'clientId': CLIENT_ID,\n      'scope': SCOPE,\n      'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n  }).then(function () {\n      GoogleAuth = window.gapi.auth2.getAuthInstance();\n\n      // Listen for sign-in state changes.\n      GoogleAuth.isSignedIn.listen(updateSigninStatus);\n\n\n      // Handle initial sign-in state. (Determine if user is already signed in)\n      let user = GoogleAuth.currentUser.get();\n\n      handleAuthClick();\n      gapi.client.request\n\n  });\n}\n\nfunction handleAuthClick() {\n  if (GoogleAuth.isSignedIn.get()) {\n      // User is authorized and has clicked 'Sign out' button.\n      GoogleAuth.signOut();\n  } else {\n      // User is not signed in. Start Google auth flow.\n      GoogleAuth.signIn();\n    }\n}\n\nfunction updateSigninStatus(isSignedIn) {\n  setSigninStatus();\n}\n\nfunction setSigninStatus(isSignedIn) {\n   var user = GoogleAuth.currentUser.get();\n   var isAuthorized = user.hasGrantedScopes(SCOPE);\n   if (isAuthorized) {\n   } else {\n   }\n }\n\n\nfunction sendAuthorizedApiRequest(requestDetails) {\n  const currentApiRequest = requestDetails;\n  if (isAuthorized) {\n    // Make API request\n    window.gapi.client.request(requestDetails)\n\n    // Reset currentApiRequest variable.\n    currentApiRequest = {};\n  } else {\n    GoogleAuth.signIn();\n  }\n}\n\nexport const apiMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS') {\n    initClient();\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}