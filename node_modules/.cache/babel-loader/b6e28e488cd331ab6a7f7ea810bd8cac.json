{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { API_KEY, GOOGLE_CLIENT_ID, GOOGLE_SCOPE } from '../utils/google';\nimport { BEGIN_GOOGLE_AUTH, successGoogleAuth, failGoogleAuth } from '../actions/auth';\nvar GoogleAuth;\n\nvar handleAuthClick = function handleAuthClick() {\n  if (GoogleAuth.isSignedIn.get()) {\n    console.log(\"Signed In to Google!\");\n  } else {\n    GoogleAuth.signIn();\n  }\n};\n\nvar loginGoogle = function loginGoogle() {\n  return window.gapi.load('client:auth2', initClient);\n};\n\nvar initClient =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            window.gapi.client.init({\n              'apiKey': API_KEY,\n              'clientId': GOOGLE_CLIENT_ID,\n              'scope': GOOGLE_SCOPE,\n              'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n            }).then(function () {\n              GoogleAuth = window.gapi.auth2.getAuthInstance();\n              handleAuthClick();\n              var isAuthorized = GoogleAuth.currentUser.get().hasGrantedScopes(GOOGLE_SCOPE);\n              return isAuthorized;\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function initClient() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var beginGoogleAuthEpic = function beginGoogleAuthEpic(action$) {\n  return action$.pipe(ofType(BEGIN_GOOGLE_AUTH), mergeMap(function () {\n    map(function () {\n      window.gapi.load('client:auth2', initClient);\n    });\n  }));\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/auth.js"],"names":["map","mergeMap","catchError","ofType","from","API_KEY","GOOGLE_CLIENT_ID","GOOGLE_SCOPE","BEGIN_GOOGLE_AUTH","successGoogleAuth","failGoogleAuth","GoogleAuth","handleAuthClick","isSignedIn","get","console","log","signIn","loginGoogle","window","gapi","load","initClient","client","init","then","auth2","getAuthInstance","isAuthorized","currentUser","hasGrantedScopes","beginGoogleAuthEpic","action$","pipe"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,UAAxB,QAA0C,gBAA1C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,OAAT,EAAkBC,gBAAlB,EAAoCC,YAApC,QAAwD,iBAAxD;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,cAHF,QAIO,iBAJP;AAMA,IAAIC,UAAJ;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAGD,UAAU,CAACE,UAAX,CAAsBC,GAAtB,EAAH,EAAgC;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,GAFD,MAGK;AACHL,IAAAA,UAAU,CAACM,MAAX;AACD;AACF,CAPD;;AASA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,SAAOC,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiCC,UAAjC,CAAP;AACD,CAFD;;AAIA,IAAMA,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AACjBH,YAAAA,MAAM,CAACC,IAAP,CAAYG,MAAZ,CAAmBC,IAAnB,CAAwB;AACpB,wBAAUnB,OADU;AAEpB,0BAAYC,gBAFQ;AAGpB,uBAASC,YAHW;AAIpB,+BAAiB,CAAC,4DAAD;AAJG,aAAxB,EAKGkB,IALH,CAKQ,YAAM;AACVd,cAAAA,UAAU,GAAGQ,MAAM,CAACC,IAAP,CAAYM,KAAZ,CAAkBC,eAAlB,EAAb;AACAf,cAAAA,eAAe;AACf,kBAAMgB,YAAY,GAAGjB,UAAU,CACdkB,WADI,CAEJf,GAFI,GAGJgB,gBAHI,CAGavB,YAHb,CAArB;AAIA,qBAAOqB,YAAP;AACH,aAbD;;AADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVN,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAiBA,OAAO,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC5C9B,MAAM,CAACK,iBAAD,CADsC,EAE5CP,QAAQ,CAAC,YAAM;AACbD,IAAAA,GAAG,CAAC,YAAM;AACRmB,MAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiCC,UAAjC;AACD,KAFE,CAAH;AAGD,GAJO,CAFoC,CAAJ;AAAA,CAAnC","sourcesContent":["import { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { API_KEY, GOOGLE_CLIENT_ID, GOOGLE_SCOPE } from '../utils/google';\nimport {\n  BEGIN_GOOGLE_AUTH,\n  successGoogleAuth,\n  failGoogleAuth\n} from '../actions/auth';\n\nlet GoogleAuth;\n\nconst handleAuthClick = () => {\n  if(GoogleAuth.isSignedIn.get()) {\n    console.log(\"Signed In to Google!\");\n  }\n  else {\n    GoogleAuth.signIn();\n  }\n}\n\nconst loginGoogle = () => {\n  return window.gapi.load('client:auth2', initClient);\n}\n\nconst initClient = async () => {\n  window.gapi.client.init({\n      'apiKey': API_KEY,\n      'clientId': GOOGLE_CLIENT_ID,\n      'scope': GOOGLE_SCOPE,\n      'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'],\n  }).then(() => {\n      GoogleAuth = window.gapi.auth2.getAuthInstance();\n      handleAuthClick();\n      const isAuthorized = GoogleAuth\n                      .currentUser\n                      .get()\n                      .hasGrantedScopes(GOOGLE_SCOPE);\n      return isAuthorized;\n  })\n}\n\nexport const beginGoogleAuthEpic = action$ => action$.pipe(\n  ofType(BEGIN_GOOGLE_AUTH),\n  mergeMap(() => {\n    map(() => {\n      window.gapi.load('client:auth2', initClient);\n    })\n  })\n)\n"]},"metadata":{},"sourceType":"module"}