{"ast":null,"code":"import { createLogger } from 'redux-logger';\nexport var loggerMiddleware = createLogger();\n\nvar MicrosoftGraph = require(\"@microsoft/microsoft-graph-client\");\n\nfunction outlookCalendarEvents() {\n  return MicrosoftGraph.Client.init({\n    authProvider: function authProvider(done) {\n      done(null, window.localStorage.getItem('at'));\n    }\n  }).api('/me/events').top(10).select('subject,start,end,createdDatetime').orderby('createdDatetime DESC').get(function (err, res) {\n    if (err) {\n      return err;\n    } else {\n      return res.value;\n    }\n  });\n}\n\nexport var apiMiddleware = function apiMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'GET_GOOGLE_EVENTS') {\n        window.gapi.client.request({\n          'path': \"https://www.googleapis.com/calendar/v3/calendars/primary/events\"\n        }).then(function (resp) {\n          debugger;\n          var events = resp.result.items;\n          next({\n            type: action.type + '_SUCCESS',\n            payload: {\n              data: events\n            }\n          });\n        }, function (reason) {\n          next({\n            type: action.type + '_FAILURE',\n            payload: {\n              data: reason\n            }\n          });\n        });\n      }\n\n      if (action.type === 'GET_OUTLOOK_EVENTS') {\n        var value = outlookCalendarEvents();\n        next({\n          type: action.type + '_SUCCESS',\n          payload: {\n            data: value\n          }\n        });\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/redux/middleware.js"],"names":["createLogger","loggerMiddleware","MicrosoftGraph","require","outlookCalendarEvents","Client","init","authProvider","done","window","localStorage","getItem","api","top","select","orderby","get","err","res","value","apiMiddleware","store","next","action","type","gapi","client","request","then","resp","events","result","items","payload","data","reason"],"mappings":"AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,OAAO,IAAMC,gBAAgB,GAAGD,YAAY,EAArC;;AAEP,IAAME,cAAc,GAAGC,OAAO,CAAC,mCAAD,CAA9B;;AAEA,SAASC,qBAAT,GAAiC;AAC/B,SAAOF,cAAc,CAACG,MAAf,CAAsBC,IAAtB,CAA2B;AAChCC,IAAAA,YAAY,EAAE,sBAACC,IAAD,EAAU;AACtBA,MAAAA,IAAI,CAAC,IAAD,EAAOC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,IAA5B,CAAP,CAAJ;AACD;AAH+B,GAA3B,EAIJC,GAJI,CAIA,YAJA,EAKJC,GALI,CAKA,EALA,EAMJC,MANI,CAMG,mCANH,EAOJC,OAPI,CAOI,sBAPJ,EAQJC,GARI,CAQA,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,QAAID,GAAJ,EAAS;AACP,aAAOA,GAAP;AACD,KAFD,MAEO;AACL,aAAOC,GAAG,CAACC,KAAX;AACD;AACF,GAdI,CAAP;AAeD;;AAGD,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtD,UAAGA,MAAM,CAACC,IAAP,KAAgB,mBAAnB,EAAwC;AACtCf,QAAAA,MAAM,CAACgB,IAAP,CAAYC,MAAZ,CAAmBC,OAAnB,CAA2B;AACtB;AADsB,SAA3B,EAEMC,IAFN,CAEW,UAAAC,IAAI,EAAI;AACd;AACF,cAAIC,MAAM,GAAGD,IAAI,CAACE,MAAL,CAAYC,KAAzB;AACAV,UAAAA,IAAI,CAAC;AACHE,YAAAA,IAAI,EAAED,MAAM,CAACC,IAAP,GAAc,UADjB;AAEHS,YAAAA,OAAO,EAAE;AACPC,cAAAA,IAAI,EAAEJ;AADC;AAFN,WAAD,CAAJ;AAMD,SAXF,EAWI,UAACK,MAAD,EAAY;AACbb,UAAAA,IAAI,CAAC;AACHE,YAAAA,IAAI,EAAED,MAAM,CAACC,IAAP,GAAc,UADjB;AAEHS,YAAAA,OAAO,EAAE;AACPC,cAAAA,IAAI,EAAEC;AADC;AAFN,WAAD,CAAJ;AAMD,SAlBF;AAmBD;;AACD,UAAGZ,MAAM,CAACC,IAAP,KAAgB,oBAAnB,EAAyC;AACvC,YAAML,KAAK,GAAGf,qBAAqB,EAAnC;AACAkB,QAAAA,IAAI,CAAC;AACHE,UAAAA,IAAI,EAAED,MAAM,CAACC,IAAP,GAAc,UADjB;AAEHS,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAEf;AADC;AAFN,SAAD,CAAJ;AAMD;;AACD,aAAOG,IAAI,CAACC,MAAD,CAAX;AACD,KAhCyC;AAAA,GAAR;AAAA,CAA3B","sourcesContent":["import { createLogger } from 'redux-logger';\nexport const loggerMiddleware = createLogger();\n\nconst MicrosoftGraph = require(\"@microsoft/microsoft-graph-client\");\n\nfunction outlookCalendarEvents() {\n  return MicrosoftGraph.Client.init({\n    authProvider: (done) => {\n      done(null, window.localStorage.getItem('at'))\n    }\n  }).api('/me/events')\n    .top(10)\n    .select('subject,start,end,createdDatetime')\n    .orderby('createdDatetime DESC')\n    .get((err, res) => {\n      if (err) {\n        return err;\n      } else {\n        return res.value;\n      }\n    });\n}\n\n\nexport const apiMiddleware = store => next => action => {\n  if(action.type === 'GET_GOOGLE_EVENTS') {\n    window.gapi.client.request({\n         'path': `https://www.googleapis.com/calendar/v3/calendars/primary/events`,\n       }).then(resp => {\n         debugger\n       let events = resp.result.items;\n       next({\n         type: action.type + '_SUCCESS',\n         payload: {\n           data: events\n         }\n       });\n     }, (reason) => {\n       next({\n         type: action.type + '_FAILURE',\n         payload: {\n           data: reason\n         }\n       });\n     });\n  }\n  if(action.type === 'GET_OUTLOOK_EVENTS') {\n    const value = outlookCalendarEvents();\n    next({\n      type: action.type + '_SUCCESS',\n      payload: {\n        data: value\n      }\n    })\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}