{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createLogger } from 'redux-logger';\nimport getDb from '../db';\nimport moment from 'moment';\nexport var loggerMiddleware = createLogger();\n\nvar MicrosoftGraph = require(\"@microsoft/microsoft-graph-client\");\n\nvar GOOGLE_CLIENT_ID = '65724758895-gc7lubjkjsqqddfhlb7jcme80i3mjqn0.apps.googleusercontent.com';\nvar API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nvar GOOGLE_SCOPE = \"https://www.googleapis.com/auth/calendar.events\";\nvar OUTLOOK_CLIENT_ID = '6b770a68-2156-4345-b0aa-d95419e31be1';\nvar BASE_URL = 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize?';\nvar GoogleAuth;\nvar items = [];\n\nfunction outlookCalendarEvents() {\n  return MicrosoftGraph.Client.init({\n    authProvider: function authProvider(done) {\n      done(null, window.localStorage.getItem('at'));\n    }\n  }).api('/me/events').top(10).select('subject,start,end,createdDatetime').orderby('createdDatetime DESC').get(function (err, res) {\n    if (err) {\n      return err;\n    } else {\n      return res.value;\n    }\n  });\n}\n\nfunction handleAuthClick(auth) {\n  if (auth.isSignedIn.get()) {\n    console.log(\"Signed In to Google!\");\n  } else {\n    auth.signIn();\n  }\n}\n\nexport var fetchEvents = function fetchEvents(request, items, resolve, reject) {\n  request.execute(function (resp) {\n    var newItems = items.concat(resp.result.items);\n    var pageToken = resp.nextPageToken;\n\n    if (pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary',\n        'showDeleted': false,\n        'singleEvents': true,\n        'orderBy': 'startTime',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      resolve(newItems);\n    }\n  }, function (error) {\n    console.log(error);\n    reject('Something went wrong, Please refresh and try again');\n  });\n};\nexport var apiMiddleware = function apiMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'BEGIN_GOOGLE_AUTH') {\n        window.gapi.load('client:auth2', {\n          callback: function callback() {\n            window.gapi.client.init({\n              'apiKey': API_KEY,\n              'clientId': GOOGLE_CLIENT_ID,\n              'scope': GOOGLE_SCOPE,\n              'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n            }).then(function () {\n              GoogleAuth = window.gapi.auth2.getAuthInstance(); //GoogleAuth.signIn();\n\n              handleAuthClick(GoogleAuth);\n              var user = GoogleAuth.currentUser.get();\n              var isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n\n              if (isAuthorized) {\n                next({\n                  type: 'SUCCESS_GOOGLE_AUTH',\n                  payload: {\n                    user: user\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n\n      if (action.type === 'BEGIN_GET_GOOGLE_EVENTS') {\n        window.gapi.client.load('calendar', 'v3', function () {\n          var request = window.gapi.client.calendar.events.list({\n            'calendarId': 'primary',\n            'showDeleted': false,\n            'singleEvents': true,\n            'orderBy': 'startTime'\n          });\n          var syncToken = localStorage.getItem('sync');\n\n          if (syncToken == null) {\n            console.log(\"Performing full sync\");\n          } else {\n            console.log(\"Performing incremental sync\");\n            var request = window.gapi.client.calendar.events.list({\n              'calendarId': 'primary',\n              'showDeleted': false,\n              'singleEvents': true,\n              'orderBy': 'startTime',\n              'syncToken': syncToken\n            });\n          }\n\n          var result = [];\n          new Promise(function (resolve, reject) {\n            fetchEvents(request, result, resolve, reject);\n          }).then(function (response) {\n            console.log(response);\n          });\n        });\n        /*window.gapi.client.request({\n             'path': `https://www.googleapis.com/calendar/v3/calendars/primary/events`,\n           }).then(resp => {\n           let nextPageToken = resp.result.nextPageToken;\n           let events = resp.result.items;\n           next({\n             type: 'NEXT_GET_GOOGLE_EVENTS',\n             payload: {\n               nextPageToken: nextPageToken\n             }\n           });\n         }, (reason) => {\n           next({\n             type: action.type + '_FAILURE',\n             payload: {\n               data: reason\n             }\n           });\n         });\n           do {\n           var request = window.gapi.client.calendar.events.list({\n             'calendarId' : 'primary',\n             'showDeleted': false,\n             'singleEvents': true,\n             'maxResults': 10,\n             'orderBy': 'startTime',\n             'pageToken': pageToken\n           });\n            try {\n             result = fetchEvents();\n           }\n           catch (error) {\n             if(error.getStatusCode() == 410) {\n               console.log('Invalid sync token, clearing event store and re-syncing');\n               localStorage.removeItem('sync');\n             }\n             else {\n               console.log(error);\n             }\n           }\n           pageToken = result.nextPageToken();\n           console.log(pageToken);\n         } while (pageToken != null);\n          */\n      }\n\n      if (action.type === 'NEXT_GET_GOOGLE_EVENTS') {}\n\n      if (action.type === 'LAST_GET_GOOGLE_EVENTS') {}\n\n      if (action.type === 'POST_GOOGLE_EVENT') {\n        var calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload.event\n        }; //deprecated function: take note\n\n        window.gapi.client.load('calendar', 'v3', function () {\n          var request = window.gapi.client.calendar.events.insert(calendarObject);\n          request.execute(function (resp) {\n            next({\n              type: action.type + '_SUCCESS',\n              payload: {\n                data: resp\n              }\n            });\n          });\n        });\n      }\n\n      if (action.type === 'GET_OUTLOOK_EVENTS') {\n        var value = outlookCalendarEvents();\n        next({\n          type: action.type + '_SUCCESS',\n          payload: {\n            data: value\n          }\n        });\n      }\n\n      return next(action);\n    };\n  };\n};\n\nvar saveEvents =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(events) {\n    var db, dbEvents;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getDb();\n\n          case 2:\n            db = _context.sent;\n            dbEvents = []; //need to preprocess data\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function saveEvents(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var dbMiddleware = function dbMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'GET_GOOGLE_EVENTS_SUCCESS') {\n        debugger;\n        saveEvents(action.payload);\n      }\n\n      if (action.type === 'POST_GOOGLE_EVENT_SUCCESS') {\n        saveEvents(action.payload);\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/redux/middleware.js"],"names":["createLogger","getDb","moment","loggerMiddleware","MicrosoftGraph","require","GOOGLE_CLIENT_ID","API_KEY","GOOGLE_SCOPE","OUTLOOK_CLIENT_ID","BASE_URL","GoogleAuth","items","outlookCalendarEvents","Client","init","authProvider","done","window","localStorage","getItem","api","top","select","orderby","get","err","res","value","handleAuthClick","auth","isSignedIn","console","log","signIn","fetchEvents","request","resolve","reject","execute","resp","newItems","concat","result","pageToken","nextPageToken","undefined","nextRequest","gapi","client","calendar","events","list","error","apiMiddleware","store","next","action","type","load","callback","then","auth2","getAuthInstance","user","currentUser","isAuthorized","hasGrantedScopes","payload","syncToken","Promise","response","calendarObject","event","insert","data","saveEvents","db","dbEvents","dbMiddleware"],"mappings":"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","sourcesContent":["import { createLogger } from 'redux-logger';\nimport getDb from '../db';\nimport moment from 'moment';\n\nexport const loggerMiddleware = createLogger();\n\n\nconst MicrosoftGraph = require(\"@microsoft/microsoft-graph-client\");\n\nconst GOOGLE_CLIENT_ID = '65724758895-gc7lubjkjsqqddfhlb7jcme80i3mjqn0.apps.googleusercontent.com';\nconst API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nconst GOOGLE_SCOPE = `https://www.googleapis.com/auth/calendar.events`;\nconst OUTLOOK_CLIENT_ID = '6b770a68-2156-4345-b0aa-d95419e31be1';\nconst BASE_URL = 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize?';\nlet GoogleAuth;\nlet items = [];\n\nfunction outlookCalendarEvents() {\n  return MicrosoftGraph.Client.init({\n    authProvider: (done) => {\n      done(null, window.localStorage.getItem('at'))\n    }\n  }).api('/me/events')\n    .top(10)\n    .select('subject,start,end,createdDatetime')\n    .orderby('createdDatetime DESC')\n    .get((err, res) => {\n      if (err) {\n        return err;\n      } else {\n        return res.value;\n      }\n    });\n}\n\nfunction handleAuthClick(auth) {\n  if(auth.isSignedIn.get()) {\n    console.log(\"Signed In to Google!\");\n  }\n  else {\n    auth.signIn();\n  }\n}\n\nexport const fetchEvents = (request, items, resolve, reject) => {\n    request.execute((resp) => {\n    const newItems = items.concat(resp.result.items);\n    var pageToken = resp.nextPageToken;\n    if(pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n        'showDeleted': false,\n        'singleEvents': true,\n        'orderBy': 'startTime',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      resolve(newItems);\n    }\n  }, (error) => {\n    console.log(error);\n    reject('Something went wrong, Please refresh and try again');\n  });\n}\n\nexport const apiMiddleware = store => next => action => {\n  if(action.type === 'BEGIN_GOOGLE_AUTH') {\n    window.gapi.load('client:auth2', {\n      callback: () => {\n        window.gapi.client.init({\n            'apiKey': API_KEY,\n            'clientId': GOOGLE_CLIENT_ID,\n            'scope': GOOGLE_SCOPE,\n            'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'],\n        }).then(() => {\n            GoogleAuth = window.gapi.auth2.getAuthInstance();\n            //GoogleAuth.signIn();\n            handleAuthClick(GoogleAuth);\n            const user = GoogleAuth.currentUser.get();\n            const isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n            if(isAuthorized) {\n              next({\n                type: 'SUCCESS_GOOGLE_AUTH',\n                payload: {\n                  user\n                }\n              })\n            }\n        })\n      }\n    });\n  }\n\n  if(action.type === 'BEGIN_GET_GOOGLE_EVENTS') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n        'showDeleted': false,\n        'singleEvents': true,\n        'orderBy': 'startTime',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        var request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'showDeleted': false,\n          'singleEvents': true,\n          'orderBy': 'startTime',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(response => {\n        console.log(response);\n      })\n\n    })\n\n      /*window.gapi.client.request({\n           'path': `https://www.googleapis.com/calendar/v3/calendars/primary/events`,\n         }).then(resp => {\n         let nextPageToken = resp.result.nextPageToken;\n         let events = resp.result.items;\n         next({\n           type: 'NEXT_GET_GOOGLE_EVENTS',\n           payload: {\n             nextPageToken: nextPageToken\n           }\n         });\n       }, (reason) => {\n         next({\n           type: action.type + '_FAILURE',\n           payload: {\n             data: reason\n           }\n         });\n       });\n\n\n       do {\n         var request = window.gapi.client.calendar.events.list({\n           'calendarId' : 'primary',\n           'showDeleted': false,\n           'singleEvents': true,\n           'maxResults': 10,\n           'orderBy': 'startTime',\n           'pageToken': pageToken\n         });\n\n         try {\n           result = fetchEvents();\n         }\n         catch (error) {\n           if(error.getStatusCode() == 410) {\n             console.log('Invalid sync token, clearing event store and re-syncing');\n             localStorage.removeItem('sync');\n           }\n           else {\n             console.log(error);\n           }\n         }\n         pageToken = result.nextPageToken();\n         console.log(pageToken);\n       } while (pageToken != null);\n\n       */\n  }\n\n  if(action.type === 'NEXT_GET_GOOGLE_EVENTS') {\n\n  }\n\n  if(action.type === 'LAST_GET_GOOGLE_EVENTS') {\n\n  }\n\n  if(action.type === 'POST_GOOGLE_EVENT') {\n    var calendarObject =\n    {\n        'calendarId': 'primary',\n        'resource': action.payload.event\n    };\n\n    //deprecated function: take note\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.insert(calendarObject);\n      request.execute(function(resp) {\n          next({\n            type: action.type + '_SUCCESS',\n            payload: {\n              data: resp\n            }\n          })\n      });\n    })\n  }\n  if(action.type === 'GET_OUTLOOK_EVENTS') {\n    const value = outlookCalendarEvents();\n    next({\n      type: action.type + '_SUCCESS',\n      payload: {\n        data: value\n      }\n    })\n  }\n  return next(action);\n}\n\nconst saveEvents = async events => {\n  const db = await getDb();\n  const dbEvents = [];\n  //need to preprocess data\n}\n\n\nexport const dbMiddleware = store => next => action => {\n  if(action.type === 'GET_GOOGLE_EVENTS_SUCCESS') {\n    debugger\n    saveEvents(action.payload);\n  }\n  if(action.type === 'POST_GOOGLE_EVENT_SUCCESS') {\n    saveEvents(action.payload);\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}