{"ast":null,"code":"import _toConsumableArray from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Sameenhaja/big-calendar/src/react-calendar-view.js\";\nimport React from 'react';\nimport events from '../events';\nimport BigCalendar from 'react-big-calendar';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.less';\nvar localizer = BigCalendar.momentLocalizer(moment);\nvar DragAndDropCalendar = withDragAndDrop(BigCalendar);\n\nvar Dnd =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dnd, _React$Component);\n\n  function Dnd(props) {\n    var _this;\n\n    _classCallCheck(this, Dnd);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dnd).call(this, props));\n\n    _this.resizeEvent = function (_ref) {\n      var event = _ref.event,\n          start = _ref.start,\n          end = _ref.end;\n      var events = _this.state.events;\n      var nextEvents = events.map(function (existingEvent) {\n        return existingEvent.id == event.id ? _objectSpread({}, existingEvent, {\n          start: start,\n          end: end\n        }) : existingEvent;\n      });\n\n      _this.setState({\n        events: nextEvents\n      }); //alert(`${event.title} was resized to ${start}-${end}`)\n\n    };\n\n    _this.state = {\n      events: events\n    };\n    _this.moveEvent = _this.moveEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.newEvent = _this.newEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Dnd, [{\n    key: \"moveEvent\",\n    value: function moveEvent(_ref2) {\n      var event = _ref2.event,\n          start = _ref2.start,\n          end = _ref2.end,\n          droppedOnAllDaySlot = _ref2.isAllDay;\n      var events = this.state.events;\n      var idx = events.indexOf(event);\n      var allDay = event.allDay;\n\n      if (!event.allDay && droppedOnAllDaySlot) {\n        allDay = true;\n      } else if (event.allDay && !droppedOnAllDaySlot) {\n        allDay = false;\n      }\n\n      var updatedEvent = _objectSpread({}, event, {\n        start: start,\n        end: end,\n        allDay: allDay\n      });\n\n      var nextEvents = _toConsumableArray(events);\n\n      nextEvents.splice(idx, 1, updatedEvent);\n      this.setState({\n        events: nextEvents\n      }); // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n    }\n  }, {\n    key: \"newEvent\",\n    value: function newEvent(event) {// let idList = this.state.events.map(a => a.id)\n      // let newId = Math.max(...idList) + 1\n      // let hour = {\n      //   id: newId,\n      //   title: 'New Event',\n      //   allDay: event.slots.length == 1,\n      //   start: event.start,\n      //   end: event.end,\n      // }\n      // this.setState({\n      //   events: this.state.events.concat([hour]),\n      // })\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(DragAndDropCalendar, {\n        selectable: true,\n        localizer: this.props.localizer,\n        events: this.state.events,\n        onEventDrop: this.moveEvent,\n        resizable: true,\n        onEventResize: this.resizeEvent,\n        onSelectSlot: this.newEvent,\n        defaultView: BigCalendar.Views.MONTH,\n        defaultDate: new Date(2015, 3, 12),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Dnd;\n}(React.Component);\n\nexport default Dnd;","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/react-calendar-view.js"],"names":["React","events","BigCalendar","withDragAndDrop","localizer","momentLocalizer","moment","DragAndDropCalendar","Dnd","props","resizeEvent","event","start","end","state","nextEvents","map","existingEvent","id","setState","moveEvent","bind","newEvent","droppedOnAllDaySlot","isAllDay","idx","indexOf","allDay","updatedEvent","splice","Views","MONTH","Date","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport events from '../events'\nimport BigCalendar from 'react-big-calendar'\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\n\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.less'\n\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar)\n\nclass Dnd extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      events: events,\n    }\n\n    this.moveEvent = this.moveEvent.bind(this)\n    this.newEvent = this.newEvent.bind(this)\n  }\n\n  moveEvent({ event, start, end, isAllDay: droppedOnAllDaySlot }) {\n    const { events } = this.state\n\n    const idx = events.indexOf(event)\n    let allDay = event.allDay\n\n    if (!event.allDay && droppedOnAllDaySlot) {\n      allDay = true\n    } else if (event.allDay && !droppedOnAllDaySlot) {\n      allDay = false\n    }\n\n    const updatedEvent = { ...event, start, end, allDay }\n\n    const nextEvents = [...events]\n    nextEvents.splice(idx, 1, updatedEvent)\n\n    this.setState({\n      events: nextEvents,\n    })\n\n    // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n  }\n\n  resizeEvent = ({ event, start, end }) => {\n    const { events } = this.state\n\n    const nextEvents = events.map(existingEvent => {\n      return existingEvent.id == event.id\n        ? { ...existingEvent, start, end }\n        : existingEvent\n    })\n\n    this.setState({\n      events: nextEvents,\n    })\n\n    //alert(`${event.title} was resized to ${start}-${end}`)\n  }\n\n  newEvent(event) {\n    // let idList = this.state.events.map(a => a.id)\n    // let newId = Math.max(...idList) + 1\n    // let hour = {\n    //   id: newId,\n    //   title: 'New Event',\n    //   allDay: event.slots.length == 1,\n    //   start: event.start,\n    //   end: event.end,\n    // }\n    // this.setState({\n    //   events: this.state.events.concat([hour]),\n    // })\n  }\n\n  render() {\n    return (\n      <DragAndDropCalendar\n        selectable\n        localizer={this.props.localizer}\n        events={this.state.events}\n        onEventDrop={this.moveEvent}\n        resizable\n        onEventResize={this.resizeEvent}\n        onSelectSlot={this.newEvent}\n        defaultView={BigCalendar.Views.MONTH}\n        defaultDate={new Date(2015, 3, 12)}\n      />\n    )\n  }\n}\n\nexport default Dnd\n"]},"metadata":{},"sourceType":"module"}