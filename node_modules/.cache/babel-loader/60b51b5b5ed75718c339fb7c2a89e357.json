{"ast":null,"code":"import _toConsumableArray from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { UPDATE_STORED_EVENTS } from '../actions/events';\nimport { SUCCESS_STORED_EVENTS } from '../actions/db/events';\nvar initialState = {\n  calEvents: []\n};\n\nvar mergeEvents = function mergeEvents(oldEvents, newData) {\n  var newIds = oldEvents.map(function (item) {\n    return item.id;\n  });\n  var newEvents = newData.normalData.entities.events;\n\n  var newPayload = _toConsumableArray(oldEvents);\n\n  debugger;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = newIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      if (!newIds.includes(key)) {\n        newPayload.push(newEvents[key]);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  debugger;\n  return newPayload;\n};\n\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, {\n        calEvents: action.payload\n      });\n\n    case SUCCESS_STORED_EVENTS:\n      {\n        var newEvents = mergeEvents(state.calEvents, action.payload);\n        return Object.assign({}, state, {\n          calEvents: newEvents\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sham/big-calendar/src/newReducers/events.js"],"names":["UPDATE_STORED_EVENTS","SUCCESS_STORED_EVENTS","initialState","calEvents","mergeEvents","oldEvents","newData","newIds","map","item","id","newEvents","normalData","entities","events","newPayload","key","includes","push","eventsReducer","state","action","type","Object","assign","payload"],"mappings":";AAAA,SACEA,oBADF,QAEO,mBAFP;AAGA,SACEC,qBADF,QAEO,sBAFP;AAIA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAArB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAAYC,OAAZ,EAAwB;AAC1C,MAAIC,MAAM,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,EAAT;AAAA,GAAlB,CAAb;AACA,MAAIC,SAAS,GAAGL,OAAO,CAACM,UAAR,CAAmBC,QAAnB,CAA4BC,MAA5C;;AACA,MAAIC,UAAU,sBAAOV,SAAP,CAAd;;AACA;AAJ0C;AAAA;AAAA;;AAAA;AAK1C,yBAAeE,MAAf,8HAAuB;AAAA,UAAfS,GAAe;;AACrB,UAAG,CAACT,MAAM,CAACU,QAAP,CAAgBD,GAAhB,CAAJ,EAA0B;AACxBD,QAAAA,UAAU,CAACG,IAAX,CAAgBP,SAAS,CAACK,GAAD,CAAzB;AACD;AACF;AATyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAU1C;AACA,SAAOD,UAAP;AACD,CAZD;;AAcA,eAAe,SAASI,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBlB,YAAsB;AAAA,MAARmB,MAAQ;;AAClE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKtB,oBAAL;AACE,aAAOuB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEjB,QAAAA,SAAS,EAAEkB,MAAM,CAACI;AAApB,OAAzB,CAAP;;AACF,SAAKxB,qBAAL;AAA4B;AAC1B,YAAIU,SAAS,GAAGP,WAAW,CAACgB,KAAK,CAACjB,SAAP,EAAkBkB,MAAM,CAACI,OAAzB,CAA3B;AACA,eAAOF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEjB,UAAAA,SAAS,EAAEQ;AAAb,SAAzB,CAAP;AACD;;AACD;AACE,aAAOS,KAAP;AARJ;AAUD","sourcesContent":["import {\n  UPDATE_STORED_EVENTS\n} from '../actions/events';\nimport {\n  SUCCESS_STORED_EVENTS\n} from '../actions/db/events';\n\nconst initialState = {\n  calEvents: [],\n}\n\nconst mergeEvents = (oldEvents, newData) => {\n  let newIds = oldEvents.map(item => item.id);\n  let newEvents = newData.normalData.entities.events;\n  let newPayload = [...oldEvents];\n  debugger\n  for(let key of newIds) {\n    if(!newIds.includes(key)) {\n      newPayload.push(newEvents[key])\n    }\n  }\n  debugger\n  return newPayload;\n}\n\nexport default function eventsReducer(state = initialState, action) {\n  switch(action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, { calEvents: action.payload });\n    case SUCCESS_STORED_EVENTS: {\n      let newEvents = mergeEvents(state.calEvents, action.payload)\n      return Object.assign({}, state, { calEvents: newEvents })\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}