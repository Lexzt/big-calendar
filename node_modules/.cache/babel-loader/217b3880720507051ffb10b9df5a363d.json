{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), mergeMap(function () {\n    from(getEvents).pipe(map(function (resp) {\n      console.log(resp);\n      debugger;\n      return duplicateAction();\n    }));\n  }));\n};\n\nvar getEvents =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            window.gapi.client.load('calendar', 'v3').then(function () {\n              var syncToken = localStorage.getItem('sync');\n\n              if (syncToken == null) {\n                console.log('performing full sync');\n                return window.gapi.client.calendar.events.list({\n                  'calendarId': 'primary'\n                });\n              } else {\n                console.log('performing incremental sync');\n                return window.gapi.client.calendar.events.list({\n                  'calendarId': 'primary',\n                  'syncToken': syncToken\n                });\n              }\n            }).then(function (resp) {\n              debugger;\n              var result = [];\n              return new Promise(function (resolve, reject) {\n                fetchEvents(request, result, resolve, reject);\n              });\n            }).then(\n            /*#__PURE__*/\n            function () {\n              var _ref2 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee(response) {\n                var myData, singleEvent, mySchema;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        myData = {\n                          events: response\n                        };\n                        singleEvent = new schema.Entity('events');\n                        mySchema = {\n                          events: [singleEvent]\n                        };\n                        return _context.abrupt(\"return\", normalize(myData, mySchema));\n\n                      case 4:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, this);\n              }));\n\n              return function (_x) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function getEvents() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\n\nvar fetchEvents = function fetchEvents(request, items, resolve, reject) {\n  debugger;\n  request.execute(function (resp) {\n    var newItems = items.concat(resp.result.items);\n    var pageToken = resp.nextPageToken;\n    var syncToken = resp.nextSyncToken;\n\n    if (pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      localStorage.setItem('sync', syncToken);\n      resolve(newItems);\n    }\n  }, function (error) {\n    if (error.code === 410) {\n      console.log('Invalid sync token, clearing event store and re-syncing.');\n      localStorage.deleteItem('sync');\n      var newRequest = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary'\n      });\n      fetchEvents(newRequest, items, resolve, reject);\n    } else {\n      console.log(error);\n      reject('Something went wrong, Please refresh and try again');\n    }\n  });\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","beginGetEventsEpics","action$","pipe","getEvents","resp","console","log","window","gapi","client","load","then","syncToken","localStorage","getItem","calendar","events","list","result","Promise","resolve","reject","fetchEvents","request","response","myData","singleEvent","Entity","mySchema","items","execute","newItems","concat","pageToken","nextPageToken","nextSyncToken","undefined","nextRequest","setItem","error","code","deleteItem","newRequest"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  mergeMap(() => {\n    from(getEvents).pipe(\n      map(resp => {\n        console.log(resp);\n        debugger;\n        return duplicateAction();\n      })\n    )\n  })\n)\n\nconst getEvents = async () => {\n  window.gapi.client.load('calendar', 'v3')\n    .then(() => {\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log('performing full sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary'\n        });\n      }\n      else {\n        console.log('performing incremental sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n    })\n    .then(resp => {\n      debugger\n      let result = [];\n      return new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      })\n    })\n    .then(async response => {\n      const myData = { events : response};\n      const singleEvent = new schema.Entity('events');\n      const mySchema = { events: [ singleEvent ]};\n      return normalize(myData, mySchema);\n    })\n}\n\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\nconst fetchEvents = (request, items, resolve, reject) => {\n  debugger;\n    request.execute((resp) => {\n    const newItems = items.concat(resp.result.items);\n    let pageToken = resp.nextPageToken;\n    let syncToken = resp.nextSyncToken;\n    if(pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      localStorage.setItem('sync', syncToken);\n      resolve(newItems);\n    }\n  }, (error) => {\n    if(error.code === 410) {\n      console.log('Invalid sync token, clearing event store and re-syncing.');\n      localStorage.deleteItem('sync');\n      var newRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      fetchEvents(newRequest, items, resolve, reject);\n    } else {\n      console.log(error);\n      reject('Something went wrong, Please refresh and try again');\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}