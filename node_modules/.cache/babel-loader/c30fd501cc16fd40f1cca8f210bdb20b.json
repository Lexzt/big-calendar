{"ast":null,"code":"import { createLogger } from 'redux-logger';\nexport var loggerMiddleware = createLogger();\n\nvar MicrosoftGraph = require(\"@microsoft/microsoft-graph-client\");\n\nvar GOOGLE_CLIENT_ID = '65724758895-gc7lubjkjsqqddfhlb7jcme80i3mjqn0.apps.googleusercontent.com';\nvar API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nvar GOOGLE_SCOPE = \"https://www.googleapis.com/auth/calendar.events\";\nvar OUTLOOK_CLIENT_ID = '6b770a68-2156-4345-b0aa-d95419e31be1';\nvar BASE_URL = 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize?';\n\nfunction outlookCalendarEvents() {\n  return MicrosoftGraph.Client.init({\n    authProvider: function authProvider(done) {\n      done(null, window.localStorage.getItem('at'));\n    }\n  }).api('/me/events').top(10).select('subject,start,end,createdDatetime').orderby('createdDatetime DESC').get(function (err, res) {\n    if (err) {\n      return err;\n    } else {\n      return res.value;\n    }\n  });\n}\n\nexport var apiMiddleware = function apiMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'BEGIN_GOOGLE_AUTH') {\n        window.gapi.load('client:auth2', {\n          callback: function callback() {\n            window.gapi.client.init({\n              'apiKey': API_KEY,\n              'clientId': GOOGLE_CLIENT_ID,\n              'scope': GOOGLE_SCOPE,\n              'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n            }).then(function () {\n              var GoogleAuth = window.gapi.auth2.getAuthInstance();\n              var user = GoogleAuth.currentUser.get();\n              var isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n\n              if (isAuthorized) {\n                next({\n                  type: 'SUCCESS_GOOGLE_AUTH',\n                  payload: {\n                    user: user\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n\n      if (action.type === 'GET_GOOGLE_EVENTS') {\n        window.gapi.client.request({\n          'path': \"https://www.googleapis.com/calendar/v3/calendars/primary/events\"\n        }).then(function (resp) {\n          debugger;\n          var events = resp.result.items;\n          next({\n            type: action.type + '_SUCCESS',\n            payload: {\n              data: events\n            }\n          });\n        }, function (reason) {\n          next({\n            type: action.type + '_FAILURE',\n            payload: {\n              data: reason\n            }\n          });\n        });\n      }\n\n      if (action.type === 'GET_OUTLOOK_EVENTS') {\n        var value = outlookCalendarEvents();\n        next({\n          type: action.type + '_SUCCESS',\n          payload: {\n            data: value\n          }\n        });\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/redux/middleware.js"],"names":["createLogger","loggerMiddleware","MicrosoftGraph","require","GOOGLE_CLIENT_ID","API_KEY","GOOGLE_SCOPE","OUTLOOK_CLIENT_ID","BASE_URL","outlookCalendarEvents","Client","init","authProvider","done","window","localStorage","getItem","api","top","select","orderby","get","err","res","value","apiMiddleware","store","next","action","type","gapi","load","callback","client","then","GoogleAuth","auth2","getAuthInstance","user","currentUser","isAuthorized","hasGrantedScopes","payload","request","resp","events","result","items","data","reason"],"mappings":"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","sourcesContent":["import { createLogger } from 'redux-logger';\nexport const loggerMiddleware = createLogger();\n\nconst MicrosoftGraph = require(\"@microsoft/microsoft-graph-client\");\n\nconst GOOGLE_CLIENT_ID = '65724758895-gc7lubjkjsqqddfhlb7jcme80i3mjqn0.apps.googleusercontent.com';\nconst API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nconst GOOGLE_SCOPE = `https://www.googleapis.com/auth/calendar.events`;\nconst OUTLOOK_CLIENT_ID = '6b770a68-2156-4345-b0aa-d95419e31be1';\nconst BASE_URL = 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize?';\n\nfunction outlookCalendarEvents() {\n  return MicrosoftGraph.Client.init({\n    authProvider: (done) => {\n      done(null, window.localStorage.getItem('at'))\n    }\n  }).api('/me/events')\n    .top(10)\n    .select('subject,start,end,createdDatetime')\n    .orderby('createdDatetime DESC')\n    .get((err, res) => {\n      if (err) {\n        return err;\n      } else {\n        return res.value;\n      }\n    });\n}\n\nexport const apiMiddleware = store => next => action => {\n  if(action.type === 'BEGIN_GOOGLE_AUTH') {\n    window.gapi.load('client:auth2', {\n      callback: () => {\n        window.gapi.client.init({\n            'apiKey': API_KEY,\n            'clientId': GOOGLE_CLIENT_ID,\n            'scope': GOOGLE_SCOPE,\n            'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'],\n        }).then( () => {\n            const GoogleAuth = window.gapi.auth2.getAuthInstance();\n            const user = GoogleAuth.currentUser.get();\n            const isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n            if(isAuthorized) {\n              next({\n                type: 'SUCCESS_GOOGLE_AUTH',\n                payload: {\n                  user\n                }\n              })\n            }\n        })\n      }\n    });\n  }\n  \n  if(action.type === 'GET_GOOGLE_EVENTS') {\n    window.gapi.client.request({\n         'path': `https://www.googleapis.com/calendar/v3/calendars/primary/events`,\n       }).then(resp => {\n         debugger\n       let events = resp.result.items;\n       next({\n         type: action.type + '_SUCCESS',\n         payload: {\n           data: events\n         }\n       });\n     }, (reason) => {\n       next({\n         type: action.type + '_FAILURE',\n         payload: {\n           data: reason\n         }\n       });\n     });\n  }\n  if(action.type === 'GET_OUTLOOK_EVENTS') {\n    const value = outlookCalendarEvents();\n    next({\n      type: action.type + '_SUCCESS',\n      payload: {\n        data: value\n      }\n    })\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}