{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport getDb from '../../db';\nimport md5 from 'md5';\nimport { normalize, schema } from 'normalizr';\n\nfunction storeEvents(_x) {\n  return _storeEvents.apply(this, arguments);\n}\n\nfunction _storeEvents() {\n  _storeEvents = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(events) {\n    var db, dbEvents, addEvents, results, values;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getDb();\n\n          case 2:\n            db = _context2.sent;\n            debugger;\n            dbEvents = filter(events);\n            addEvents = []; //need to preprocess data\n\n            results = dbEvents.map(\n            /*#__PURE__*/\n            function () {\n              var _ref = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee(dbEvent) {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!dbEvent.id) {\n                          _context.next = 10;\n                          break;\n                        }\n\n                        _context.prev = 1;\n                        _context.next = 4;\n                        return db.events.upsert(dbEvent);\n\n                      case 4:\n                        _context.next = 9;\n                        break;\n\n                      case 6:\n                        _context.prev = 6;\n                        _context.t0 = _context[\"catch\"](1);\n                        console.log(_context.t0);\n\n                      case 9:\n                        return _context.abrupt(\"return\", dbEvent);\n\n                      case 10:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, this, [[1, 6]]);\n              }));\n\n              return function (_x2) {\n                return _ref.apply(this, arguments);\n              };\n            }());\n            _context2.next = 9;\n            return Promise.all(results);\n\n          case 9:\n            values = _context2.sent;\n            debugger;\n            return _context2.abrupt(\"return\", values);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _storeEvents.apply(this, arguments);\n}\n\nvar filter = function filter(data) {\n  debugger;\n\n  if (data.data.length > 0) {\n    var formated_events = data.map(function (eachEvent) {\n      return {\n        'id': md5(eachEvent.id),\n        'end': eachEvent.end,\n        'start': eachEvent.start,\n        'summary': eachEvent.summary,\n        'organizer': eachEvent.organizer,\n        'recurrence': eachEvent.recurrence,\n        'iCalUID': eachEvent.iCalUID,\n        'attendees': eachEvent.attendees\n      };\n    });\n    return formated_events;\n  } else {\n    return [];\n  }\n};\n\nfunction retrieveEvents() {\n  return _retrieveEvents.apply(this, arguments);\n}\n\nfunction _retrieveEvents() {\n  _retrieveEvents = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var db, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getDb();\n\n          case 2:\n            db = _context3.sent;\n            data = [];\n            _context3.next = 6;\n            return db.events.find().exec().then(function (events) {\n              data = events.map(function (singleEvent) {\n                return {\n                  'id': md5(singleEvent.id),\n                  'end': singleEvent.end,\n                  'start': singleEvent.start,\n                  'summary': singleEvent.summary,\n                  'organizer': singleEvent.organizer,\n                  'recurrence': singleEvent.recurrence,\n                  'iCalUID': singleEvent.iCalUID,\n                  'attendees': singleEvent.attendees\n                };\n              });\n            });\n\n          case 6:\n            return _context3.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n  return _retrieveEvents.apply(this, arguments);\n}\n\nexport var storeEventsMiddleware = function storeEventsMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'BEGIN_STORE_EVENTS') {\n        debugger;\n        storeEvents(action.payload).then(function (resp) {\n          debugger;\n          next({\n            type: 'SUCCESS_STORED_EVENTS',\n            payload: action.payload\n          });\n        }, function (error) {\n          console.log(error);\n        });\n      }\n\n      return next(action);\n    };\n  };\n};\nexport var apiSuccessToDbMiddleware = function apiSuccessToDbMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'POST_EVENT_SUCCESS') {\n        debugger;\n        next({\n          type: 'BEGIN_STORE_EVENTS',\n          payload: [action.payload]\n        });\n      }\n\n      if (action.type === 'GET_EVENTS_SUCCESS') {\n        next({\n          type: 'BEGIN_STORE_EVENTS',\n          payload: action.payload\n        });\n      }\n\n      return next(action);\n    };\n  };\n};\nexport var eventsStoreOutMiddleware = function eventsStoreOutMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'RETRIEVE_STORED_EVENTS') {\n        var events = [];\n        retrieveEvents().then(function (resp) {\n          next({\n            type: 'UPDATE_STORED_EVENTS',\n            payload: resp\n          });\n        });\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/middleware/db/events.js"],"names":["getDb","md5","normalize","schema","storeEvents","events","db","dbEvents","filter","addEvents","results","map","dbEvent","id","upsert","console","log","Promise","all","values","data","length","formated_events","eachEvent","end","start","summary","organizer","recurrence","iCalUID","attendees","retrieveEvents","find","exec","then","singleEvent","storeEventsMiddleware","store","next","action","type","payload","resp","error","apiSuccessToDbMiddleware","eventsStoreOutMiddleware"],"mappings":"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","sourcesContent":["import getDb from '../../db';\nimport md5 from 'md5';\nimport { normalize, schema } from 'normalizr';\n\n\n\nasync function storeEvents(events){\n  const db = await getDb();\n  debugger\n  const dbEvents = filter(events);\n  const addEvents = [];\n  //need to preprocess data\n  const results = dbEvents.map(async dbEvent => {\n    if(!!dbEvent.id) {\n      try {\n        await db.events.upsert(dbEvent);\n      } catch(e) {\n        console.log(e);\n      }\n      return dbEvent;\n    }\n  });\n  let values = await Promise.all(results);\n  debugger\n  return values;\n}\n\nconst filter = (data) => {\n  debugger;\n  if(data.data.length > 0) {\n    const formated_events = data\n    .map(eachEvent => {\n        return  ({\n          'id' : md5(eachEvent.id),\n          'end' : eachEvent.end,\n          'start': eachEvent.start,\n          'summary': eachEvent.summary,\n          'organizer': eachEvent.organizer,\n          'recurrence': eachEvent.recurrence,\n          'iCalUID': eachEvent.iCalUID,\n          'attendees': eachEvent.attendees\n        })\n      }\n    );\n    return formated_events;\n  }\n  else {\n    return [];\n  }\n}\n\nasync function retrieveEvents() {\n  const db = await getDb();\n  let data = [];\n  await db.events.find().exec().then(events => {\n      data = events.map(singleEvent => {\n        return {\n          'id' : md5(singleEvent.id),\n          'end' : singleEvent.end,\n          'start': singleEvent.start,\n          'summary': singleEvent.summary,\n          'organizer': singleEvent.organizer,\n          'recurrence': singleEvent.recurrence,\n          'iCalUID': singleEvent.iCalUID,\n          'attendees': singleEvent.attendees\n        }\n      });\n  });\n  return data;\n}\nexport const storeEventsMiddleware = store => next => action => {\n  if(action.type === 'BEGIN_STORE_EVENTS') {\n    debugger\n    storeEvents(action.payload).then((resp) => {\n      debugger\n      next({\n        type: 'SUCCESS_STORED_EVENTS',\n        payload: action.payload\n      })\n    }, (error) => {\n      console.log(error);\n    })\n  }\n  return next(action);\n}\n\nexport const apiSuccessToDbMiddleware = store => next => action => {\n  if(action.type === 'POST_EVENT_SUCCESS') {\n    debugger\n    next({\n      type: 'BEGIN_STORE_EVENTS',\n      payload: [action.payload]\n    })\n  }\n  if(action.type === 'GET_EVENTS_SUCCESS') {\n    next({\n      type: 'BEGIN_STORE_EVENTS',\n      payload: action.payload\n    })\n  }\n  return next(action);\n}\n\nexport const eventsStoreOutMiddleware = store => next => action => {\n  if(action.type === 'RETRIEVE_STORED_EVENTS') {\n    let events = [];\n    retrieveEvents().then((resp) => {\n      next({\n        type: 'UPDATE_STORED_EVENTS',\n        payload: resp\n      })\n    });\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}