{"ast":null,"code":"import { createSelector } from 'reselect';\nimport moment from 'moment';\n\nvar getGoogleEvents = function getGoogleEvents(state) {\n  return state.events.google_data;\n}; //process google events data\n\n\nexport var getFilteredEvents = createSelector([getGoogleEvents], function (google_data) {\n  var formated_events = google_data.map(function (eachEvent) {\n    debugger;\n\n    if (eachEvent.end.date === undefined) {\n      return {\n        title: eachEvent.summary,\n        end: eachEvent.end.dateTime,\n        start: eachEvent.start.dateTime\n      };\n    } else {\n      return {\n        title: eachEvent.summary,\n        end: moment(eachEvent.end.date).format(),\n        start: moment(eachEvent.start.date).format()\n      };\n    }\n  });\n  return formated_events;\n});","map":{"version":3,"sources":["/Users/sham/big-calendar/src/redux/selectors.js"],"names":["createSelector","moment","getGoogleEvents","state","events","google_data","getFilteredEvents","formated_events","map","eachEvent","end","date","undefined","title","summary","dateTime","start","format"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,MAAN,CAAaC,WAAjB;AAAA,CAA7B,C,CAGA;;;AACA,OAAO,IAAMC,iBAAiB,GAAGN,cAAc,CAC7C,CAACE,eAAD,CAD6C,EAE7C,UAACG,WAAD,EAAiB;AACf,MAAME,eAAe,GAAGF,WAAW,CAClCG,GADuB,CACnB,UAAAC,SAAS,EAAI;AACd;;AACA,QAAGA,SAAS,CAACC,GAAV,CAAcC,IAAd,KAAuBC,SAA1B,EAAqC;AACnC,aAAO;AACLC,QAAAA,KAAK,EAAEJ,SAAS,CAACK,OADZ;AAELJ,QAAAA,GAAG,EAAED,SAAS,CAACC,GAAV,CAAcK,QAFd;AAGLC,QAAAA,KAAK,EAAEP,SAAS,CAACO,KAAV,CAAgBD;AAHlB,OAAP;AAKD,KAND,MAOK;AACH,aAAO;AACLF,QAAAA,KAAK,EAAEJ,SAAS,CAACK,OADZ;AAELJ,QAAAA,GAAG,EAAGT,MAAM,CAACQ,SAAS,CAACC,GAAV,CAAcC,IAAf,CAAN,CAA2BM,MAA3B,EAFD;AAGLD,QAAAA,KAAK,EAAEf,MAAM,CAACQ,SAAS,CAACO,KAAV,CAAgBL,IAAjB,CAAN,CAA6BM,MAA7B;AAHF,OAAP;AAKD;AACF,GAjBqB,CAAxB;AAmBA,SAAOV,eAAP;AACD,CAvB4C,CAAxC","sourcesContent":["import { createSelector } from 'reselect';\nimport moment from 'moment';\n\nconst getGoogleEvents = state => state.events.google_data;\n\n\n//process google events data\nexport const getFilteredEvents = createSelector(\n  [getGoogleEvents],\n  (google_data) => {\n    const formated_events = google_data\n    .map(eachEvent => {\n        debugger\n        if(eachEvent.end.date === undefined) {\n          return {\n            title: eachEvent.summary,\n            end: eachEvent.end.dateTime,\n            start: eachEvent.start.dateTime\n          }\n        }\n        else {\n          return {\n            title: eachEvent.summary,\n            end:  moment(eachEvent.end.date).format(),\n            start: moment(eachEvent.start.date).format()\n          }\n        }\n      }\n    );\n    return formated_events\n  }\n)\n"]},"metadata":{},"sourceType":"module"}