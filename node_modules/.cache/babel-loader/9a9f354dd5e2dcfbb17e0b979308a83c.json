{"ast":null,"code":"import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), mergeMap(function () {\n    return from(loadClient()).pipe(mergeMap(function () {\n      return from(loadCalendar()).pipe(map(function (resp) {\n        debugger;\n        return duplicateAction();\n      }));\n    }));\n  }));\n};\n\nvar normalizeEvents = function normalizeEvents(response) {\n  var singleEvent = new schema.Entity('events');\n  var results = normalize({\n    events: response\n  }, {\n    events: [singleEvent]\n  });\n  return results;\n};\n\nvar fetchEvents = function fetchEvents(resp, items, resolve, reject) {\n  debugger;\n  var newItems = items.concat(resp.result.items);\n  var pageToken = resp.nextPageToken;\n  var syncToken = resp.nextSyncToken;\n\n  if (pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'pageToken': pageToken\n    }).then(function (nextResp) {\n      return fetchEvents(nextResp, newItems, resolve, reject);\n    }).catch(function (e) {\n      if (e.code === 410) {\n        console.log('Invalid sync token, clearing event store and re-syncing.');\n        localStorage.deleteItem('sync');\n        window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        }).then(function (newResp) {\n          return fetchEvents(newResp, items, resolve, reject);\n        });\n      } else {\n        console.log(e);\n        reject('Something went wrong, Please refresh and try again');\n      }\n    });\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","beginGetEventsEpics","action$","pipe","loadClient","loadCalendar","resp","normalizeEvents","response","singleEvent","Entity","results","events","fetchEvents","items","resolve","reject","newItems","concat","result","pageToken","nextPageToken","syncToken","nextSyncToken","undefined","window","gapi","client","calendar","list","then","nextResp","catch","e","code","console","log","localStorage","deleteItem","newResp","setItem"],"mappings":"AAAA,SAASA,gBAAT,QAAkC,mBAAlC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,UAAxB,QAA0C,gBAA1C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,WAAlC;AAEA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC5CN,MAAM,CAACL,gBAAD,CADsC,EAE5CG,QAAQ,CAAC;AAAA,WAAMG,IAAI,CAACM,UAAU,EAAX,CAAJ,CAAmBD,IAAnB,CACXR,QAAQ,CAAC;AAAA,aAAMG,IAAI,CAACO,YAAY,EAAb,CAAJ,CAAqBF,IAArB,CACXT,GAAG,CAAC,UAAAY,IAAI,EAAI;AACV;AACA,eAAOb,eAAe,EAAtB;AACD,OAHE,CADQ,CAAN;AAAA,KAAD,CADG,CAAN;AAAA,GAAD,CAFoC,CAAJ;AAAA,CAAnC;;AAcP,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAc;AACpC,MAAIC,WAAW,GAAG,IAAIT,MAAM,CAACU,MAAX,CAAkB,QAAlB,CAAlB;AACA,MAAIC,OAAO,GAAGZ,SAAS,CAAC;AAAEa,IAAAA,MAAM,EAAGJ;AAAX,GAAD,EAAuB;AAAEI,IAAAA,MAAM,EAAE,CAAEH,WAAF;AAAV,GAAvB,CAAvB;AACA,SAAOE,OAAP;AACD,CAJD;;AAMA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACP,IAAD,EAAOQ,KAAP,EAAcC,OAAd,EAAuBC,MAAvB,EAAkC;AACpD;AACA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAaZ,IAAI,CAACa,MAAL,CAAYL,KAAzB,CAAjB;AACA,MAAIM,SAAS,GAAGd,IAAI,CAACe,aAArB;AACA,MAAIC,SAAS,GAAGhB,IAAI,CAACiB,aAArB;;AACA,MAAGH,SAAS,KAAKI,SAAjB,EAA4B;AAC1BC,IAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,QAAnB,CAA4BhB,MAA5B,CAAmCiB,IAAnC,CAAwC;AACtC,oBAAe,SADuB;AAEtC,mBAAaT;AAFyB,KAAxC,EAGGU,IAHH,CAGQ,UAAAC,QAAQ;AAAA,aAAIlB,WAAW,CAACkB,QAAD,EAAWd,QAAX,EAAqBF,OAArB,EAA8BC,MAA9B,CAAf;AAAA,KAHhB,EAIGgB,KAJH,CAIS,UAAAC,CAAC,EAAI;AACV,UAAGA,CAAC,CAACC,IAAF,KAAW,GAAd,EAAmB;AACjBC,QAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;AACAC,QAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACAb,QAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,QAAnB,CAA4BhB,MAA5B,CAAmCiB,IAAnC,CAAwC;AACtC,wBAAe;AADuB,SAAxC,EAEGC,IAFH,CAEQ,UAAAS,OAAO;AAAA,iBAAI1B,WAAW,CAAC0B,OAAD,EAAUzB,KAAV,EAAiBC,OAAjB,EAA0BC,MAA1B,CAAf;AAAA,SAFf;AAGD,OAND,MAMO;AACLmB,QAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACAjB,QAAAA,MAAM,CAAC,oDAAD,CAAN;AACD;AACF,KAfH;AAgBD,GAjBD,MAiBO;AACLqB,IAAAA,YAAY,CAACG,OAAb,CAAqB,MAArB,EAA6BlB,SAA7B;AACAP,IAAAA,OAAO,CAACE,QAAD,CAAP;AACD;AACF,CA1BD","sourcesContent":["import { GET_EVENTS_BEGIN, } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  mergeMap(() => from(loadClient()).pipe(\n      mergeMap(() => from(loadCalendar()).pipe(\n          map(resp => {\n            debugger;\n            return duplicateAction();\n          })\n        )\n      )\n    )\n  )\n)\n\nconst normalizeEvents = (response) => {\n  let singleEvent = new schema.Entity('events');\n  let results = normalize({ events : response}, { events: [ singleEvent ]});\n  return results;\n}\n\nconst fetchEvents = (resp, items, resolve, reject) => {\n  debugger\n  const newItems = items.concat(resp.result.items);\n  let pageToken = resp.nextPageToken;\n  let syncToken = resp.nextSyncToken;\n  if(pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary',\n      'pageToken': pageToken\n    }).then(nextResp => fetchEvents(nextResp, newItems, resolve, reject))\n      .catch(e => {\n        if(e.code === 410) {\n          console.log('Invalid sync token, clearing event store and re-syncing.');\n          localStorage.deleteItem('sync');\n          window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n          }).then(newResp => fetchEvents(newResp, items, resolve, reject))\n        } else {\n          console.log(e);\n          reject('Something went wrong, Please refresh and try again');\n        }\n      })\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}