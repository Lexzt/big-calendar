{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport { RETRIEVE_STORED_EVENTS, duplicateAction, updateStoredEvents } from '../../actions/db/events';\nimport getDb from '../../db';\n/*function retrieveEvents(db) {\n  let data = [];\n  await db.events.find().exec().then(events => {\n      data = events.map(singleEvent => {\n        return {\n          'id' : md5(singleEvent.id),\n          'end' : singleEvent.end,\n          'start': singleEvent.start,\n          'summary': singleEvent.summary,\n          'organizer': singleEvent.organizer,\n          'recurrence': singleEvent.recurrence,\n          'iCalUID': singleEvent.iCalUID,\n          'attendees': singleEvent.attendees\n        }\n      });\n  });\n  debugger\n  return data;\n}*/\n\nexport var retrieveEventsEpic = function retrieveEventsEpic(action$) {\n  return action$.pipe(ofType(RETRIEVE_STORED_EVENTS), map(function () {\n    return from(getDb());\n  }), map(function (resp) {\n    return resp.subscribe(function (db) {\n      return from(db.events.find().exec());\n    });\n  }), map(function (data) {\n    return data.subscribe();\n  }), map(function (data) {\n    debugger;\n    return duplicateAction();\n  }));\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/db/events.js"],"names":["map","ofType","from","md5","RETRIEVE_STORED_EVENTS","duplicateAction","updateStoredEvents","getDb","retrieveEventsEpic","action$","pipe","resp","subscribe","db","events","find","exec","data"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,SACEC,sBADF,EAEEC,eAFF,EAGEC,kBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAkB,UAAlB;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC3CT,MAAM,CAACG,sBAAD,CADqC,EAE3CJ,GAAG,CAAC;AAAA,WAAME,IAAI,CAACK,KAAK,EAAN,CAAV;AAAA,GAAD,CAFwC,EAG3CP,GAAG,CAAC,UAAAW,IAAI;AAAA,WAAIA,IAAI,CAACC,SAAL,CAAe,UAAAC,EAAE;AAAA,aAAIX,IAAI,CAACW,EAAE,CAACC,MAAH,CAAUC,IAAV,GAAiBC,IAAjB,EAAD,CAAR;AAAA,KAAjB,CAAJ;AAAA,GAAL,CAHwC,EAI3ChB,GAAG,CAAC,UAACiB,IAAD;AAAA,WAAUA,IAAI,CAACL,SAAL,EAAV;AAAA,GAAD,CAJwC,EAK3CZ,GAAG,CAAC,UAACiB,IAAD,EAAU;AACZ;AACA,WAAOZ,eAAe,EAAtB;AACD,GAHE,CALwC,CAAJ;AAAA,CAAlC","sourcesContent":["import { map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport {\n  RETRIEVE_STORED_EVENTS,\n  duplicateAction,\n  updateStoredEvents\n} from '../../actions/db/events';\nimport getDb from '../../db';\n\n/*function retrieveEvents(db) {\n  let data = [];\n  await db.events.find().exec().then(events => {\n      data = events.map(singleEvent => {\n        return {\n          'id' : md5(singleEvent.id),\n          'end' : singleEvent.end,\n          'start': singleEvent.start,\n          'summary': singleEvent.summary,\n          'organizer': singleEvent.organizer,\n          'recurrence': singleEvent.recurrence,\n          'iCalUID': singleEvent.iCalUID,\n          'attendees': singleEvent.attendees\n        }\n      });\n  });\n  debugger\n  return data;\n}*/\n\nexport const retrieveEventsEpic = action$ => action$.pipe(\n  ofType(RETRIEVE_STORED_EVENTS),\n  map(() => from(getDb())),\n  map(resp => resp.subscribe(db => from(db.events.find().exec()))),\n  map((data) => data.subscribe()),\n  map((data) => {\n    debugger;\n    return duplicateAction();\n  })\n)\n"]},"metadata":{},"sourceType":"module"}