{"ast":null,"code":"import { createLogger } from 'redux-logger';\nimport request from 'superagent';\nexport var loggerMiddleware = createLogger();\nvar CALENDAR_ID = 'shamsheer619@gmail.com';\nvar CLIENT_ID = '65724758895-gc7lubjkjsqqddfhlb7jcme80i3mjqn0.apps.googleusercontent.com';\nvar API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nvar URL = \"https://www.googleapis.com/calendar/v3/calendars/events\";\nvar GoogleAuth;\n\nfunction initClient() {\n  window.gapi.client.init({\n    'apiKey': API_KEY,\n    'clientId': CLIENT_ID,\n    'scope': 'https://www.googleapis.com/auth/drive.metadata.readonly',\n    'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n  }).then(function () {\n    GoogleAuth = window.gapi.auth2.getAuthInstance(); // Listen for sign-in state changes.\n    //GoogleAuth.isSignedIn.listen(updateSigninStatus);\n    // Handle initial sign-in state. (Determine if user is already signed in)\n\n    var user = GoogleAuth.currentUser.get();\n    GoogleAuth.signIn();\n  });\n}\n/* function updateSigninStatus(isSignedIn) {\n  if (isSignedIn) {\n    isAuthorized = true;\n    if (currentApiRequest) {\n      sendAuthorizedApiRequest(currentApiRequest);\n    }\n  } else {\n    isAuthorized = false;\n  }\n}\n\nfunction sendAuthorizedApiRequest(requestDetails) {\n  currentApiRequest = requestDetails;\n  if (isAuthorized) {\n    // Make API request\n    // gapi.client.request(requestDetails)\n\n    // Reset currentApiRequest variable.\n    currentApiRequest = {};\n  } else {\n    GoogleAuth.signIn();\n  }\n} */\n\n\nexport var apiMiddleware = function apiMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'GET_EVENTS') {\n        initClient();\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/redux/middleware.js"],"names":["createLogger","request","loggerMiddleware","CALENDAR_ID","CLIENT_ID","API_KEY","URL","GoogleAuth","initClient","window","gapi","client","init","then","auth2","getAuthInstance","user","currentUser","get","signIn","apiMiddleware","store","next","action","type"],"mappings":"AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,OAAOC,OAAP,MAAqB,YAArB;AACA,OAAO,IAAMC,gBAAgB,GAAGF,YAAY,EAArC;AAEP,IAAMG,WAAW,GAAG,wBAApB;AACA,IAAMC,SAAS,GAAG,yEAAlB;AACA,IAAMC,OAAO,GAAG,yCAAhB;AACA,IAAMC,GAAG,4DAAT;AACA,IAAIC,UAAJ;;AAEA,SAASC,UAAT,GAAsB;AACpBC,EAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwB;AACpB,cAAUP,OADU;AAEpB,gBAAYD,SAFQ;AAGpB,aAAS,yDAHW;AAIpB,qBAAiB,CAAC,4DAAD;AAJG,GAAxB,EAKGS,IALH,CAKQ,YAAY;AAChBN,IAAAA,UAAU,GAAGE,MAAM,CAACC,IAAP,CAAYI,KAAZ,CAAkBC,eAAlB,EAAb,CADgB,CAGhB;AACA;AAEA;;AACA,QAAIC,IAAI,GAAGT,UAAU,CAACU,WAAX,CAAuBC,GAAvB,EAAX;AACAX,IAAAA,UAAU,CAACY,MAAX;AACH,GAdD;AAeD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtD,UAAGA,MAAM,CAACC,IAAP,KAAgB,YAAnB,EAAiC;AAC/BhB,QAAAA,UAAU;AACX;;AACD,aAAOc,IAAI,CAACC,MAAD,CAAX;AACD,KALyC;AAAA,GAAR;AAAA,CAA3B","sourcesContent":["import { createLogger } from 'redux-logger';\nimport request from  'superagent';\nexport const loggerMiddleware = createLogger();\n\nconst CALENDAR_ID = 'shamsheer619@gmail.com';\nconst CLIENT_ID = '65724758895-gc7lubjkjsqqddfhlb7jcme80i3mjqn0.apps.googleusercontent.com';\nconst API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nconst URL = `https://www.googleapis.com/calendar/v3/calendars/events`;\nlet GoogleAuth;\n\nfunction initClient() {\n  window.gapi.client.init({\n      'apiKey': API_KEY,\n      'clientId': CLIENT_ID,\n      'scope': 'https://www.googleapis.com/auth/drive.metadata.readonly',\n      'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n  }).then(function () {\n      GoogleAuth = window.gapi.auth2.getAuthInstance();\n\n      // Listen for sign-in state changes.\n      //GoogleAuth.isSignedIn.listen(updateSigninStatus);\n\n      // Handle initial sign-in state. (Determine if user is already signed in)\n      let user = GoogleAuth.currentUser.get();\n      GoogleAuth.signIn();\n  });\n}\n/* function updateSigninStatus(isSignedIn) {\n  if (isSignedIn) {\n    isAuthorized = true;\n    if (currentApiRequest) {\n      sendAuthorizedApiRequest(currentApiRequest);\n    }\n  } else {\n    isAuthorized = false;\n  }\n}\n\nfunction sendAuthorizedApiRequest(requestDetails) {\n  currentApiRequest = requestDetails;\n  if (isAuthorized) {\n    // Make API request\n    // gapi.client.request(requestDetails)\n\n    // Reset currentApiRequest variable.\n    currentApiRequest = {};\n  } else {\n    GoogleAuth.signIn();\n  }\n} */\n\nexport const apiMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS') {\n    initClient();\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}