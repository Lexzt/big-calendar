{"ast":null,"code":"import _objectSpread from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { UPDATE_EVENTS, GET_GOOGLE_EVENTS_BEGIN, GET_GOOGLE_EVENTS_SUCCESS, GET_GOOGLE_EVENTS_FAILURE, GET_OUTLOOK_EVENTS_SUCCESS, GET_OUTLOOK_EVENTS_FAILURE, POST_GOOGLE_EVENT_SUCCESS } from '../redux/actions';\nvar initialState = {\n  events: [],\n  google_data: [],\n  normalized_data: {},\n  outlook_data: [],\n  new_event: [],\n  error: '',\n  beginAPI: false,\n  initialSync: false\n};\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_EVENTS:\n      return _objectSpread({}, state, {\n        google_data: state.google_data.concat(action.payload.updatedEvents),\n        initialSync: true\n      });\n\n    case GET_GOOGLE_EVENTS_BEGIN:\n      return _objectSpread({}, state, {\n        beginAPI: true\n      });\n\n    case GET_GOOGLE_EVENTS_SUCCESS:\n      var newIds = action.payload.normalized_data.result.events;\n      var newEvents = action.payload.normalized_data.entities.events;\n      var newPayload = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = newIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n\n          if (!state.normalized_data.hasOwnProperty(key)) {\n            newPayload[key] = newEvents[key];\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      debugger;\n      return _objectSpread({}, state, {\n        google_data: state.google_data.concat(action.payload.data),\n        beginAPI: false\n      });\n\n    case GET_GOOGLE_EVENTS_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload.error,\n        beginAPI: false\n      });\n\n    case GET_OUTLOOK_EVENTS_SUCCESS:\n      return _objectSpread({}, state, {\n        outlook_data: action.payload.data\n      });\n\n    case GET_OUTLOOK_EVENTS_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload.error\n      });\n\n    case POST_GOOGLE_EVENT_SUCCESS:\n      return _objectSpread({}, state, {\n        google_data: state.google_data.concat(action.payload.data)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sham/big-calendar/src/reducers/events.js"],"names":["UPDATE_EVENTS","GET_GOOGLE_EVENTS_BEGIN","GET_GOOGLE_EVENTS_SUCCESS","GET_GOOGLE_EVENTS_FAILURE","GET_OUTLOOK_EVENTS_SUCCESS","GET_OUTLOOK_EVENTS_FAILURE","POST_GOOGLE_EVENT_SUCCESS","initialState","events","google_data","normalized_data","outlook_data","new_event","error","beginAPI","initialSync","eventsReducer","state","action","type","concat","payload","updatedEvents","newIds","result","newEvents","entities","newPayload","key","hasOwnProperty","data"],"mappings":";AAAA,SACSA,aADT,EAESC,uBAFT,EAGSC,yBAHT,EAISC,yBAJT,EAKSC,0BALT,EAMSC,0BANT,EAOSC,yBAPT,QAQO,kBARP;AAUA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,WAAW,EAAE,EAFM;AAGnBC,EAAAA,eAAe,EAAE,EAHE;AAInBC,EAAAA,YAAY,EAAE,EAJK;AAKnBC,EAAAA,SAAS,EAAE,EALQ;AAMnBC,EAAAA,KAAK,EAAE,EANY;AAOnBC,EAAAA,QAAQ,EAAE,KAPS;AAQnBC,EAAAA,WAAW,EAAE;AARM,CAArB;AAWA,eAAe,SAASC,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBV,YAAsB;AAAA,MAARW,MAAQ;;AAClE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKnB,aAAL;AACE,+BACKiB,KADL;AAEER,QAAAA,WAAW,EAAEQ,KAAK,CAACR,WAAN,CAAkBW,MAAlB,CAAyBF,MAAM,CAACG,OAAP,CAAeC,aAAxC,CAFf;AAGEP,QAAAA,WAAW,EAAE;AAHf;;AAKF,SAAKd,uBAAL;AACE,+BACKgB,KADL;AAEEH,QAAAA,QAAQ,EAAE;AAFZ;;AAIF,SAAKZ,yBAAL;AACE,UAAIqB,MAAM,GAAGL,MAAM,CAACG,OAAP,CAAeX,eAAf,CAA+Bc,MAA/B,CAAsChB,MAAnD;AACA,UAAIiB,SAAS,GAAGP,MAAM,CAACG,OAAP,CAAeX,eAAf,CAA+BgB,QAA/B,CAAwClB,MAAxD;AACA,UAAImB,UAAU,GAAG,EAAjB;AAHF;AAAA;AAAA;;AAAA;AAIE,6BAAeJ,MAAf,8HAAuB;AAAA,cAAfK,GAAe;;AACrB,cAAG,CAACX,KAAK,CAACP,eAAN,CAAsBmB,cAAtB,CAAqCD,GAArC,CAAJ,EAA+C;AAC7CD,YAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBH,SAAS,CAACG,GAAD,CAA3B;AACD;AACF;AARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASE;AACA,+BACKX,KADL;AAEER,QAAAA,WAAW,EAAEQ,KAAK,CAACR,WAAN,CAAkBW,MAAlB,CAAyBF,MAAM,CAACG,OAAP,CAAeS,IAAxC,CAFf;AAGEhB,QAAAA,QAAQ,EAAE;AAHZ;;AAKF,SAAKX,yBAAL;AACE,+BACKc,KADL;AAEEJ,QAAAA,KAAK,EAAEK,MAAM,CAACG,OAAP,CAAeR,KAFxB;AAGEC,QAAAA,QAAQ,EAAE;AAHZ;;AAKF,SAAKV,0BAAL;AACE,+BACKa,KADL;AAEEN,QAAAA,YAAY,EAAEO,MAAM,CAACG,OAAP,CAAeS;AAF/B;;AAIF,SAAKzB,0BAAL;AACE,+BACKY,KADL;AAEEJ,QAAAA,KAAK,EAAEK,MAAM,CAACG,OAAP,CAAeR;AAFxB;;AAIF,SAAKP,yBAAL;AACE,+BACKW,KADL;AAEER,QAAAA,WAAW,EAAEQ,KAAK,CAACR,WAAN,CAAkBW,MAAlB,CAAyBF,MAAM,CAACG,OAAP,CAAeS,IAAxC;AAFf;;AAIF;AACE,aAAOb,KAAP;AAjDJ;AAmDD","sourcesContent":["import {\n         UPDATE_EVENTS,\n         GET_GOOGLE_EVENTS_BEGIN,\n         GET_GOOGLE_EVENTS_SUCCESS,\n         GET_GOOGLE_EVENTS_FAILURE,\n         GET_OUTLOOK_EVENTS_SUCCESS,\n         GET_OUTLOOK_EVENTS_FAILURE,\n         POST_GOOGLE_EVENT_SUCCESS\n} from '../redux/actions';\n\nconst initialState = {\n  events: [],\n  google_data: [],\n  normalized_data: {},\n  outlook_data: [],\n  new_event: [],\n  error: '',\n  beginAPI: false,\n  initialSync: false\n}\n\nexport default function eventsReducer(state = initialState, action) {\n  switch(action.type) {\n    case UPDATE_EVENTS:\n      return {\n        ...state,\n        google_data: state.google_data.concat(action.payload.updatedEvents),\n        initialSync: true\n      }\n    case GET_GOOGLE_EVENTS_BEGIN:\n      return {\n        ...state,\n        beginAPI: true\n      }\n    case GET_GOOGLE_EVENTS_SUCCESS:\n      let newIds = action.payload.normalized_data.result.events;\n      let newEvents = action.payload.normalized_data.entities.events;\n      let newPayload = {};\n      for(let key of newIds) {\n        if(!state.normalized_data.hasOwnProperty(key)) {\n          newPayload[key] = newEvents[key];\n        }\n      }\n      debugger\n      return {\n        ...state,\n        google_data: state.google_data.concat(action.payload.data),\n        beginAPI: false,\n      }\n    case GET_GOOGLE_EVENTS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.error,\n        beginAPI: false\n      }\n    case GET_OUTLOOK_EVENTS_SUCCESS:\n      return {\n        ...state,\n        outlook_data: action.payload.data\n      }\n    case GET_OUTLOOK_EVENTS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.error\n      }\n    case POST_GOOGLE_EVENT_SUCCESS:\n      return {\n        ...state,\n        google_data: state.google_data.concat(action.payload.data)\n      }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}