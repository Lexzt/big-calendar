{"ast":null,"code":"/**\n * this plugin validates documents before they can be inserted into the RxCollection.\n * It's using is-my-json-valid as jsonschema-validator\n * @link https://github.com/mafintosh/is-my-json-valid\n */\nimport isMyJsonValid from 'is-my-json-valid';\nimport RxError from '../rx-error';\nimport { requestIdleCallbackIfAvailable } from '../util';\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n * @type {Object<string, any>}\n */\n\nvar validatorsCache = {};\n/**\n * returns the parsed validator from is-my-json-valid\n * @param {string} [schemaPath=''] if given, the schema for the sub-path is used\n * @\n */\n\nfunction _getValidator() {\n  var schemaPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var hash = this.hash;\n  if (!validatorsCache[hash]) validatorsCache[hash] = {};\n  var validatorsOfHash = validatorsCache[hash];\n\n  if (!validatorsOfHash[schemaPath]) {\n    var schemaPart = schemaPath === '' ? this.jsonID : this.getSchemaByObjectPath(schemaPath);\n\n    if (!schemaPart) {\n      throw RxError.newRxError('VD1', {\n        schemaPath: schemaPath\n      });\n    }\n\n    validatorsOfHash[schemaPath] = isMyJsonValid(schemaPart);\n  }\n\n  return validatorsOfHash[schemaPath];\n}\n/**\n * validates the given object against the schema\n * @param  {any} obj\n * @param  {String} [schemaPath=''] if given, the sub-schema will be validated\n * @throws {RxError} if not valid\n * @return {any} obj if validation successful\n */\n\n\nvar validate = function validate(obj) {\n  var schemaPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  var useValidator = this._getValidator(schemaPath);\n\n  var isValid = useValidator(obj);\n  if (isValid) return obj;else {\n    throw RxError.newRxError('VD2', {\n      errors: useValidator.errors,\n      schemaPath: schemaPath,\n      obj: obj,\n      schema: this.jsonID\n    });\n  }\n};\n\nvar runAfterSchemaCreated = function runAfterSchemaCreated(rxSchema) {\n  // pre-generate the isMyJsonValid-validator from the schema\n  requestIdleCallbackIfAvailable(function () {\n    rxSchema._getValidator();\n  });\n};\n\nexport var rxdb = true;\nexport var prototypes = {\n  /**\n   * set validate-function for the RxSchema.prototype\n   * @param {[type]} prototype of RxSchema\n   */\n  RxSchema: function RxSchema(proto) {\n    proto._getValidator = _getValidator;\n    proto.validate = validate;\n  }\n};\nexport var hooks = {\n  createRxSchema: runAfterSchemaCreated\n};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes,\n  hooks: hooks\n};","map":null,"metadata":{},"sourceType":"module"}