{"ast":null,"code":"/**\n * this plugin adds the json export/import capabilities to RxDB\n */\nimport { hash } from '../util';\nimport RxQuery from '../rx-query';\nimport RxError from '../rx-error';\nimport RxChangeEvent from '../rx-change-event';\n/**\n * @return {Promise}\n */\n\nvar dumpRxDatabase = function dumpRxDatabase() {\n  var _this = this;\n\n  var decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var collections = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var json = {\n    name: this.name,\n    instanceToken: this.token,\n    encrypted: false,\n    passwordHash: null,\n    collections: []\n  };\n\n  if (this.password) {\n    json.passwordHash = hash(this.password);\n    if (decrypted) json.encrypted = false;else json.encrypted = true;\n  }\n\n  var useCollections = Object.keys(this.collections).filter(function (colName) {\n    return !collections || collections.includes(colName);\n  }).filter(function (colName) {\n    return colName.charAt(0) !== '_';\n  }).map(function (colName) {\n    return _this.collections[colName];\n  });\n  return Promise.all(useCollections.map(function (col) {\n    return col.dump(decrypted);\n  })).then(function (cols) {\n    json.collections = cols;\n    return json;\n  });\n};\n\nvar importDumpRxDatabase = function importDumpRxDatabase(dump) {\n  var _this2 = this;\n  /**\n   * collections must be created before the import\n   * because we do not know about the other collection-settings here\n   */\n\n\n  var missingCollections = dump.collections.filter(function (col) {\n    return !_this2.collections[col.name];\n  }).map(function (col) {\n    return col.name;\n  });\n\n  if (missingCollections.length > 0) {\n    throw RxError.newRxError('JD1', {\n      missingCollections: missingCollections\n    });\n  }\n\n  return Promise.all(dump.collections.map(function (colDump) {\n    return _this2.collections[colDump.name].importDump(colDump);\n  }));\n};\n\nvar dumpRxCollection = function dumpRxCollection() {\n  var decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var encrypted = !decrypted;\n  var json = {\n    name: this.name,\n    schemaHash: this.schema.hash,\n    encrypted: false,\n    passwordHash: null,\n    docs: []\n  };\n\n  if (this.database.password && encrypted) {\n    json.passwordHash = hash(this.database.password);\n    json.encrypted = true;\n  }\n\n  var query = RxQuery.create('find', {}, this);\n  return this._pouchFind(query, null, encrypted).then(function (docs) {\n    json.docs = docs.map(function (docData) {\n      delete docData._rev;\n      return docData;\n    });\n    return json;\n  });\n};\n/**\n * @return {Promise}\n */\n\n\nvar importDumpRxCollection = function importDumpRxCollection(exportedJSON) {\n  var _this3 = this; // check schemaHash\n\n\n  if (exportedJSON.schemaHash !== this.schema.hash) {\n    throw RxError.newRxError('JD2', {\n      schemaHash: exportedJSON.schemaHash,\n      own: this.schema.hash\n    });\n  } // check if passwordHash matches own\n\n\n  if (exportedJSON.encrypted && exportedJSON.passwordHash !== hash(this.database.password)) {\n    throw RxError.newRxError('JD3', {\n      passwordHash: exportedJSON.passwordHash,\n      own: hash(this.database.password)\n    });\n  }\n\n  var importFns = exportedJSON.docs // decrypt\n  .map(function (doc) {\n    return _this3._crypter.decrypt(doc);\n  }) // validate schema\n  .map(function (doc) {\n    return _this3.schema.validate(doc);\n  }) // import\n  .map(function (doc) {\n    return _this3._pouchPut(doc).then(function () {\n      var primary = doc[_this3.schema.primaryPath]; // emit changeEvents\n\n      var emitEvent = RxChangeEvent.create('INSERT', _this3.database, _this3, null, doc);\n      emitEvent.data.doc = primary;\n\n      _this3.$emit(emitEvent);\n    });\n  });\n  return Promise.all(importFns);\n};\n\nexport var rxdb = true;\nexport var prototypes = {\n  RxDatabase: function RxDatabase(proto) {\n    proto.dump = dumpRxDatabase;\n    proto.importDump = importDumpRxDatabase;\n  },\n  RxCollection: function RxCollection(proto) {\n    proto.dump = dumpRxCollection;\n    proto.importDump = importDumpRxCollection;\n  }\n};\nexport var overwritable = {};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable\n};","map":null,"metadata":{},"sourceType":"module"}