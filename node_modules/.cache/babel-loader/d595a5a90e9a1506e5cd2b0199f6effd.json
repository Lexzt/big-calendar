{"ast":null,"code":"import _objectSpread from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { UPDATE_EVENTS, GET_GOOGLE_EVENTS_BEGIN, GET_GOOGLE_EVENTS_SUCCESS, GET_GOOGLE_EVENTS_FAILURE, GET_OUTLOOK_EVENTS_SUCCESS, GET_OUTLOOK_EVENTS_FAILURE, POST_GOOGLE_EVENT_SUCCESS } from '../redux/actions';\nvar initialState = {\n  events: [],\n  google_data: [],\n  outlook_data: [],\n  new_event: [],\n  error: '',\n  beginAPI: false,\n  initialSync: false\n};\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_EVENTS:\n      return _objectSpread({}, state, {\n        google_data: state.google_data.concat(action.payload.updatedEvents),\n        initialSync: true\n      });\n\n    case GET_GOOGLE_EVENTS_BEGIN:\n      return _objectSpread({}, state, {\n        beginAPI: true\n      });\n\n    case GET_GOOGLE_EVENTS_SUCCESS:\n      return _objectSpread({}, state, {\n        google_data: state.google_data.concat(action.payload.data),\n        beginAPI: false\n      });\n\n    case GET_GOOGLE_EVENTS_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload.error,\n        beginAPI: false\n      });\n\n    case GET_OUTLOOK_EVENTS_SUCCESS:\n      return _objectSpread({}, state, {\n        outlook_data: action.payload.data\n      });\n\n    case GET_OUTLOOK_EVENTS_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload.error\n      });\n\n    case POST_GOOGLE_EVENT_SUCCESS:\n      return _objectSpread({}, state, {\n        google_data: state.google_data.concat(action.payload.data)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sham/big-calendar/src/reducers/events.js"],"names":["UPDATE_EVENTS","GET_GOOGLE_EVENTS_BEGIN","GET_GOOGLE_EVENTS_SUCCESS","GET_GOOGLE_EVENTS_FAILURE","GET_OUTLOOK_EVENTS_SUCCESS","GET_OUTLOOK_EVENTS_FAILURE","POST_GOOGLE_EVENT_SUCCESS","initialState","events","google_data","outlook_data","new_event","error","beginAPI","initialSync","eventsReducer","state","action","type","concat","payload","updatedEvents","data"],"mappings":";AAAA,SACSA,aADT,EAESC,uBAFT,EAGSC,yBAHT,EAISC,yBAJT,EAKSC,0BALT,EAMSC,0BANT,EAOSC,yBAPT,QAQO,kBARP;AAUA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,WAAW,EAAE,EAFM;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,SAAS,EAAE,EAJQ;AAKnBC,EAAAA,KAAK,EAAE,EALY;AAMnBC,EAAAA,QAAQ,EAAE,KANS;AAOnBC,EAAAA,WAAW,EAAE;AAPM,CAArB;AAWA,eAAe,SAASC,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBT,YAAsB;AAAA,MAARU,MAAQ;;AAClE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKlB,aAAL;AACE,+BACKgB,KADL;AAEEP,QAAAA,WAAW,EAAEO,KAAK,CAACP,WAAN,CAAkBU,MAAlB,CAAyBF,MAAM,CAACG,OAAP,CAAeC,aAAxC,CAFf;AAGEP,QAAAA,WAAW,EAAE;AAHf;;AAKF,SAAKb,uBAAL;AACE,+BACKe,KADL;AAEEH,QAAAA,QAAQ,EAAE;AAFZ;;AAIF,SAAKX,yBAAL;AACE,+BACKc,KADL;AAEEP,QAAAA,WAAW,EAAEO,KAAK,CAACP,WAAN,CAAkBU,MAAlB,CAAyBF,MAAM,CAACG,OAAP,CAAeE,IAAxC,CAFf;AAGET,QAAAA,QAAQ,EAAE;AAHZ;;AAKF,SAAKV,yBAAL;AACE,+BACKa,KADL;AAEEJ,QAAAA,KAAK,EAAEK,MAAM,CAACG,OAAP,CAAeR,KAFxB;AAGEC,QAAAA,QAAQ,EAAE;AAHZ;;AAKF,SAAKT,0BAAL;AACE,+BACKY,KADL;AAEEN,QAAAA,YAAY,EAAEO,MAAM,CAACG,OAAP,CAAeE;AAF/B;;AAIF,SAAKjB,0BAAL;AACE,+BACKW,KADL;AAEEJ,QAAAA,KAAK,EAAEK,MAAM,CAACG,OAAP,CAAeR;AAFxB;;AAIF,SAAKN,yBAAL;AACE,+BACKU,KADL;AAEEP,QAAAA,WAAW,EAAEO,KAAK,CAACP,WAAN,CAAkBU,MAAlB,CAAyBF,MAAM,CAACG,OAAP,CAAeE,IAAxC;AAFf;;AAIF;AACE,aAAON,KAAP;AAxCJ;AA0CD","sourcesContent":["import {\n         UPDATE_EVENTS,\n         GET_GOOGLE_EVENTS_BEGIN,\n         GET_GOOGLE_EVENTS_SUCCESS,\n         GET_GOOGLE_EVENTS_FAILURE,\n         GET_OUTLOOK_EVENTS_SUCCESS,\n         GET_OUTLOOK_EVENTS_FAILURE,\n         POST_GOOGLE_EVENT_SUCCESS\n} from '../redux/actions';\n\nconst initialState = {\n  events: [],\n  google_data: [],\n  outlook_data: [],\n  new_event: [],\n  error: '',\n  beginAPI: false,\n  initialSync: false\n}\n\n\nexport default function eventsReducer(state = initialState, action) {\n  switch(action.type) {\n    case UPDATE_EVENTS:\n      return {\n        ...state,\n        google_data: state.google_data.concat(action.payload.updatedEvents),\n        initialSync: true\n      }\n    case GET_GOOGLE_EVENTS_BEGIN:\n      return {\n        ...state,\n        beginAPI: true\n      }\n    case GET_GOOGLE_EVENTS_SUCCESS:\n      return {\n        ...state,\n        google_data: state.google_data.concat(action.payload.data),\n        beginAPI: false\n      }\n    case GET_GOOGLE_EVENTS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.error,\n        beginAPI: false\n      }\n    case GET_OUTLOOK_EVENTS_SUCCESS:\n      return {\n        ...state,\n        outlook_data: action.payload.data\n      }\n    case GET_OUTLOOK_EVENTS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.error\n      }\n    case POST_GOOGLE_EVENT_SUCCESS:\n      return {\n        ...state,\n        google_data: state.google_data.concat(action.payload.data)\n      }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}