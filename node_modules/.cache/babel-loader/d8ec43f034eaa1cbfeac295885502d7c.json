{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n/**\n * this plugin allows delta-updates with mongo-like-syntax\n * It's using modifyjs internally\n * @link https://github.com/lgandecki/modifyjs\n */\n\nimport modifyjs from 'modifyjs';\nimport { clone } from '../util.js';\nexport function update(updateObj) {\n  var oldDocData = clone(this._data);\n  var newDocData = modifyjs(oldDocData, updateObj);\n  return this._saveData(newDocData, oldDocData);\n}\nexport function RxQueryUpdate(_x) {\n  return _RxQueryUpdate.apply(this, arguments);\n}\n\nfunction _RxQueryUpdate() {\n  _RxQueryUpdate = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(updateObj) {\n    var docs;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return this.exec();\n\n          case 2:\n            docs = _context.sent;\n\n            if (docs) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 5:\n            if (!Array.isArray(docs)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 8;\n            return Promise.all(docs.map(function (doc) {\n              return doc.update(updateObj);\n            }));\n\n          case 8:\n            _context.next = 12;\n            break;\n\n          case 10:\n            _context.next = 12;\n            return docs.update(updateObj);\n\n          case 12:\n            return _context.abrupt(\"return\", docs);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _RxQueryUpdate.apply(this, arguments);\n}\n\nexport var rxdb = true;\nexport var prototypes = {\n  RxDocument: function RxDocument(proto) {\n    proto.update = update;\n  },\n  RxQuery: function RxQuery(proto) {\n    proto.update = RxQueryUpdate;\n  }\n};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes\n};","map":null,"metadata":{},"sourceType":"module"}