{"ast":null,"code":"import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), mergeMap(function () {\n    var load = window.gapi.client.load('calendar', 'v3');\n    from(load).pipe(mergeMap(function () {\n      var syncToken = localStorage.getItem('sync');\n      var request;\n\n      if (syncToken == null) {\n        console.log('performing full sync');\n        request = window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        });\n      } else {\n        console.log('performing incremental sync');\n        request = window.gapi.client.calendar.events.list({\n          'calendarId': 'primary',\n          'syncToken': syncToken\n        });\n      }\n\n      from(request).pipe(map(function (resp) {\n        var result = [];\n        var results = new Promise(function (resolve, reject) {\n          fetchEvents(resp, result, resolve, reject);\n        });\n        debugger;\n        return duplicateAction();\n      }));\n    }));\n  }));\n};\n\nvar normalizeEvents = function normalizeEvents(response) {\n  var singleEvent = new schema.Entity('events');\n  var results = normalize({\n    events: response\n  }, {\n    events: [singleEvent]\n  });\n  return results;\n};\n\nvar fetchEvents = function fetchEvents(resp, items, resolve, reject) {\n  var newItems = items.concat(resp.result.items);\n  var pageToken = resp.nextPageToken;\n  var syncToken = resp.nextSyncToken;\n\n  if (pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'pageToken': pageToken\n    }).then(function (nextResp) {\n      return fetchEvents(nextResp, newItems, resolve, reject);\n    }).catch(function (e) {\n      if (e.code === 410) {\n        console.log('Invalid sync token, clearing event store and re-syncing.');\n        localStorage.deleteItem('sync');\n        window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        }).then(function (newResp) {\n          return fetchEvents(newResp, items, resolve, reject);\n        });\n      } else {\n        console.log(e);\n        reject('Something went wrong, Please refresh and try again');\n      }\n    });\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","beginGetEventsEpics","action$","pipe","load","window","gapi","client","syncToken","localStorage","getItem","request","console","log","calendar","events","list","resp","result","results","Promise","resolve","reject","fetchEvents","normalizeEvents","response","singleEvent","Entity","items","newItems","concat","pageToken","nextPageToken","nextSyncToken","undefined","then","nextResp","catch","e","code","deleteItem","newResp","setItem"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  mergeMap(() => {\n    let load = window.gapi.client.load('calendar', 'v3');\n    from(load).pipe(\n      mergeMap(() => {\n        let syncToken = localStorage.getItem('sync');\n        let request;\n        if(syncToken == null) {\n          console.log('performing full sync');\n          request =  window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary'\n          });\n        }\n        else {\n          console.log('performing incremental sync');\n          request = window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n            'syncToken': syncToken\n          });\n        }\n        from(request).pipe(\n          map(resp => {\n            let result = [];\n            const results = new Promise((resolve, reject) => {\n              fetchEvents(resp, result, resolve, reject);\n            })\n            debugger;\n            return duplicateAction();\n          })\n        )\n      })\n    )\n  })\n)\n\nconst normalizeEvents = (response) => {\n  let singleEvent = new schema.Entity('events');\n  let results = normalize({ events : response}, { events: [ singleEvent ]});\n  return results;\n}\n\nconst fetchEvents = (resp, items, resolve, reject) => {\n  const newItems = items.concat(resp.result.items);\n  let pageToken = resp.nextPageToken;\n  let syncToken = resp.nextSyncToken;\n  if(pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary',\n      'pageToken': pageToken\n    }).then(nextResp => fetchEvents(nextResp, newItems, resolve, reject))\n      .catch(e => {\n        if(e.code === 410) {\n          console.log('Invalid sync token, clearing event store and re-syncing.');\n          localStorage.deleteItem('sync');\n          window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n          }).then(newResp => fetchEvents(newResp, items, resolve, reject))\n        } else {\n          console.log(e);\n          reject('Something went wrong, Please refresh and try again');\n        }\n      })\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}