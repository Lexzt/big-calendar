{"ast":null,"code":"import _toConsumableArray from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Sameenhaja/big-calendar/src/calendar-container.js\";\nimport React, { Component } from 'react';\nimport Root from './containers/Root';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Switch, Route } from 'react-router-dom';\nimport CalendarEventForm from './calendar-event-form';\nimport ReactCalendarView from './react-calendar-view';\nimport moment from 'moment';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider, connect } from 'react-redux';\nimport eventsReducer from './redux/reducers';\nimport { loggerMiddleware } from './redux/middleware';\nimport { addNewEvent } from './redux/actions';\n\nvar CalendarContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CalendarContainer, _Component);\n\n  function CalendarContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CalendarContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CalendarContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      events: [{\n        allDay: false,\n        end: new Date('December 10, 2018 11:13:00'),\n        start: new Date('December 09, 2018 12:13:00'),\n        title: 'hi'\n      }, {\n        allDay: true,\n        end: new Date('December 05, 2018 11:13:00'),\n        start: new Date('December 05, 2018 11:13:00'),\n        title: 'All Day Event'\n      }]\n    };\n\n    _this.updateEventsList = function (event) {\n      _this.setState({\n        events: _toConsumableArray(_this.state.events).concat([{\n          allDay: false,\n          end: new Date(event.endParsed),\n          start: new Date(event.startParsed),\n          title: event.title\n        }])\n      });\n    };\n\n    _this.getEventsFromMove = function (events) {\n      _this.setState({\n        events: events\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CalendarContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n      var store = createStore(eventsReducer, composeEnhancers(applyMiddleware(loggerMiddleware)));\n      console.log(this.props.events);\n      return React.createElement(\"div\", {\n        className: \"calendar-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Provider, {\n        store: store,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render(props) {\n          return React.createElement(ReactCalendarView, Object.assign({}, props, {\n            eventsList: _this2.state.events,\n            pushEventsFromMove: _this2.getEventsFromMove,\n            pushEventsFromResize: _this2.getEventsFromResize,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/:start/:end\",\n        render: function render(props) {\n          return React.createElement(CalendarEventForm, Object.assign({}, props, {\n            updateEvents: _this2.updateEventsList,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return CalendarContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    events: state.events\n  };\n};\n\nvar mapDispatchToProps = {\n  addNewEvent: addNewEvent\n};\nexport default CalendarContainer;","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/calendar-container.js"],"names":["React","Component","Root","BrowserRouter","Router","Switch","Route","CalendarEventForm","ReactCalendarView","moment","createStore","applyMiddleware","compose","Provider","connect","eventsReducer","loggerMiddleware","addNewEvent","CalendarContainer","state","events","allDay","end","Date","start","title","updateEventsList","event","setState","endParsed","startParsed","getEventsFromMove","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","console","log","props","getEventsFromResize","mapStateToProps","mapDispatchToProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,aAAlC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,WAAT,QAA4B,iBAA5B;;IAGMC,iB;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,MAAM,EAAE,KADV;AAEEC,QAAAA,GAAG,EAAE,IAAIC,IAAJ,CAAS,4BAAT,CAFP;AAGEC,QAAAA,KAAK,EAAE,IAAID,IAAJ,CAAS,4BAAT,CAHT;AAIEE,QAAAA,KAAK,EAAE;AAJT,OADM,EAON;AACEJ,QAAAA,MAAM,EAAE,IADV;AAEEC,QAAAA,GAAG,EAAE,IAAIC,IAAJ,CAAS,4BAAT,CAFP;AAGEC,QAAAA,KAAK,EAAE,IAAID,IAAJ,CAAS,4BAAT,CAHT;AAIEE,QAAAA,KAAK,EAAE;AAJT,OAPM;AADF,K;;UAiBRC,gB,GAAmB,UAACC,KAAD,EAAW;AAC1B,YAAKC,QAAL,CAAc;AACZR,QAAAA,MAAM,qBACD,MAAKD,KAAL,CAAWC,MADV,UAEJ;AACEC,UAAAA,MAAM,EAAE,KADV;AAEEC,UAAAA,GAAG,EAAE,IAAIC,IAAJ,CAASI,KAAK,CAACE,SAAf,CAFP;AAGEL,UAAAA,KAAK,EAAE,IAAID,IAAJ,CAASI,KAAK,CAACG,WAAf,CAHT;AAIEL,UAAAA,KAAK,EAAEE,KAAK,CAACF;AAJf,SAFI;AADM,OAAd;AAWH,K;;UAEDM,iB,GAAoB,UAACX,MAAD,EAAY;AAC9B,YAAKQ,QAAL,CAAc;AACZR,QAAAA,MAAM,EAAEA;AADI,OAAd;AAGD,K;;;;;;;6BAEQ;AAAA;;AACP,UAAMY,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CtB,OAAxE;AACA,UAAMuB,KAAK,GAAGzB,WAAW,CAACK,aAAD,EAAgBiB,gBAAgB,CAACrB,eAAe,CAACK,gBAAD,CAAhB,CAAhC,CAAzB;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWlB,MAAvB;AACA,aACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAEe,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,KAAK,MADP;AACQ,QAAA,IAAI,EAAC,GADb;AAEE,QAAA,MAAM,EAAE,gBAACG,KAAD;AAAA,iBACN,oBAAC,iBAAD,oBACMA,KADN;AAEE,YAAA,UAAU,EAAE,MAAI,CAACnB,KAAL,CAAWC,MAFzB;AAGE,YAAA,kBAAkB,EAAE,MAAI,CAACW,iBAH3B;AAIE,YAAA,oBAAoB,EAAE,MAAI,CAACQ,mBAJ7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADM;AAAA,SAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAWE,oBAAC,KAAD;AACG,QAAA,IAAI,EAAC,cADR;AAEG,QAAA,MAAM,EAAE,gBAACD,KAAD;AAAA,iBACN,oBAAC,iBAAD,oBACOA,KADP;AAEG,YAAA,YAAY,EAAE,MAAI,CAACZ,gBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADM;AAAA,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CADF,CADF,CADA,CADF;AA4BD;;;;EAtE6BzB,S;;AAyEhC,IAAMuC,eAAe,GAAG,SAAlBA,eAAkB,CAAArB,KAAK,EAAI;AAC/B,SAAO;AACLC,IAAAA,MAAM,EAAED,KAAK,CAACC;AADT,GAAP;AAGD,CAJD;;AAMA,IAAMqB,kBAAkB,GAAG;AAAExB,EAAAA,WAAW,EAAXA;AAAF,CAA3B;AAEA,eAAeC,iBAAf","sourcesContent":["import React, { Component } from 'react';\nimport Root from './containers/Root';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Switch, Route } from 'react-router-dom';\nimport CalendarEventForm from './calendar-event-form';\nimport ReactCalendarView from './react-calendar-view';\nimport moment from 'moment';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider, connect } from 'react-redux';\nimport eventsReducer from './redux/reducers';\nimport { loggerMiddleware } from './redux/middleware';\nimport { addNewEvent } from './redux/actions';\n\n\nclass CalendarContainer extends Component {\n  state = {\n    events: [\n      {\n        allDay: false,\n        end: new Date('December 10, 2018 11:13:00'),\n        start: new Date('December 09, 2018 12:13:00'),\n        title: 'hi',\n      },\n      {\n        allDay: true,\n        end: new Date('December 05, 2018 11:13:00'),\n        start: new Date('December 05, 2018 11:13:00'),\n        title: 'All Day Event',\n      }\n    ]\n  };\n\n  updateEventsList = (event) => {\n      this.setState({\n        events: [\n          ...this.state.events,\n          {\n            allDay: false,\n            end: new Date(event.endParsed),\n            start: new Date(event.startParsed),\n            title: event.title,\n          },\n        ],\n      })\n  }\n\n  getEventsFromMove = (events) => {\n    this.setState({\n      events: events\n    })\n  }\n\n  render() {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    const store = createStore(eventsReducer, composeEnhancers(applyMiddleware(loggerMiddleware)));\n    console.log(this.props.events);\n    return (\n      <div className=\"calendar-container\">\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route\n              exact path=\"/\"\n              render={(props) =>\n                <ReactCalendarView\n                  {...props}\n                  eventsList={this.state.events}\n                  pushEventsFromMove={this.getEventsFromMove}\n                  pushEventsFromResize={this.getEventsFromResize}\n                />}\n            />\n            <Route\n               path=\"/:start/:end\"\n               render={(props) =>\n                 <CalendarEventForm\n                    {...props}\n                    updateEvents={this.updateEventsList}\n                 />}\n            />\n          </Switch>\n        </Router>\n        </Provider>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    events: state.events,\n  }\n}\n\nconst mapDispatchToProps = { addNewEvent }\n\nexport default CalendarContainer\n"]},"metadata":{},"sourceType":"module"}