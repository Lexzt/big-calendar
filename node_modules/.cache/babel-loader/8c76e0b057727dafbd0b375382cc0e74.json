{"ast":null,"code":"import { createLogger } from 'redux-logger';\nimport axios from 'axios';\nexport var loggerMiddleware = createLogger();\nvar CALENDAR_ID = 'shamsheer619@gmail.com';\n\nfunction googleCalendarEvents() {\n  return window.gapi.client.request({\n    'path': \"https://www.googleapis.com/calendar/v3/calendars/\".concat(CALENDAR_ID, \"/events\")\n  }).then(function (resp) {\n    var events = resp.result.items;\n    console.log(events);\n  }, function (reason) {\n    console.log(reason);\n  });\n}\n\nfunction getUserEvents() {\n  var accessToken = window.localStorage.getItem('at');\n\n  if (accessToken) {\n    // Create a Graph client\n    var client = MicrosoftGraph.Client.init({\n      authProvider: function authProvider(done) {\n        // Just return the token\n        done(null, accessToken);\n      }\n    }); // Get the 10 newest events\n\n    client.api('/me/events').top(10).select('subject,start,end,createdDateTime').orderby('createdDateTime DESC').get(function (err, res) {\n      if (err) {\n        console.log(err);\n      } else {\n        console.log(res.value);\n      }\n    });\n  } else {\n    var error = {\n      responseText: 'Could not retrieve access token'\n    };\n    callback(null, error);\n  }\n}\n\nexport var apiMiddleware = function apiMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'GET_GOOGLE_EVENTS') {\n        googleCalendarEvents();\n      }\n\n      if (action.type == 'GET_OUTLOOK_EVENTS') {\n        var url = action.payload.url;\n        getUserEvents();\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/redux/middleware.js"],"names":["createLogger","axios","loggerMiddleware","CALENDAR_ID","googleCalendarEvents","window","gapi","client","request","then","resp","events","result","items","console","log","reason","getUserEvents","accessToken","localStorage","getItem","MicrosoftGraph","Client","init","authProvider","done","api","top","select","orderby","get","err","res","value","error","responseText","callback","apiMiddleware","store","next","action","type","url","payload"],"mappings":"AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAMC,gBAAgB,GAAGF,YAAY,EAArC;AAGP,IAAMG,WAAW,GAAG,wBAApB;;AAEA,SAASC,oBAAT,GAAgC;AAC9B,SAAOC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,OAAnB,CAA2B;AAC5B,uEAA4DL,WAA5D;AAD4B,GAA3B,EAEAM,IAFA,CAEK,UAAAC,IAAI,EAAI;AAChB,QAAIC,MAAM,GAAGD,IAAI,CAACE,MAAL,CAAYC,KAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACD,GALI,EAKF,UAACK,MAAD,EAAY;AACbF,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACD,GAPI,CAAP;AAQD;;AAED,SAASC,aAAT,GAAyB;AACvB,MAAMC,WAAW,GAAGb,MAAM,CAACc,YAAP,CAAoBC,OAApB,CAA4B,IAA5B,CAApB;;AACE,MAAIF,WAAJ,EAAiB;AACf;AACA,QAAIX,MAAM,GAAGc,cAAc,CAACC,MAAf,CAAsBC,IAAtB,CAA2B;AACtCC,MAAAA,YAAY,EAAE,sBAACC,IAAD,EAAU;AACtB;AACAA,QAAAA,IAAI,CAAC,IAAD,EAAOP,WAAP,CAAJ;AACD;AAJqC,KAA3B,CAAb,CAFe,CASf;;AACAX,IAAAA,MAAM,CACHmB,GADH,CACO,YADP,EAEGC,GAFH,CAEO,EAFP,EAGGC,MAHH,CAGU,mCAHV,EAIGC,OAJH,CAIW,sBAJX,EAKGC,GALH,CAKO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,UAAID,GAAJ,EAAS;AACPjB,QAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACD,OAFD,MAEO;AACLjB,QAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAG,CAACC,KAAhB;AACD;AACF,KAXH;AAYD,GAtBD,MAsBO;AACL,QAAIC,KAAK,GAAG;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAZ;AACAC,IAAAA,QAAQ,CAAC,IAAD,EAAOF,KAAP,CAAR;AACD;AACJ;;AAGD,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtD,UAAGA,MAAM,CAACC,IAAP,KAAgB,mBAAnB,EAAwC;AACtCrC,QAAAA,oBAAoB;AACrB;;AACD,UAAGoC,MAAM,CAACC,IAAP,IAAe,oBAAlB,EAAwC;AACtC,YAAMC,GAAG,GAAGF,MAAM,CAACG,OAAP,CAAeD,GAA3B;AACAzB,QAAAA,aAAa;AACd;;AACD,aAAOsB,IAAI,CAACC,MAAD,CAAX;AACD,KATyC;AAAA,GAAR;AAAA,CAA3B","sourcesContent":["import { createLogger } from 'redux-logger';\nimport axios from 'axios';\nexport const loggerMiddleware = createLogger();\n\n\nconst CALENDAR_ID = 'shamsheer619@gmail.com';\n\nfunction googleCalendarEvents() {\n  return window.gapi.client.request({\n        'path': `https://www.googleapis.com/calendar/v3/calendars/${CALENDAR_ID}/events`,\n      }).then(resp => {\n      let events = resp.result.items;\n      console.log(events);\n    }, (reason) => {\n      console.log(reason);\n    });\n}\n\nfunction getUserEvents() {\n  const accessToken = window.localStorage.getItem('at');\n    if (accessToken) {\n      // Create a Graph client\n      var client = MicrosoftGraph.Client.init({\n        authProvider: (done) => {\n          // Just return the token\n          done(null, accessToken);\n        }\n      });\n\n      // Get the 10 newest events\n      client\n        .api('/me/events')\n        .top(10)\n        .select('subject,start,end,createdDateTime')\n        .orderby('createdDateTime DESC')\n        .get((err, res) => {\n          if (err) {\n            console.log(err);\n          } else {\n            console.log(res.value);\n          }\n        });\n    } else {\n      var error = { responseText: 'Could not retrieve access token' };\n      callback(null, error);\n    }\n}\n\n\nexport const apiMiddleware = store => next => action => {\n  if(action.type === 'GET_GOOGLE_EVENTS') {\n    googleCalendarEvents();\n  }\n  if(action.type == 'GET_OUTLOOK_EVENTS') {\n    const url = action.payload.url;\n    getUserEvents();\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}