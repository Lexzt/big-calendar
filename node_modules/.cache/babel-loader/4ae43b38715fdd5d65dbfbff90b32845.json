{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar fetchEvents = function fetchEvents(request, items, resolve, reject) {\n  request.execute(function (resp) {\n    var newItems = items.concat(resp.result.items);\n    var pageToken = resp.nextPageToken;\n    var syncToken = resp.nextSyncToken; //debugger\n\n    if (pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      localStorage.setItem('sync', syncToken);\n      resolve(newItems);\n    }\n  }, function (error) {\n    if (error.code === 410) {\n      console.log('Invalid sync token, clearing event store and re-syncing.');\n      localStorage.deleteItem('sync');\n      var newRequest = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary'\n      });\n      fetchEvents(newRequest, items, resolve, reject);\n    } else {\n      console.log(error);\n      reject('Something went wrong, Please refresh and try again');\n    }\n  });\n};\n\nexport var eventsMiddleware = function eventsMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'GET_EVENTS_BEGIN') {\n        window.gapi.client.load('calendar', 'v3', function () {\n          var request = window.gapi.client.calendar.events.list({\n            'calendarId': 'primary'\n          });\n          var syncToken = localStorage.getItem('sync');\n\n          if (syncToken == null) {\n            console.log(\"Performing full sync\");\n          } else {\n            console.log(\"Performing incremental sync\");\n            request = window.gapi.client.calendar.events.list({\n              'calendarId': 'primary',\n              'syncToken': syncToken\n            });\n          }\n\n          var result = [];\n          new Promise(function (resolve, reject) {\n            fetchEvents(request, result, resolve, reject);\n          }).then(\n          /*#__PURE__*/\n          function () {\n            var _ref = _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee(response) {\n              var myData, singleEvent, mySchema, normalizedResults;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      myData = {\n                        events: response\n                      };\n                      singleEvent = new schema.Entity('events');\n                      mySchema = {\n                        events: [singleEvent]\n                      };\n                      normalizedResults = normalize(myData, mySchema);\n                      next({\n                        type: 'GET_EVENTS_SUCCESS',\n                        payload: {\n                          data: response,\n                          normalData: normalizedResults\n                        }\n                      });\n\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee, this);\n            }));\n\n            return function (_x) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n        });\n      }\n\n      if (action.type === 'POST_GOOGLE_EVENT_BEGIN') {\n        var calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n        }; //deprecated function: take note\n\n        window.gapi.client.load('calendar', 'v3', function () {\n          var request = window.gapi.client.calendar.events.insert(calendarObject);\n          request.execute(function (resp) {\n            storeEvent(resp);\n            next({\n              type: 'POST_GOOGLE_EVENT_SUCCESS',\n              payload: resp\n            }, function (error) {\n              next({\n                type: 'POST_GOOGLE_EVENT_FAILURE',\n                payload: error\n              });\n            });\n          });\n        });\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/middleware/events.js"],"names":["fetchEvents","request","items","resolve","reject","execute","resp","newItems","concat","result","pageToken","nextPageToken","syncToken","nextSyncToken","undefined","nextRequest","window","gapi","client","calendar","events","list","localStorage","setItem","error","code","console","log","deleteItem","newRequest","eventsMiddleware","store","next","action","type","load","getItem","Promise","then","response","myData","singleEvent","schema","Entity","mySchema","normalizedResults","normalize","payload","data","normalData","calendarObject","insert","storeEvent"],"mappings":"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","sourcesContent":["const fetchEvents = (request, items, resolve, reject) => {\n    request.execute((resp) => {\n    const newItems = items.concat(resp.result.items);\n    let pageToken = resp.nextPageToken;\n    let syncToken = resp.nextSyncToken;\n    //debugger\n    if(pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      localStorage.setItem('sync', syncToken);\n      resolve(newItems);\n    }\n  }, (error) => {\n    if(error.code === 410) {\n      console.log('Invalid sync token, clearing event store and re-syncing.');\n      localStorage.deleteItem('sync');\n      var newRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      fetchEvents(newRequest, items, resolve, reject);\n    } else {\n      console.log(error);\n      reject('Something went wrong, Please refresh and try again');\n    }\n  });\n}\n\nexport const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n              normalData: normalizedResults\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_GOOGLE_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          storeEvent(resp);\n          next({\n            type: 'POST_GOOGLE_EVENT_SUCCESS',\n            payload: resp\n          }, (error) => {\n            next({\n              type: 'POST_GOOGLE_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}