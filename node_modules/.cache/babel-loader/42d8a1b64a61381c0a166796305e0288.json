{"ast":null,"code":"import { createLogger } from 'redux-logger';\nimport axios from 'axios';\nexport var loggerMiddleware = createLogger();\nexport var apiMiddleware = function apiMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.meta.api_status === 'REQUEST') {\n        next({\n          type: action.type + '_BEGIN'\n        });\n\n        if (action.meta.call === 'POST') {\n          return axios({\n            url: action.payload.url,\n            method: 'post',\n            data: {\n              body: action.payload.value\n            },\n            auth: {\n              username: 'sham-sheer',\n              password: 'shamSHEER321'\n            }\n          }).then(function (resp) {\n            return next({\n              type: action.type + '_SUCCESS',\n              payload: {\n                data: resp\n              }\n            });\n          }).catch(function (error) {\n            return next({\n              type: action.type + '_FAILURE',\n              payload: {\n                error: error\n              }\n            });\n          });\n        }\n\n        if (action.meta.call === 'GET') {\n          return fetch(action.payload.url).then(function (resp) {\n            return resp.json();\n          }).then(function (respJSON) {\n            return next({\n              type: action.type + '_SUCCESS',\n              payload: {\n                data: respJSON,\n                isFetching: false\n              }\n            });\n          }).catch(function (error) {\n            return next({\n              type: action.type + '_FAILURE',\n              payload: {\n                error: error,\n                isFetching: false\n              }\n            });\n          });\n        }\n\n        if (action.meta.call === 'LOGIN') {\n          return axios.post(action.payload.url).then(function (resp) {\n            return next({\n              type: action.type + '_SUCCESS',\n              payload: {\n                data: resp\n              }\n            });\n          }).catch(function (error) {\n            return next({\n              type: action.type + '_FAILURE',\n              payload: {\n                error: error\n              }\n            });\n          });\n        }\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/redux/middleware.js"],"names":["createLogger","axios","loggerMiddleware","apiMiddleware","store","next","action","meta","api_status","type","call","url","payload","method","data","body","value","auth","username","password","then","resp","catch","error","fetch","json","respJSON","isFetching","post"],"mappings":"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","sourcesContent":["import { createLogger } from 'redux-logger';\nimport axios from 'axios';\n\nexport const loggerMiddleware = createLogger();\n\n\nexport const apiMiddleware = store => next => action => {\n  if(action.meta.api_status === 'REQUEST') {\n    next({\n      type: action.type + '_BEGIN',\n    })\n    if(action.meta.call === 'POST') {\n      return axios({\n        url: action.payload.url,\n        method: 'post',\n        data: {\n          body: action.payload.value\n        },\n        auth: {\n          username: 'sham-sheer',\n          password: 'shamSHEER321'\n        }\n      })\n      .then(resp => next({\n        type: action.type + '_SUCCESS',\n        payload: {\n          data: resp,\n        }\n        })\n      )\n      .catch(error => next({\n        type: action.type + '_FAILURE',\n        payload: {\n          error\n        }\n      }));\n    }\n    if(action.meta.call === 'GET') {\n      return fetch(action.payload.url)\n      .then(resp => resp.json())\n      .then(respJSON => next({\n        type: action.type + '_SUCCESS',\n        payload: {\n          data: respJSON,\n          isFetching: false\n          }\n        })\n      )\n      .catch(error => next({\n        type: action.type + '_FAILURE',\n        payload: {\n          error,\n          isFetching: false\n          }\n        })\n      );\n    }\n    if(action.meta.call === 'LOGIN') {\n      return axios.post(action.payload.url)\n      .then(resp => next({\n        type: action.type + '_SUCCESS',\n        payload: {\n          data: resp,\n        }\n        })\n      )\n      .catch(error => next({\n        type: action.type + '_FAILURE',\n        payload: {\n          error\n        }\n      }));\n    }\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}