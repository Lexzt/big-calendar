{"ast":null,"code":"\"use strict\";\n/**\r\n * @module LargeFileUploadTask\r\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Range_1 = require(\"../Range\");\n\n;\n/**\r\n * Class representing LargeFileUploadTask\r\n */\n\nvar LargeFileUploadTask =\n/** @class */\nfunction () {\n  /**\r\n   * Constructs a LargeFileUploadTask\r\n   * @param {Client} client - The GraphClient instance\r\n   * @param {FileObject} file - The FileObject holding details of a file that needs to be uploaded\r\n   * @param {LargeFileUploadSession} uploadSession - The upload session to which the upload has to be done\r\n   * @param {LargeFileUploadTaskOptions} options - The upload task options\r\n   */\n  function LargeFileUploadTask(client, file, uploadSession, options) {\n    /**\r\n    * Default value for the rangeSize\r\n    */\n    this.DEFAULT_FILE_SIZE = 5 * 1024 * 1024;\n    var self = this;\n    self.client = client;\n    self.file = file;\n\n    if (options.rangeSize === undefined) {\n      options.rangeSize = self.DEFAULT_FILE_SIZE;\n    }\n\n    self.options = options;\n    self.uploadSession = uploadSession;\n    self.nextRange = new Range_1.Range(0, self.options.rangeSize - 1);\n  }\n  /**\r\n   * Parses given range string to the Range instance\r\n   * @param {string[]} ranges - The ranges value\r\n   * @return The range instance\r\n   */\n\n\n  LargeFileUploadTask.prototype.parseRange = function (ranges) {\n    var rangeStr = ranges[0];\n\n    if (typeof rangeStr === \"undefined\" || rangeStr === \"\") {\n      return new Range_1.Range();\n    }\n\n    var firstRange = rangeStr.split(\"-\"),\n        minVal = parseInt(firstRange[0]),\n        maxVal = parseInt(firstRange[1]);\n\n    if (Number.isNaN(maxVal)) {\n      maxVal = this.file.size - 1;\n    }\n\n    return new Range_1.Range(minVal, maxVal);\n  };\n  /**\r\n   * Updates the expiration date and the next range\r\n   * @param {UploadStatusResponse} response - The response of the upload status\r\n   */\n\n\n  LargeFileUploadTask.prototype.updateTaskStatus = function (response) {\n    var self = this;\n    self.uploadSession.expiry = new Date(response.expirationDateTime);\n    self.nextRange = self.parseRange(response.nextExpectedRanges);\n  };\n  /**\r\n   * Gets next range that needs to be uploaded\r\n   * @return The range instance\r\n   */\n\n\n  LargeFileUploadTask.prototype.getNextRange = function () {\n    var self = this;\n\n    if (self.nextRange.minValue === -1) {\n      return self.nextRange;\n    }\n\n    var minVal = self.nextRange.minValue,\n        maxValue = minVal + self.options.rangeSize - 1;\n\n    if (maxValue >= self.file.size) {\n      maxValue = self.file.size - 1;\n    }\n\n    return new Range_1.Range(minVal, maxValue);\n  };\n  /**\r\n   * Slices the file content to the given range\r\n   * @param {Range} range - The range value\r\n   * @return The sliced ArrayBuffer or Blob\r\n   */\n\n\n  LargeFileUploadTask.prototype.sliceFile = function (range) {\n    var blob = this.file.content.slice(range.minValue, range.maxValue + 1);\n    return blob;\n  };\n  /**\r\n   * @async\r\n   * Uploads file to the server in a sequential order by slicing the file\r\n   * @return The promise resolves to uploaded response\r\n   */\n\n\n  LargeFileUploadTask.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var self, nextRange, err, fileSlice, response, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            self = this;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n\n            _a.label = 2;\n\n          case 2:\n            if (!true) return [3\n            /*break*/\n            , 4];\n            nextRange = self.getNextRange();\n\n            if (nextRange.maxValue === -1) {\n              err = new Error(\"Task with which you are trying to upload is already completed, Please check for your uploaded file\");\n              err.name = \"Invalid Session\";\n              throw err;\n            }\n\n            fileSlice = self.sliceFile(nextRange);\n            return [4\n            /*yield*/\n            , self.uploadSlice(fileSlice, nextRange, self.file.size)];\n\n          case 3:\n            response = _a.sent(); // Upon completion of upload process incase of onedrive, driveItem is returned, which contains id\n\n            if (response.id !== undefined) {\n              return [2\n              /*return*/\n              , response];\n            } else {\n              self.updateTaskStatus(response);\n            }\n\n            return [3\n            /*break*/\n            , 2];\n\n          case 4:\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            err_1 = _a.sent();\n            throw err_1;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * @async\r\n   * Uploads given slice to the server\r\n   * @param {ArrayBuffer | Blob | File} fileSlice - The file slice\r\n   * @param {Range} range - The range value\r\n   * @param {number} totalSize - The total size of a complete file\r\n   */\n\n\n  LargeFileUploadTask.prototype.uploadSlice = function (fileSlice, range, totalSize) {\n    return __awaiter(this, void 0, void 0, function () {\n      var self, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            self = this;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , self.client.api(self.uploadSession.url).headers({\n              \"Content-Length\": \"\" + (range.maxValue - range.minValue + 1),\n              \"Content-Range\": \"bytes \" + range.minValue + \"-\" + range.maxValue + \"/\" + totalSize\n            }).put(fileSlice)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            err_2 = _a.sent();\n            throw err_2;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * @async\r\n   * Deletes upload session in the server\r\n   * @return The promise resolves to cancelled response\r\n   */\n\n\n  LargeFileUploadTask.prototype.cancel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var self, err_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            self = this;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , self.client.api(self.uploadSession.url).delete()];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            err_3 = _a.sent();\n            throw err_3;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * @async\r\n   * Gets status for the upload session\r\n   * @return The promise resolves to the status enquiry response\r\n   */\n\n\n  LargeFileUploadTask.prototype.getStatus = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var self, response, err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            self = this;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , self.client.api(self.uploadSession.url).get()];\n\n          case 2:\n            response = _a.sent();\n            self.updateTaskStatus(response);\n            return [2\n            /*return*/\n            , response];\n\n          case 3:\n            err_4 = _a.sent();\n            throw err_4;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * @async\r\n   * Resumes upload session and continue uploading the file from the last sent range\r\n   * @return The promise resolves to the uploaded response\r\n   */\n\n\n  LargeFileUploadTask.prototype.resume = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var self, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            self = this;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , self.getStatus()];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , self.upload()];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 4:\n            err_5 = _a.sent();\n            throw err_5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return LargeFileUploadTask;\n}();\n\nexports.LargeFileUploadTask = LargeFileUploadTask;","map":null,"metadata":{},"sourceType":"script"}