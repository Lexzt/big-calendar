{"ast":null,"code":"import { createLogger } from 'redux-logger';\nimport axios from 'axios';\nexport var loggerMiddleware = createLogger();\nvar CALENDAR_ID = 'shamsheer619@gmail.com';\n\nvar MicrosoftGraph = require(\"@microsoft/microsoft-graph-client\");\n\nfunction googleCalendarEvents() {\n  return window.gapi.client.request({\n    'path': \"https://www.googleapis.com/calendar/v3/calendars/\".concat(CALENDAR_ID, \"/events\")\n  }).then(function (resp) {\n    var events = resp.result.items;\n    console.log(events);\n  }, function (reason) {\n    console.log(reason);\n  });\n}\n\nfunction outlookCalendarEvents() {\n  return MicrosoftGraph.Client.init({\n    authProvider: function authProvider(done) {\n      done(null, window.localStorage.getItem('at'));\n    }\n  }).api('/me/events').top(10).select('subject,start,end,createdDatetime').orderby('createdDatetime DESC').get(function (err, res) {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(res.value);\n    }\n  });\n}\n\nexport var apiMiddleware = function apiMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'GET_GOOGLE_EVENTS') {\n        googleCalendarEvents();\n      }\n\n      if (action.type == 'GET_OUTLOOK_EVENTS') {\n        var url = action.payload.url;\n        outlookCalendarEvents();\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/redux/middleware.js"],"names":["createLogger","axios","loggerMiddleware","CALENDAR_ID","MicrosoftGraph","require","googleCalendarEvents","window","gapi","client","request","then","resp","events","result","items","console","log","reason","outlookCalendarEvents","Client","init","authProvider","done","localStorage","getItem","api","top","select","orderby","get","err","res","value","apiMiddleware","store","next","action","type","url","payload"],"mappings":"AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAMC,gBAAgB,GAAGF,YAAY,EAArC;AAGP,IAAMG,WAAW,GAAG,wBAApB;;AACA,IAAMC,cAAc,GAAGC,OAAO,CAAC,mCAAD,CAA9B;;AAEA,SAASC,oBAAT,GAAgC;AAC9B,SAAOC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,OAAnB,CAA2B;AAC5B,uEAA4DP,WAA5D;AAD4B,GAA3B,EAEAQ,IAFA,CAEK,UAAAC,IAAI,EAAI;AAChB,QAAIC,MAAM,GAAGD,IAAI,CAACE,MAAL,CAAYC,KAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACD,GALI,EAKF,UAACK,MAAD,EAAY;AACbF,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACD,GAPI,CAAP;AAQD;;AAED,SAASC,qBAAT,GAAiC;AAC/B,SAAOf,cAAc,CAACgB,MAAf,CAAsBC,IAAtB,CAA2B;AAChCC,IAAAA,YAAY,EAAE,sBAACC,IAAD,EAAU;AACtBA,MAAAA,IAAI,CAAC,IAAD,EAAOhB,MAAM,CAACiB,YAAP,CAAoBC,OAApB,CAA4B,IAA5B,CAAP,CAAJ;AACD;AAH+B,GAA3B,EAIJC,GAJI,CAIA,YAJA,EAKJC,GALI,CAKA,EALA,EAMJC,MANI,CAMG,mCANH,EAOJC,OAPI,CAOI,sBAPJ,EAQJC,GARI,CAQA,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,QAAID,GAAJ,EAAS;AACPf,MAAAA,OAAO,CAACC,GAAR,CAAYc,GAAZ;AACD,KAFD,MAEO;AACLf,MAAAA,OAAO,CAACC,GAAR,CAAYe,GAAG,CAACC,KAAhB;AACD;AACF,GAdI,CAAP;AAeD;;AAGD,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtD,UAAGA,MAAM,CAACC,IAAP,KAAgB,mBAAnB,EAAwC;AACtChC,QAAAA,oBAAoB;AACrB;;AACD,UAAG+B,MAAM,CAACC,IAAP,IAAe,oBAAlB,EAAwC;AACtC,YAAMC,GAAG,GAAGF,MAAM,CAACG,OAAP,CAAeD,GAA3B;AACApB,QAAAA,qBAAqB;AACtB;;AACD,aAAOiB,IAAI,CAACC,MAAD,CAAX;AACD,KATyC;AAAA,GAAR;AAAA,CAA3B","sourcesContent":["import { createLogger } from 'redux-logger';\nimport axios from 'axios';\nexport const loggerMiddleware = createLogger();\n\n\nconst CALENDAR_ID = 'shamsheer619@gmail.com';\nconst MicrosoftGraph = require(\"@microsoft/microsoft-graph-client\");\n\nfunction googleCalendarEvents() {\n  return window.gapi.client.request({\n        'path': `https://www.googleapis.com/calendar/v3/calendars/${CALENDAR_ID}/events`,\n      }).then(resp => {\n      let events = resp.result.items;\n      console.log(events);\n    }, (reason) => {\n      console.log(reason);\n    });\n}\n\nfunction outlookCalendarEvents() {\n  return MicrosoftGraph.Client.init({\n    authProvider: (done) => {\n      done(null, window.localStorage.getItem('at'))\n    }\n  }).api('/me/events')\n    .top(10)\n    .select('subject,start,end,createdDatetime')\n    .orderby('createdDatetime DESC')\n    .get((err, res) => {\n      if (err) {\n        console.log(err);\n      } else {\n        console.log(res.value);\n      }\n    });\n}\n\n\nexport const apiMiddleware = store => next => action => {\n  if(action.type === 'GET_GOOGLE_EVENTS') {\n    googleCalendarEvents();\n  }\n  if(action.type == 'GET_OUTLOOK_EVENTS') {\n    const url = action.payload.url;\n    outlookCalendarEvents();\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}