{"ast":null,"code":"import { API_KEY, GOOGLE_CLIENT_ID, GOOGLE_SCOPE } from '../utils/google';\nvar GoogleAuth = '';\n\nvar handleAuthClick = function handleAuthClick(auth) {\n  if (auth.isSignedIn.get()) {\n    console.log(\"Signed In to Google!\");\n  } else {\n    auth.signIn();\n  }\n};\n\nexport var authBeginMiddleware = function authBeginMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'BEGIN_GOOGLE_AUTH') {\n        window.gapi.load('client:auth2', {\n          callback: function callback() {\n            window.gapi.client.init({\n              'apiKey': API_KEY,\n              'clientId': GOOGLE_CLIENT_ID,\n              'scope': GOOGLE_SCOPE,\n              'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n            }).then(function () {\n              GoogleAuth = window.gapi.auth2.getAuthInstance(); //GoogleAuth.signIn();\n\n              handleAuthClick(GoogleAuth);\n              var user = GoogleAuth.currentUser.get();\n              var isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n\n              if (isAuthorized) {\n                next({\n                  type: 'SUCCESS_GOOGLE_AUTH',\n                  payload: {\n                    user: user\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n\n      return next(action);\n    };\n  };\n};\n/*export const authSuccessMiddleware = store => next => action => {\n  if(action.type === 'SUCCESS_GOOGLE_AUTH') {\n    next({\n      type: 'RETRIEVE_STORED_EVENTS'\n    })\n  }\n  return next(action);\n}*/","map":{"version":3,"sources":["/Users/sham/big-calendar/src/middleware/auth.js"],"names":["API_KEY","GOOGLE_CLIENT_ID","GOOGLE_SCOPE","GoogleAuth","handleAuthClick","auth","isSignedIn","get","console","log","signIn","authBeginMiddleware","store","next","action","type","window","gapi","load","callback","client","init","then","auth2","getAuthInstance","user","currentUser","isAuthorized","hasGrantedScopes","payload"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,gBAAlB,EAAoCC,YAApC,QAAwD,iBAAxD;AAGA,IAAIC,UAAU,GAAG,EAAjB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAU;AAChC,MAAGA,IAAI,CAACC,UAAL,CAAgBC,GAAhB,EAAH,EAA0B;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,GAFD,MAGK;AACHJ,IAAAA,IAAI,CAACK,MAAL;AACD;AACF,CAPD;;AASA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AAC5D,UAAGA,MAAM,CAACC,IAAP,KAAgB,mBAAnB,EAAwC;AACtCC,QAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC;AAC/BC,UAAAA,QAAQ,EAAE,oBAAM;AACdH,YAAAA,MAAM,CAACC,IAAP,CAAYG,MAAZ,CAAmBC,IAAnB,CAAwB;AACpB,wBAAUrB,OADU;AAEpB,0BAAYC,gBAFQ;AAGpB,uBAASC,YAHW;AAIpB,+BAAiB,CAAC,4DAAD;AAJG,aAAxB,EAKGoB,IALH,CAKQ,YAAM;AACVnB,cAAAA,UAAU,GAAGa,MAAM,CAACC,IAAP,CAAYM,KAAZ,CAAkBC,eAAlB,EAAb,CADU,CAEV;;AACApB,cAAAA,eAAe,CAACD,UAAD,CAAf;AACA,kBAAMsB,IAAI,GAAGtB,UAAU,CAACuB,WAAX,CAAuBnB,GAAvB,EAAb;AACA,kBAAMoB,YAAY,GAAGF,IAAI,CAACG,gBAAL,CAAsB1B,YAAtB,CAArB;;AACA,kBAAGyB,YAAH,EAAiB;AACfd,gBAAAA,IAAI,CAAC;AACHE,kBAAAA,IAAI,EAAE,qBADH;AAEHc,kBAAAA,OAAO,EAAE;AACPJ,oBAAAA,IAAI,EAAJA;AADO;AAFN,iBAAD,CAAJ;AAMD;AACJ,aAnBD;AAoBD;AAtB8B,SAAjC;AAwBD;;AACD,aAAOZ,IAAI,CAACC,MAAD,CAAX;AACD,KA5B+C;AAAA,GAAR;AAAA,CAAjC;AA8BP","sourcesContent":["import { API_KEY, GOOGLE_CLIENT_ID, GOOGLE_SCOPE } from '../utils/google';\n\n\nlet GoogleAuth = '';\n\nconst handleAuthClick = (auth) => {\n  if(auth.isSignedIn.get()) {\n    console.log(\"Signed In to Google!\");\n  }\n  else {\n    auth.signIn();\n  }\n}\n\nexport const authBeginMiddleware = store => next => action => {\n  if(action.type === 'BEGIN_GOOGLE_AUTH') {\n    window.gapi.load('client:auth2', {\n      callback: () => {\n        window.gapi.client.init({\n            'apiKey': API_KEY,\n            'clientId': GOOGLE_CLIENT_ID,\n            'scope': GOOGLE_SCOPE,\n            'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'],\n        }).then(() => {\n            GoogleAuth = window.gapi.auth2.getAuthInstance();\n            //GoogleAuth.signIn();\n            handleAuthClick(GoogleAuth);\n            const user = GoogleAuth.currentUser.get();\n            const isAuthorized = user.hasGrantedScopes(GOOGLE_SCOPE);\n            if(isAuthorized) {\n              next({\n                type: 'SUCCESS_GOOGLE_AUTH',\n                payload: {\n                  user\n                }\n              })\n            }\n        })\n      }\n    });\n  }\n  return next(action);\n}\n\n/*export const authSuccessMiddleware = store => next => action => {\n  if(action.type === 'SUCCESS_GOOGLE_AUTH') {\n    next({\n      type: 'RETRIEVE_STORED_EVENTS'\n    })\n  }\n  return next(action);\n}*/\n"]},"metadata":{},"sourceType":"module"}