{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), map(function () {\n    getEvents().then(function (resp) {\n      debugger;\n      return duplicateAction();\n    });\n  }));\n};\n\nvar getEvents =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            window.gapi.client.load('calendar', 'v3').then(function () {\n              var syncToken = localStorage.getItem('sync');\n\n              if (syncToken == null) {\n                console.log('performing full sync');\n                return window.gapi.client.calendar.events.list({\n                  'calendarId': 'primary'\n                });\n              } else {\n                console.log('performing incremental sync');\n                return window.gapi.client.calendar.events.list({\n                  'calendarId': 'primary',\n                  'syncToken': syncToken\n                });\n              }\n            }).then(function (resp) {\n              debugger;\n              var result = [];\n              return new Promise(function (resolve, reject) {\n                fetchEvents(resp, result, resolve, reject);\n              });\n            }).then(\n            /*#__PURE__*/\n            function () {\n              var _ref2 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee(response) {\n                var myData, singleEvent, mySchema;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        myData = {\n                          events: response\n                        };\n                        singleEvent = new schema.Entity('events');\n                        mySchema = {\n                          events: [singleEvent]\n                        };\n                        return _context.abrupt(\"return\", normalize(myData, mySchema));\n\n                      case 4:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, this);\n              }));\n\n              return function (_x) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function getEvents() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\n\nvar fetchEvents = function fetchEvents(resp, items, resolve, reject) {\n  var newItems = items.concat(resp.result.items);\n  var pageToken = resp.nextPageToken;\n  var syncToken = resp.nextSyncToken;\n\n  if (pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'pageToken': pageToken\n    }).then(function (nextResp) {\n      return fetchEvents(nextResp, newItems, resolve, reject);\n    }).catch(function (e) {\n      if (e.code === 410) {\n        console.log('Invalid sync token, clearing event store and re-syncing.');\n        localStorage.deleteItem('sync');\n        window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        }).then(function (newResp) {\n          return fetchEvents(newResp, items, resolve, reject);\n        });\n      } else {\n        console.log(e);\n        reject('Something went wrong, Please refresh and try again');\n      }\n    });\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n\n  debugger;\n  /*    request.execute((resp) => {\n      const newItems = items.concat(resp.result.items);\n      let pageToken = resp.nextPageToken;\n      let syncToken = resp.nextSyncToken;\n      if(pageToken !== undefined) {\n        var nextRequest = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'pageToken': pageToken\n        });\n        fetchEvents(nextRequest, newItems, resolve, reject);\n      } else {\n        localStorage.setItem('sync', syncToken);\n        resolve(newItems);\n      }\n    }, (error) => {\n      if(error.code === 410) {\n        console.log('Invalid sync token, clearing event store and re-syncing.');\n        localStorage.deleteItem('sync');\n        var newRequest = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n        });\n        fetchEvents(newRequest, items, resolve, reject);\n      } else {\n        console.log(error);\n        reject('Something went wrong, Please refresh and try again');\n      }\n    });*/\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","beginGetEventsEpics","action$","pipe","getEvents","then","resp","window","gapi","client","load","syncToken","localStorage","getItem","console","log","calendar","events","list","result","Promise","resolve","reject","fetchEvents","response","myData","singleEvent","Entity","mySchema","items","newItems","concat","pageToken","nextPageToken","nextSyncToken","undefined","nextResp","catch","e","code","deleteItem","newResp","setItem"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  map(() => {\n    getEvents().then(resp => {\n      debugger;\n      return duplicateAction();\n    })\n  })\n)\n\nconst getEvents = async () => {\n  window.gapi.client.load('calendar', 'v3')\n    .then(() => {\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log('performing full sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary'\n        });\n      }\n      else {\n        console.log('performing incremental sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n    })\n    .then(resp => {\n      debugger\n      let result = [];\n      return new Promise((resolve, reject) => {\n        fetchEvents(resp, result, resolve, reject);\n      })\n    })\n    .then(async response => {\n      const myData = { events : response};\n      const singleEvent = new schema.Entity('events');\n      const mySchema = { events: [ singleEvent ]};\n      return normalize(myData, mySchema);\n    })\n}\n\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\nconst fetchEvents = (resp, items, resolve, reject) => {\n  const newItems = items.concat(resp.result.items);\n  let pageToken = resp.nextPageToken;\n  let syncToken = resp.nextSyncToken;\n  if(pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary',\n      'pageToken': pageToken\n    }).then(nextResp => fetchEvents(nextResp, newItems, resolve, reject))\n      .catch(e => {\n        if(e.code === 410) {\n          console.log('Invalid sync token, clearing event store and re-syncing.');\n          localStorage.deleteItem('sync');\n          window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n          }).then(newResp => fetchEvents(newResp, items, resolve, reject))\n        } else {\n          console.log(e);\n          reject('Something went wrong, Please refresh and try again');\n        }\n      })\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n  debugger;\n/*    request.execute((resp) => {\n    const newItems = items.concat(resp.result.items);\n    let pageToken = resp.nextPageToken;\n    let syncToken = resp.nextSyncToken;\n    if(pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      localStorage.setItem('sync', syncToken);\n      resolve(newItems);\n    }\n  }, (error) => {\n    if(error.code === 410) {\n      console.log('Invalid sync token, clearing event store and re-syncing.');\n      localStorage.deleteItem('sync');\n      var newRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      fetchEvents(newRequest, items, resolve, reject);\n    } else {\n      console.log(error);\n      reject('Something went wrong, Please refresh and try again');\n    }\n  });*/\n}\n"]},"metadata":{},"sourceType":"module"}