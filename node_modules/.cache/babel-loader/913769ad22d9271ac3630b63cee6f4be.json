{"ast":null,"code":"import _readOnlyError from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nimport { map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport { RETRIEVE_STORED_EVENTS, duplicateAction, updateStoredEvents } from '../../actions/db/events';\nimport getDb from '../../db';\n/*function retrieveEvents(db) {\n  let data = [];\n  await db.events.find().exec().then(events => {\n      data = events.map(singleEvent => {\n        return {\n          'id' : md5(singleEvent.id),\n          'end' : singleEvent.end,\n          'start': singleEvent.start,\n          'summary': singleEvent.summary,\n          'organizer': singleEvent.organizer,\n          'recurrence': singleEvent.recurrence,\n          'iCalUID': singleEvent.iCalUID,\n          'attendees': singleEvent.attendees\n        }\n      });\n  });\n  debugger\n  return data;\n}*/\n\nexport var retrieveEventsEpic = function retrieveEventsEpic(action$) {\n  return action$.pipe(ofType(RETRIEVE_STORED_EVENTS), map(function () {\n    return from(getDb());\n  }), map(function (dbSubs) {\n    var results = [];\n    dbSubs.subscribe(function (data) {\n      return results = (_readOnlyError(\"results\"), data);\n    });\n    debugger;\n    return results;\n  }), map(function (db) {\n    debugger;\n    return duplicateAction();\n  }));\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/db/events.js"],"names":["map","ofType","from","md5","RETRIEVE_STORED_EVENTS","duplicateAction","updateStoredEvents","getDb","retrieveEventsEpic","action$","pipe","dbSubs","results","subscribe","data","db"],"mappings":";AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,SACEC,sBADF,EAEEC,eAFF,EAGEC,kBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAkB,UAAlB;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC3CT,MAAM,CAACG,sBAAD,CADqC,EAE3CJ,GAAG,CAAC;AAAA,WAAME,IAAI,CAACK,KAAK,EAAN,CAAV;AAAA,GAAD,CAFwC,EAG3CP,GAAG,CAAC,UAAAW,MAAM,EAAI;AACZ,QAAMC,OAAO,GAAG,EAAhB;AACAD,IAAAA,MAAM,CAACE,SAAP,CAAiB,UAAAC,IAAI;AAAA,aAAIF,OAAO,+BAAGE,IAAH,CAAX;AAAA,KAArB;AACA;AACA,WAAOF,OAAP;AACD,GALE,CAHwC,EAS3CZ,GAAG,CAAC,UAAAe,EAAE,EAAI;AACR;AACA,WAAOV,eAAe,EAAtB;AACD,GAHE,CATwC,CAAJ;AAAA,CAAlC","sourcesContent":["import { map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport {\n  RETRIEVE_STORED_EVENTS,\n  duplicateAction,\n  updateStoredEvents\n} from '../../actions/db/events';\nimport getDb from '../../db';\n\n/*function retrieveEvents(db) {\n  let data = [];\n  await db.events.find().exec().then(events => {\n      data = events.map(singleEvent => {\n        return {\n          'id' : md5(singleEvent.id),\n          'end' : singleEvent.end,\n          'start': singleEvent.start,\n          'summary': singleEvent.summary,\n          'organizer': singleEvent.organizer,\n          'recurrence': singleEvent.recurrence,\n          'iCalUID': singleEvent.iCalUID,\n          'attendees': singleEvent.attendees\n        }\n      });\n  });\n  debugger\n  return data;\n}*/\n\nexport const retrieveEventsEpic = action$ => action$.pipe(\n  ofType(RETRIEVE_STORED_EVENTS),\n  map(() => from(getDb())),\n  map(dbSubs => {\n    const results = [];\n    dbSubs.subscribe(data => results = data);\n    debugger;\n    return results;\n  }),\n  map(db => {\n    debugger\n    return duplicateAction();\n  })\n)\n"]},"metadata":{},"sourceType":"module"}