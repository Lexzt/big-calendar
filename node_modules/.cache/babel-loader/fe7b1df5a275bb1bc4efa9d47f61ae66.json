{"ast":null,"code":"/**\n * this plugin adds the leader-election-capabilities to rxdb\n */\nimport LeaderElection from 'broadcast-channel/leader-election';\n\nvar LeaderElector =\n/*#__PURE__*/\nfunction () {\n  function LeaderElector(database) {\n    this.destroyed = false;\n    this.database = database;\n    this.isLeader = false;\n    this.isDead = false;\n    this.elector = LeaderElection.create(database.broadcastChannel);\n  }\n\n  var _proto = LeaderElector.prototype;\n\n  _proto.die = function die() {\n    return this.elector.die();\n  };\n  /**\n   * @return {Promise} promise which resolve when the instance becomes leader\n   */\n\n\n  _proto.waitForLeadership = function waitForLeadership() {\n    var _this = this;\n\n    return this.elector.awaitLeadership().then(function () {\n      _this.isLeader = true;\n      return true;\n    });\n  };\n\n  _proto.destroy = function destroy() {\n    if (this.destroyed) return;\n    this.destroyed = true;\n    this.isDead = true;\n    return this.die();\n  };\n\n  return LeaderElector;\n}();\n\nexport function create(database) {\n  var elector = new LeaderElector(database);\n  return elector;\n}\nexport var rxdb = true;\nexport var prototypes = {};\nexport var overwritable = {\n  createLeaderElector: create\n};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable\n};","map":null,"metadata":{},"sourceType":"module"}