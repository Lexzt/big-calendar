{"ast":null,"code":"import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), map(function () {\n    return window.gapi.client.load('calendar', 'v3').then(function (resp) {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary'\n      });\n      var syncToken = localStorage.getItem('sync');\n\n      if (syncToken == null) {\n        console.log('Performing full sync');\n      } else {\n        console.log('Performing incremental sync');\n        request = window.gapi.client.calendar.events.list({\n          'calendarId': 'primary',\n          'syncToken': syncToken\n        });\n        var result = [];\n        new Promise(function (resolve, reject) {\n          return fetchEvents(request, result, resolve, reject);\n        }).then(function (response) {\n          var myData = {\n            events: response\n          };\n          var singleEvent = new schema.Entity('events');\n          var normalizedResults = normalize(myData, mySchema);\n          var mySchema = {\n            events: [singleEvent]\n          };\n          return normalizedResults;\n          debugger;\n        });\n      }\n    });\n  }), map(function (resp) {\n    debugger;\n    duplicateAction();\n  }));\n};\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\nvar fetchEvents = function fetchEvents(request, items, resolve, reject) {\n  request.execute(function (resp) {\n    var newItems = items.concat(resp.result.items);\n    var pageToken = resp.nextPageToken;\n    var syncToken = resp.nextSyncToken;\n\n    if (pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      localStorage.setItem('sync', syncToken);\n      resolve(newItems);\n    }\n  }, function (error) {\n    if (error.code === 410) {\n      console.log('Invalid sync token, clearing event store and re-syncing.');\n      localStorage.deleteItem('sync');\n      var newRequest = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary'\n      });\n      fetchEvents(newRequest, items, resolve, reject);\n    } else {\n      console.log(error);\n      reject('Something went wrong, Please refresh and try again');\n    }\n  });\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","beginGetEventsEpics","action$","pipe","window","gapi","client","load","then","resp","request","calendar","events","list","syncToken","localStorage","getItem","console","log","result","Promise","resolve","reject","fetchEvents","response","myData","singleEvent","Entity","normalizedResults","mySchema","items","execute","newItems","concat","pageToken","nextPageToken","nextSyncToken","undefined","nextRequest","setItem","error","code","deleteItem","newRequest"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  map(() => window.gapi.client.load('calendar', 'v3').then(resp => {\n              var request = window.gapi.client.calendar.events.list({\n                'calendarId' : 'primary'\n              })\n              let syncToken = localStorage.getItem('sync');\n              if(syncToken == null) {\n                console.log('Performing full sync');\n              }\n              else {\n                console.log('Performing incremental sync');\n                request = window.gapi.client.calendar.events.list({\n                  'calendarId' : 'primary',\n                  'syncToken'  :  syncToken\n                })\n                let result = [];\n                new Promise((resolve, reject) =>\n                fetchEvents(request, result, resolve, reject)).then(response => {\n                  const myData = { events : response };\n                  const singleEvent = new schema.Entity('events');\n                  const normalizedResults = normalize(myData, mySchema);\n                  const mySchema = { events: [ singleEvent ]};\n                  return normalizedResults;\n                  debugger\n                })\n              }\n            })\n  ),\n  map((resp) => {\n    debugger;\n    duplicateAction();\n  })\n)\n\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\nconst fetchEvents = (request, items, resolve, reject) => {\n    request.execute((resp) => {\n    const newItems = items.concat(resp.result.items);\n    let pageToken = resp.nextPageToken;\n    let syncToken = resp.nextSyncToken;\n    if(pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      localStorage.setItem('sync', syncToken);\n      resolve(newItems);\n    }\n  }, (error) => {\n    if(error.code === 410) {\n      console.log('Invalid sync token, clearing event store and re-syncing.');\n      localStorage.deleteItem('sync');\n      var newRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      fetchEvents(newRequest, items, resolve, reject);\n    } else {\n      console.log(error);\n      reject('Something went wrong, Please refresh and try again');\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}