{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), mergeMap(function () {\n    from(getEvents).pipe(map(function (resp) {\n      console.log(resp);\n      debugger;\n      return duplicateAction();\n    }));\n  }));\n};\n\nfunction getEvents() {\n  return _getEvents.apply(this, arguments);\n}\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\n\nfunction _getEvents() {\n  _getEvents = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", window.gapi.client.load('calendar', 'v3').then(function (resp) {\n              var request = window.gapi.client.calendar.events.list({\n                'calendarId': 'primary'\n              });\n              var syncToken = localStorage.getItem('sync');\n\n              if (syncToken == null) {\n                console.log('Performing full sync');\n              } else {\n                console.log('Performing incremental sync');\n                request = window.gapi.client.calendar.events.list({\n                  'calendarId': 'primary',\n                  'syncToken': syncToken\n                });\n                var result = [];\n                new Promise(function (resolve, reject) {\n                  return fetchEvents(request, result, resolve, reject);\n                }).then(function (response) {\n                  var myData = {\n                    events: response\n                  };\n                  var singleEvent = new schema.Entity('events');\n                  var normalizedResults = normalize(myData, mySchema);\n                  var mySchema = {\n                    events: [singleEvent]\n                  };\n                  return normalizedResults;\n                });\n              }\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _getEvents.apply(this, arguments);\n}\n\nvar fetchEvents = function fetchEvents(request, items, resolve, reject) {\n  request.execute(function (resp) {\n    var newItems = items.concat(resp.result.items);\n    var pageToken = resp.nextPageToken;\n    var syncToken = resp.nextSyncToken;\n\n    if (pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      localStorage.setItem('sync', syncToken);\n      resolve(newItems);\n    }\n  }, function (error) {\n    if (error.code === 410) {\n      console.log('Invalid sync token, clearing event store and re-syncing.');\n      localStorage.deleteItem('sync');\n      var newRequest = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary'\n      });\n      fetchEvents(newRequest, items, resolve, reject);\n    } else {\n      console.log(error);\n      reject('Something went wrong, Please refresh and try again');\n    }\n  });\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","beginGetEventsEpics","action$","pipe","getEvents","resp","console","log","window","gapi","client","load","then","request","calendar","events","list","syncToken","localStorage","getItem","result","Promise","resolve","reject","fetchEvents","response","myData","singleEvent","Entity","normalizedResults","mySchema","items","execute","newItems","concat","pageToken","nextPageToken","nextSyncToken","undefined","nextRequest","setItem","error","code","deleteItem","newRequest"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  mergeMap(() => {\n    from(getEvents).pipe(\n      map(resp => {\n        console.log(resp);\n        debugger;\n        return duplicateAction();\n      })\n    )\n  })\n)\n\nasync function getEvents() {\n  return window.gapi.client.load('calendar', 'v3').then(resp => {\n              var request = window.gapi.client.calendar.events.list({\n                'calendarId' : 'primary'\n              })\n              let syncToken = localStorage.getItem('sync');\n              if(syncToken == null) {\n                console.log('Performing full sync');\n              }\n              else {\n                console.log('Performing incremental sync');\n                request = window.gapi.client.calendar.events.list({\n                  'calendarId' : 'primary',\n                  'syncToken'  :  syncToken\n                })\n                let result = [];\n                new Promise((resolve, reject) => fetchEvents(request, result, resolve, reject)).then(response => {\n                  const myData = { events : response };\n                  const singleEvent = new schema.Entity('events');\n                  const normalizedResults = normalize(myData, mySchema);\n                  const mySchema = { events: [ singleEvent ]};\n                  return normalizedResults;\n        })\n      }\n  })\n}\n\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\nconst fetchEvents = (request, items, resolve, reject) => {\n    request.execute((resp) => {\n    const newItems = items.concat(resp.result.items);\n    let pageToken = resp.nextPageToken;\n    let syncToken = resp.nextSyncToken;\n    if(pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      localStorage.setItem('sync', syncToken);\n      resolve(newItems);\n    }\n  }, (error) => {\n    if(error.code === 410) {\n      console.log('Invalid sync token, clearing event store and re-syncing.');\n      localStorage.deleteItem('sync');\n      var newRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      fetchEvents(newRequest, items, resolve, reject);\n    } else {\n      console.log(error);\n      reject('Something went wrong, Please refresh and try again');\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}