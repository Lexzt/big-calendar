{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { map, mergeMap, switchMap } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport { RETRIEVE_STORED_EVENTS, BEGIN_STORE_EVENTS, duplicateAction, updateStoredEvents, successStoringEvents } from '../../actions/db/events';\nimport getDb from '../../db';\nexport var retrieveEventsEpic = function retrieveEventsEpic(action$) {\n  return action$.pipe(ofType(RETRIEVE_STORED_EVENTS), mergeMap(function () {\n    return from(getDb()).pipe(mergeMap(function (db) {\n      return from(db.events.find().exec()).pipe(map(function (events) {\n        return events.map(function (singleEvent) {\n          return {\n            'id': md5(singleEvent.id),\n            'end': singleEvent.end,\n            'start': singleEvent.start,\n            'summary': singleEvent.summary,\n            'organizer': singleEvent.organizer,\n            'recurrence': singleEvent.recurrence,\n            'iCalUID': singleEvent.iCalUID,\n            'attendees': singleEvent.attendees\n          };\n        });\n      }), map(function (results) {\n        return updateStoredEvents(results);\n      }));\n    }));\n  }));\n};\nexport var storeEventsEpic = function storeEventsEpic(action$) {\n  return action$.pipe(ofType(BEGIN_STORE_EVENTS), map(function (_ref) {\n    var payload = _ref.payload;\n    return filter(payload);\n  }), mergeMap(function (payload) {\n    return from(storeEvents(payload)).pipe(map(function (results) {\n      return successStoringEvents(results);\n    }), catchError(function (error) {\n      return failStoringEvents(error);\n    }));\n  }));\n};\n\nfunction storeEvents(_x) {\n  return _storeEvents.apply(this, arguments);\n}\n\nfunction _storeEvents() {\n  _storeEvents = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(events) {\n    var db, dbEvents, addEvents, results, values;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getDb();\n\n          case 2:\n            db = _context2.sent;\n            dbEvents = filter(events);\n            addEvents = [];\n            results = dbEvents.map(\n            /*#__PURE__*/\n            function () {\n              var _ref2 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee(dbEvent) {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!dbEvent.id) {\n                          _context.next = 10;\n                          break;\n                        }\n\n                        _context.prev = 1;\n                        _context.next = 4;\n                        return db.events.upsert(dbEvent);\n\n                      case 4:\n                        _context.next = 9;\n                        break;\n\n                      case 6:\n                        _context.prev = 6;\n                        _context.t0 = _context[\"catch\"](1);\n                        return _context.abrupt(\"return\", _context.t0);\n\n                      case 9:\n                        return _context.abrupt(\"return\", dbEvent);\n\n                      case 10:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, this, [[1, 6]]);\n              }));\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n            _context2.next = 8;\n            return Promise.all(results);\n\n          case 8:\n            values = _context2.sent;\n            return _context2.abrupt(\"return\", values);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _storeEvents.apply(this, arguments);\n}\n\nvar filter = function filter(events) {\n  if (events.data !== undefined) {\n    var formated_events = events.data.map(function (eachEvent) {\n      return {\n        'id': md5(eachEvent.id),\n        'end': eachEvent.end,\n        'start': eachEvent.start,\n        'summary': eachEvent.summary,\n        'organizer': eachEvent.organizer,\n        'recurrence': eachEvent.recurrence,\n        'iCalUID': eachEvent.iCalUID,\n        'attendees': eachEvent.attendees\n      };\n    });\n    return formated_events;\n  } else {\n    return [];\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/db/events.js"],"names":["map","mergeMap","switchMap","ofType","from","md5","RETRIEVE_STORED_EVENTS","BEGIN_STORE_EVENTS","duplicateAction","updateStoredEvents","successStoringEvents","getDb","retrieveEventsEpic","action$","pipe","db","events","find","exec","singleEvent","id","end","start","summary","organizer","recurrence","iCalUID","attendees","results","storeEventsEpic","payload","filter","storeEvents","catchError","error","failStoringEvents","dbEvents","addEvents","dbEvent","upsert","Promise","all","values","data","undefined","formated_events","eachEvent"],"mappings":"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","sourcesContent":["import { map, mergeMap, switchMap } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport {\n  RETRIEVE_STORED_EVENTS,\n  BEGIN_STORE_EVENTS,\n  duplicateAction,\n  updateStoredEvents,\n  successStoringEvents\n} from '../../actions/db/events';\nimport getDb from '../../db';\n\nexport const retrieveEventsEpic = action$ => action$.pipe(\n  ofType(RETRIEVE_STORED_EVENTS),\n  mergeMap(() => from(getDb()).pipe(\n    mergeMap(db => from(db.events.find().exec()).pipe(\n        map(events => events.map(singleEvent => {\n              return {\n                  'id' : md5(singleEvent.id),\n                  'end' : singleEvent.end,\n                  'start': singleEvent.start,\n                  'summary': singleEvent.summary,\n                  'organizer': singleEvent.organizer,\n                  'recurrence': singleEvent.recurrence,\n                  'iCalUID': singleEvent.iCalUID,\n                  'attendees': singleEvent.attendees\n                }\n          })\n        ),\n        map(results => {\n          return updateStoredEvents(results);\n            })\n          )\n        )\n      ),\n    ),\n  )\n\n  export const storeEventsEpic = action$ => action$.pipe(\n    ofType(BEGIN_STORE_EVENTS),\n    map(({payload}) => filter(payload)),\n    mergeMap((payload) => from(storeEvents(payload)).pipe(\n      map(results => successStoringEvents(results)),\n      catchError(error => failStoringEvents(error))\n    ))\n  )\n\n  async function storeEvents(events){\n    const db = await getDb();\n    const dbEvents = filter(events);\n    const addEvents = [];\n    const results = dbEvents.map(async dbEvent => {\n      if(!!dbEvent.id) {\n        try {\n          await db.events.upsert(dbEvent);\n        } catch(e) {\n          return e;\n        }\n        return dbEvent;\n      }\n    });\n    let values = await Promise.all(results);\n    return values;\n  }\n\n  const filter = (events) => {\n    if(events.data !== undefined) {\n      const formated_events = events.data\n      .map(eachEvent => {\n          return  ({\n            'id' : md5(eachEvent.id),\n            'end' : eachEvent.end,\n            'start': eachEvent.start,\n            'summary': eachEvent.summary,\n            'organizer': eachEvent.organizer,\n            'recurrence': eachEvent.recurrence,\n            'iCalUID': eachEvent.iCalUID,\n            'attendees': eachEvent.attendees\n          })\n        }\n      );\n      return formated_events;\n    }\n    else {\n      return [];\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}