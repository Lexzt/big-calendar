{"ast":null,"code":"import { createLogger } from 'redux-logger';\nimport request from 'superagent';\nexport var loggerMiddleware = createLogger();\nvar CALENDAR_ID = 'shamsheer619@gmail.com';\nvar CLIENT_ID = '65724758895-j8e7e5ovpujg8r32mg36v9pevmsbh9d2.apps.googleusercontent.com';\nvar API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nvar URL = \"https://www.googleapis.com/calendar/v3/calendars/events\";\nvar SCOPE = 'https://www.googleapis.com/auth/calendar.events';\n\nfunction initClient() {\n  gapi.client.init({\n    'apiKey': API_KEY,\n    'clientId': CLIENT_ID,\n    'scope': 'https://www.googleapis.com/auth/drive.metadata.readonly',\n    'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n  }).then(function () {\n    GoogleAuth = gapi.auth2.getAuthInstance(); // Listen for sign-in state changes.\n\n    GoogleAuth.isSignedIn.listen(updateSigninStatus);\n  });\n}\n\nexport var apiMiddleware = function apiMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'GET_EVENTS') {\n        request.get(URL).end(function (err, resp) {\n          if (!err) {\n            return next({\n              type: action.type + '_SUCCESS',\n              payload: {\n                data: resp\n              }\n            });\n          } else {\n            return next({\n              type: action.type + '_FAILURE',\n              payload: {\n                data: err\n              }\n            });\n          }\n        });\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/redux/middleware.js"],"names":["createLogger","request","loggerMiddleware","CALENDAR_ID","CLIENT_ID","API_KEY","URL","SCOPE","initClient","gapi","client","init","then","GoogleAuth","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","apiMiddleware","store","next","action","type","get","end","err","resp","payload","data"],"mappings":"AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,OAAOC,OAAP,MAAqB,YAArB;AACA,OAAO,IAAMC,gBAAgB,GAAGF,YAAY,EAArC;AAEP,IAAMG,WAAW,GAAG,wBAApB;AACA,IAAMC,SAAS,GAAG,yEAAlB;AACA,IAAMC,OAAO,GAAG,yCAAhB;AACA,IAAMC,GAAG,4DAAT;AACA,IAAMC,KAAK,GAAG,iDAAd;;AAEA,SAASC,UAAT,GAAsB;AACpBC,EAAAA,IAAI,CAACC,MAAL,CAAYC,IAAZ,CAAiB;AACb,cAAUN,OADG;AAEb,gBAAYD,SAFC;AAGb,aAAS,yDAHI;AAIb,qBAAiB,CAAC,4DAAD;AAJJ,GAAjB,EAKGQ,IALH,CAKQ,YAAY;AAChBC,IAAAA,UAAU,GAAGJ,IAAI,CAACK,KAAL,CAAWC,eAAX,EAAb,CADgB,CAGhB;;AACAF,IAAAA,UAAU,CAACG,UAAX,CAAsBC,MAAtB,CAA6BC,kBAA7B;AACH,GAVD;AAWD;;AAED,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtD,UAAGA,MAAM,CAACC,IAAP,KAAgB,YAAnB,EAAiC;AAC/BtB,QAAAA,OAAO,CACJuB,GADH,CACOlB,GADP,EAEGmB,GAFH,CAEO,UAACC,GAAD,EAAMC,IAAN,EAAe;AAClB,cAAI,CAACD,GAAL,EAAU;AACR,mBAAOL,IAAI,CAAC;AACVE,cAAAA,IAAI,EAAED,MAAM,CAACC,IAAP,GAAc,UADV;AAEVK,cAAAA,OAAO,EAAE;AACPC,gBAAAA,IAAI,EAAEF;AADC;AAFC,aAAD,CAAX;AAMD,WAPD,MAQK;AACH,mBAAON,IAAI,CAAC;AACVE,cAAAA,IAAI,EAAED,MAAM,CAACC,IAAP,GAAc,UADV;AAEVK,cAAAA,OAAO,EAAE;AACPC,gBAAAA,IAAI,EAAEH;AADC;AAFC,aAAD,CAAX;AAMD;AACF,SAnBH;AAoBD;;AACD,aAAOL,IAAI,CAACC,MAAD,CAAX;AACD,KAxByC;AAAA,GAAR;AAAA,CAA3B","sourcesContent":["import { createLogger } from 'redux-logger';\nimport request from  'superagent';\nexport const loggerMiddleware = createLogger();\n\nconst CALENDAR_ID = 'shamsheer619@gmail.com';\nconst CLIENT_ID = '65724758895-j8e7e5ovpujg8r32mg36v9pevmsbh9d2.apps.googleusercontent.com';\nconst API_KEY = 'AIzaSyCTYXWtoRKnXeZkPCcZwYOXm0Qz3Lz9F9g';\nconst URL = `https://www.googleapis.com/calendar/v3/calendars/events`;\nconst SCOPE = 'https://www.googleapis.com/auth/calendar.events';\n\nfunction initClient() {\n  gapi.client.init({\n      'apiKey': API_KEY,\n      'clientId': CLIENT_ID,\n      'scope': 'https://www.googleapis.com/auth/drive.metadata.readonly',\n      'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest']\n  }).then(function () {\n      GoogleAuth = gapi.auth2.getAuthInstance();\n\n      // Listen for sign-in state changes.\n      GoogleAuth.isSignedIn.listen(updateSigninStatus);\n  });\n}\n\nexport const apiMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS') {\n    request\n      .get(URL)\n      .end((err, resp) => {\n        if (!err) {\n          return next({\n            type: action.type + '_SUCCESS',\n            payload: {\n              data: resp\n            }\n          })\n        }\n        else {\n          return next({\n            type: action.type + '_FAILURE',\n            payload: {\n              data: err\n            }\n          })\n        }\n      })\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}