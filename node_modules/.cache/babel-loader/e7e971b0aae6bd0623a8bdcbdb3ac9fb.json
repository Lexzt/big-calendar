{"ast":null,"code":"import _objectSpread from \"/Users/sham/big-calendar/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_NEW_EVENT, UPDATE_EVENTS, GET_GOOGLE_EVENTS_SUCCESS, GET_GOOGLE_EVENTS_FAILURE, GET_OUTLOOK_EVENTS_SUCCESS, GET_OUTLOOK_EVENTS_FAILURE } from './actions';\nvar initialState = {\n  events: [{\n    allDay: false,\n    end: new Date('December 12, 2018 02:13:00'),\n    start: new Date('December 12, 2018 01:13:00'),\n    title: 'New Event'\n  }],\n  google_data: [],\n  outlook_data: [],\n  error: ''\n};\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_NEW_EVENT:\n      var newEventsList = state.events.concat(action.payload.newEvent);\n      return {\n        events: newEventsList\n      };\n\n    case UPDATE_EVENTS:\n      return {\n        events: action.payload.updatedEvents\n      };\n\n    case GET_GOOGLE_EVENTS_SUCCESS:\n      debugger;\n      return _objectSpread({}, state, {\n        google_data: action.payload.data\n      });\n\n    case GET_GOOGLE_EVENTS_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload.error\n      });\n\n    case GET_OUTLOOK_EVENTS_SUCCESS:\n      return _objectSpread({}, state, {\n        outlook_data: action.payload.data\n      });\n\n    case GET_OUTLOOK_EVENTS_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload.error\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sham/big-calendar/src/redux/reducers.js"],"names":["ADD_NEW_EVENT","UPDATE_EVENTS","GET_GOOGLE_EVENTS_SUCCESS","GET_GOOGLE_EVENTS_FAILURE","GET_OUTLOOK_EVENTS_SUCCESS","GET_OUTLOOK_EVENTS_FAILURE","initialState","events","allDay","end","Date","start","title","google_data","outlook_data","error","eventsReducer","state","action","type","newEventsList","concat","payload","newEvent","updatedEvents","data"],"mappings":";AAAA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,yBAAvC,EAAkEC,yBAAlE,EAA6FC,0BAA7F,EAAyHC,0BAAzH,QAA2J,WAA3J;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,GAAG,EAAE,IAAIC,IAAJ,CAAS,4BAAT,CAFP;AAGEC,IAAAA,KAAK,EAAE,IAAID,IAAJ,CAAS,4BAAT,CAHT;AAIEE,IAAAA,KAAK,EAAE;AAJT,GADM,CADW;AAUnBC,EAAAA,WAAW,EAAE,EAVM;AAWnBC,EAAAA,YAAY,EAAE,EAXK;AAYnBC,EAAAA,KAAK,EAAE;AAZY,CAArB;AAgBA,eAAe,SAASC,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBX,YAAsB;AAAA,MAARY,MAAQ;;AAClE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKnB,aAAL;AACE,UAAMoB,aAAa,GAAGH,KAAK,CAACV,MAAN,CAAac,MAAb,CAAoBH,MAAM,CAACI,OAAP,CAAeC,QAAnC,CAAtB;AACA,aAAO;AACLhB,QAAAA,MAAM,EAAEa;AADH,OAAP;;AAGF,SAAKnB,aAAL;AACE,aAAO;AACLM,QAAAA,MAAM,EAAEW,MAAM,CAACI,OAAP,CAAeE;AADlB,OAAP;;AAGF,SAAKtB,yBAAL;AACE;AACA,+BACKe,KADL;AAEEJ,QAAAA,WAAW,EAAEK,MAAM,CAACI,OAAP,CAAeG;AAF9B;;AAIF,SAAKtB,yBAAL;AACE,+BACKc,KADL;AAEEF,QAAAA,KAAK,EAAEG,MAAM,CAACI,OAAP,CAAeP;AAFxB;;AAIF,SAAKX,0BAAL;AACE,+BACKa,KADL;AAEEH,QAAAA,YAAY,EAAEI,MAAM,CAACI,OAAP,CAAeG;AAF/B;;AAIF,SAAKpB,0BAAL;AACE,+BACKY,KADL;AAEEF,QAAAA,KAAK,EAAEG,MAAM,CAACI,OAAP,CAAeP;AAFxB;;AAIF;AACE,aAAOE,KAAP;AAhCJ;AAkCD","sourcesContent":["import { ADD_NEW_EVENT, UPDATE_EVENTS, GET_GOOGLE_EVENTS_SUCCESS, GET_GOOGLE_EVENTS_FAILURE, GET_OUTLOOK_EVENTS_SUCCESS, GET_OUTLOOK_EVENTS_FAILURE } from './actions';\n\nconst initialState = {\n  events: [\n    {\n      allDay: false,\n      end: new Date('December 12, 2018 02:13:00'),\n      start: new Date('December 12, 2018 01:13:00'),\n      title: 'New Event',\n\n    }\n  ],\n  google_data: [],\n  outlook_data: [],\n  error: ''\n}\n\n\nexport default function eventsReducer(state = initialState, action) {\n  switch(action.type) {\n    case ADD_NEW_EVENT:\n      const newEventsList = state.events.concat(action.payload.newEvent);\n      return {\n        events: newEventsList\n      }\n    case UPDATE_EVENTS:\n      return {\n        events: action.payload.updatedEvents\n      }\n    case GET_GOOGLE_EVENTS_SUCCESS:\n      debugger\n      return {\n        ...state,\n        google_data: action.payload.data\n      }\n    case GET_GOOGLE_EVENTS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.error\n      }\n    case GET_OUTLOOK_EVENTS_SUCCESS:\n      return {\n        ...state,\n        outlook_data: action.payload.data\n      }\n    case GET_OUTLOOK_EVENTS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.error\n      }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}