{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nimport { loadClient, loadFullCalendar, loadSyncCalendar } from '../utils/client/google';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), mergeMap(function () {\n    return from(loadClient()).pipe(mergeMap(function () {\n      return from(request).pipe(mergeMap(function (resp) {\n        return from(eventsPromise(resp)).pipe(map(function (resp) {\n          debugger;\n          return duplicateAction();\n        }));\n      }));\n    }));\n  }));\n};\n\nvar setCalendarRequest = function setCalendarRequest() {\n  var request;\n  var syncToken = localStorage.getItem('sync');\n\n  if (syncToken == null) {\n    console.log(\"Performing full sync\");\n    request = loadFullCalendar();\n  } else {\n    console.log(\"Performing incremental sync\");\n    request = loadSyncCalendar(syncToken);\n  }\n\n  return request;\n};\n\nvar normalizeEvents = function normalizeEvents(response) {\n  var singleEvent = new schema.Entity('events');\n  var results = normalize({\n    events: response\n  }, {\n    events: [singleEvent]\n  });\n  return results;\n};\n\nvar eventsPromise =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(resp) {\n    var items;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            items = [];\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              fetchEvents(resp, items, resolve, reject);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function eventsPromise(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar fetchEvents = function fetchEvents(resp, items, resolve, reject) {\n  var newItems = items.concat(resp.result.items);\n  var pageToken = resp.result.nextPageToken;\n  var syncToken = resp.result.nextSyncToken;\n  debugger;\n\n  if (pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'pageToken': pageToken\n    }).then(function (nextResp) {\n      debugger;\n      return fetchEvents(nextResp, newItems, resolve, reject);\n    }).catch(function (e) {\n      if (e.code === 410) {\n        console.log('Invalid sync token, clearing event store and re-syncing.');\n        localStorage.deleteItem('sync');\n        window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        }).then(function (newResp) {\n          return fetchEvents(newResp, items, resolve, reject);\n        });\n      } else {\n        console.log(e);\n        reject('Something went wrong, Please refresh and try again');\n      }\n    });\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","loadClient","loadFullCalendar","loadSyncCalendar","beginGetEventsEpics","action$","pipe","request","resp","eventsPromise","setCalendarRequest","syncToken","localStorage","getItem","console","log","normalizeEvents","response","singleEvent","Entity","results","events","items","Promise","resolve","reject","fetchEvents","newItems","concat","result","pageToken","nextPageToken","nextSyncToken","undefined","window","gapi","client","calendar","list","then","nextResp","catch","e","code","deleteItem","newResp","setItem"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN, } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nimport { loadClient, loadFullCalendar, loadSyncCalendar } from '../utils/client/google';\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  mergeMap(() => from(loadClient()).pipe(\n      mergeMap(() => {\n\n        return from(request).pipe(\n            mergeMap(resp => from(eventsPromise(resp)).pipe(\n                map((resp) => {\n                  debugger;\n                  return duplicateAction();\n                })\n              )\n            )\n          )\n      })\n    )\n  )\n)\n\nconst setCalendarRequest = () => {\n  let request;\n  let syncToken = localStorage.getItem('sync');\n  if(syncToken == null) {\n    console.log(\"Performing full sync\");\n    request = loadFullCalendar();\n  } else {\n    console.log(\"Performing incremental sync\");\n    request = loadSyncCalendar(syncToken);\n  }\n  return request;\n}\n\nconst normalizeEvents = (response) => {\n  let singleEvent = new schema.Entity('events');\n  let results = normalize({ events : response}, { events: [ singleEvent ]});\n  return results;\n}\n\nconst eventsPromise = async (resp) => {\n  const items = [];\n  return new Promise((resolve, reject) => {\n    fetchEvents(resp, items, resolve, reject);\n  })\n}\n\nconst fetchEvents = (resp, items, resolve, reject) => {\n  const newItems = items.concat(resp.result.items);\n  let pageToken = resp.result.nextPageToken;\n  let syncToken = resp.result.nextSyncToken;\n  debugger\n  if(pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary',\n      'pageToken': pageToken\n    }).then(nextResp => {\n      debugger\n      return fetchEvents(nextResp, newItems, resolve, reject)\n    }).catch(e => {\n        if(e.code === 410) {\n          console.log('Invalid sync token, clearing event store and re-syncing.');\n          localStorage.deleteItem('sync');\n          window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n          }).then(newResp => fetchEvents(newResp, items, resolve, reject))\n        } else {\n          console.log(e);\n          reject('Something went wrong, Please refresh and try again');\n        }\n      })\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}