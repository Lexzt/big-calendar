{"ast":null,"code":"import _toConsumableArray from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { UPDATE_STORED_EVENTS } from '../actions/events';\nimport { SUCCESS_STORED_EVENTS } from '../actions/db/events';\nvar initialState = {\n  calEvents: []\n};\n\nvar mergeEvents = function mergeEvents(oldEvents, newData, newIds) {\n  debugger;\n  var ids = oldEvents.map(function (item) {\n    return item.id;\n  });\n  var newEvents = newData.normalData.entities.events;\n\n  var newPayload = _toConsumableArray(oldEvents);\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = newIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      if (!ids.includes(key)) {\n        newPayload.push(newEvents[key]);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return newPayload;\n};\n\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  debugger;\n\n  switch (action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, {\n        calEvents: action.payload\n      });\n\n    case SUCCESS_STORED_EVENTS:\n      {\n        debugger;\n        var newEvents = mergeEvents(state.calEvents, action.payload);\n        return Object.assign({}, state, {\n          calEvents: newEvents\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sham/big-calendar/src/newReducers/events.js"],"names":["UPDATE_STORED_EVENTS","SUCCESS_STORED_EVENTS","initialState","calEvents","mergeEvents","oldEvents","newData","newIds","ids","map","item","id","newEvents","normalData","entities","events","newPayload","key","includes","push","eventsReducer","state","action","type","Object","assign","payload"],"mappings":";AAAA,SACEA,oBADF,QAEO,mBAFP;AAGA,SACEC,qBADF,QAEO,sBAFP;AAIA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAArB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,MAArB,EAAgC;AAClD;AACA,MAAIC,GAAG,GAAGH,SAAS,CAACI,GAAV,CAAc,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,EAAT;AAAA,GAAlB,CAAV;AACA,MAAIC,SAAS,GAAGN,OAAO,CAACO,UAAR,CAAmBC,QAAnB,CAA4BC,MAA5C;;AACA,MAAIC,UAAU,sBAAOX,SAAP,CAAd;;AAJkD;AAAA;AAAA;;AAAA;AAKlD,yBAAeE,MAAf,8HAAuB;AAAA,UAAfU,GAAe;;AACrB,UAAG,CAACT,GAAG,CAACU,QAAJ,CAAaD,GAAb,CAAJ,EAAuB;AACrBD,QAAAA,UAAU,CAACG,IAAX,CAAgBP,SAAS,CAACK,GAAD,CAAzB;AACD;AACF;AATiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUlD,SAAOD,UAAP;AACD,CAXD;;AAaA,eAAe,SAASI,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBnB,YAAsB;AAAA,MAARoB,MAAQ;AAClE;;AACA,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKvB,oBAAL;AACE,aAAOwB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAElB,QAAAA,SAAS,EAAEmB,MAAM,CAACI;AAApB,OAAzB,CAAP;;AACF,SAAKzB,qBAAL;AAA4B;AAC1B;AACA,YAAIW,SAAS,GAAGR,WAAW,CAACiB,KAAK,CAAClB,SAAP,EAAkBmB,MAAM,CAACI,OAAzB,CAA3B;AACA,eAAOF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAElB,UAAAA,SAAS,EAAES;AAAb,SAAzB,CAAP;AACD;;AACD;AACE,aAAOS,KAAP;AATJ;AAWD","sourcesContent":["import {\n  UPDATE_STORED_EVENTS\n} from '../actions/events';\nimport {\n  SUCCESS_STORED_EVENTS\n} from '../actions/db/events';\n\nconst initialState = {\n  calEvents: [],\n}\n\nconst mergeEvents = (oldEvents, newData, newIds) => {\n  debugger\n  let ids = oldEvents.map(item => item.id);\n  let newEvents = newData.normalData.entities.events;\n  let newPayload = [...oldEvents];\n  for(let key of newIds) {\n    if(!ids.includes(key)) {\n      newPayload.push(newEvents[key])\n    }\n  }\n  return newPayload;\n}\n\nexport default function eventsReducer(state = initialState, action) {\n  debugger\n  switch(action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, { calEvents: action.payload });\n    case SUCCESS_STORED_EVENTS: {\n      debugger\n      let newEvents = mergeEvents(state.calEvents, action.payload)\n      return Object.assign({}, state, { calEvents: newEvents })\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}