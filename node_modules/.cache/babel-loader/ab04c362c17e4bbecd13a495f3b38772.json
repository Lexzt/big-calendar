{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), map(function () {\n    window.gapi.client.load('calendar', 'v3').then(function () {\n      var syncToken = localStorage.getItem('sync');\n\n      if (syncToken == null) {\n        console.log('performing full sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        });\n      } else {\n        console.log('performing incremental sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId': 'primary',\n          'syncToken': syncToken\n        });\n      }\n    }).then(function (resp) {\n      var result = [];\n      var results = new Promise(function (resolve, reject) {\n        fetchEvents(resp, result, resolve, reject);\n      });\n      return results;\n    }).then(function (response) {\n      var normResponse = normalizeEvents(response);\n      debugger;\n      return duplicateAction();\n    });\n  }));\n};\n\nvar normalizeEvents = function normalizeEvents(response) {\n  var myData = {\n    events: response\n  };\n  var singleEvent = new schema.Entity('events');\n  var mySchema = {\n    events: [singleEvent]\n  };\n  var results = normalize(myData, mySchema);\n  return results;\n};\n\nvar getEvents =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            window.gapi.client.load('calendar', 'v3').then(function () {\n              var syncToken = localStorage.getItem('sync');\n\n              if (syncToken == null) {\n                console.log('performing full sync');\n                return window.gapi.client.calendar.events.list({\n                  'calendarId': 'primary'\n                });\n              } else {\n                console.log('performing incremental sync');\n                return window.gapi.client.calendar.events.list({\n                  'calendarId': 'primary',\n                  'syncToken': syncToken\n                });\n              }\n            }).then(function (resp) {\n              var result = [];\n              var results = new Promise(function (resolve, reject) {\n                fetchEvents(resp, result, resolve, reject);\n              });\n              return results;\n            }).then(function (response) {\n              debugger;\n              var myData = {\n                events: response\n              };\n              var singleEvent = new schema.Entity('events');\n              var mySchema = {\n                events: [singleEvent]\n              };\n              return normalize(myData, mySchema);\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getEvents() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\n\nvar fetchEvents = function fetchEvents(resp, items, resolve, reject) {\n  var newItems = items.concat(resp.result.items);\n  var pageToken = resp.nextPageToken;\n  var syncToken = resp.nextSyncToken;\n\n  if (pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'pageToken': pageToken\n    }).then(function (nextResp) {\n      return fetchEvents(nextResp, newItems, resolve, reject);\n    }).catch(function (e) {\n      if (e.code === 410) {\n        console.log('Invalid sync token, clearing event store and re-syncing.');\n        localStorage.deleteItem('sync');\n        window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        }).then(function (newResp) {\n          return fetchEvents(newResp, items, resolve, reject);\n        });\n      } else {\n        console.log(e);\n        reject('Something went wrong, Please refresh and try again');\n      }\n    });\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","beginGetEventsEpics","action$","pipe","window","gapi","client","load","then","syncToken","localStorage","getItem","console","log","calendar","events","list","resp","result","results","Promise","resolve","reject","fetchEvents","response","normResponse","normalizeEvents","myData","singleEvent","Entity","mySchema","getEvents","items","newItems","concat","pageToken","nextPageToken","nextSyncToken","undefined","nextResp","catch","e","code","deleteItem","newResp","setItem"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  map(() => {\n    window.gapi.client.load('calendar', 'v3')\n      .then(() => {\n        let syncToken = localStorage.getItem('sync');\n        if(syncToken == null) {\n          console.log('performing full sync');\n          return window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary'\n          });\n        }\n        else {\n          console.log('performing incremental sync');\n          return window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n            'syncToken': syncToken\n          });\n        }\n      })\n      .then(resp => {\n        let result = [];\n        const results = new Promise((resolve, reject) => {\n          fetchEvents(resp, result, resolve, reject);\n        })\n        return results;\n      })\n      .then(response => {\n        const normResponse = normalizeEvents(response);\n        debugger\n        return duplicateAction();\n      })\n  })\n)\n\nconst normalizeEvents = (response) => {\n  const myData = { events : response};\n  const singleEvent = new schema.Entity('events');\n  const mySchema = { events: [ singleEvent ]};\n  const results = normalize(myData, mySchema);\n  return results;\n}\n\nconst getEvents = async () => {\n  window.gapi.client.load('calendar', 'v3')\n    .then(() => {\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log('performing full sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary'\n        });\n      }\n      else {\n        console.log('performing incremental sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n    })\n    .then(resp => {\n      let result = [];\n      const results = new Promise((resolve, reject) => {\n        fetchEvents(resp, result, resolve, reject);\n      })\n      return results;\n    })\n    .then(response => {\n      debugger\n      const myData = { events : response};\n      const singleEvent = new schema.Entity('events');\n      const mySchema = { events: [ singleEvent ]};\n      return normalize(myData, mySchema);\n    })\n}\n\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\nconst fetchEvents = (resp, items, resolve, reject) => {\n  const newItems = items.concat(resp.result.items);\n  let pageToken = resp.nextPageToken;\n  let syncToken = resp.nextSyncToken;\n  if(pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary',\n      'pageToken': pageToken\n    }).then(nextResp => fetchEvents(nextResp, newItems, resolve, reject))\n      .catch(e => {\n        if(e.code === 410) {\n          console.log('Invalid sync token, clearing event store and re-syncing.');\n          localStorage.deleteItem('sync');\n          window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n          }).then(newResp => fetchEvents(newResp, items, resolve, reject))\n        } else {\n          console.log(e);\n          reject('Something went wrong, Please refresh and try again');\n        }\n      })\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}