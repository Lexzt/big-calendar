{"ast":null,"code":"import _objectSpread from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { UPDATE_EVENTS, GET_GOOGLE_EVENTS, GET_GOOGLE_EVENTS_SUCCESS, GET_GOOGLE_EVENTS_FAILURE, GET_OUTLOOK_EVENTS_SUCCESS, GET_OUTLOOK_EVENTS_FAILURE, POST_GOOGLE_EVENT_SUCCESS } from '../redux/actions';\nvar initialState = {\n  events: [{\n    allDay: false,\n    end: new Date('December 12, 2018 02:13:00'),\n    start: new Date('December 12, 2018 01:13:00'),\n    title: 'New Event'\n  }],\n  google_data: [],\n  outlook_data: [],\n  new_event: [],\n  error: '',\n  beginAPI: false\n};\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_EVENTS:\n      return _objectSpread({}, state, {\n        events: action.payload.updatedEvents\n      });\n\n    case GET_GOOGLE_EVENTS:\n      return _objectSpread({}, state, {\n        beginAPI: true\n      });\n\n    case GET_GOOGLE_EVENTS_SUCCESS:\n      return _objectSpread({}, state, {\n        google_data: state.google_data.concat(action.payload.data),\n        beginAPI: false\n      });\n\n    case GET_GOOGLE_EVENTS_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload.error,\n        beginAPI: false\n      });\n\n    case GET_OUTLOOK_EVENTS_SUCCESS:\n      return _objectSpread({}, state, {\n        outlook_data: action.payload.data\n      });\n\n    case GET_OUTLOOK_EVENTS_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload.error\n      });\n\n    case POST_GOOGLE_EVENT_SUCCESS:\n      return _objectSpread({}, state, {\n        google_data: state.google_data.concat(action.payload.data)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sham/big-calendar/src/reducers/events.js"],"names":["UPDATE_EVENTS","GET_GOOGLE_EVENTS","GET_GOOGLE_EVENTS_SUCCESS","GET_GOOGLE_EVENTS_FAILURE","GET_OUTLOOK_EVENTS_SUCCESS","GET_OUTLOOK_EVENTS_FAILURE","POST_GOOGLE_EVENT_SUCCESS","initialState","events","allDay","end","Date","start","title","google_data","outlook_data","new_event","error","beginAPI","eventsReducer","state","action","type","payload","updatedEvents","concat","data"],"mappings":";AAAA,SACSA,aADT,EAESC,iBAFT,EAGSC,yBAHT,EAISC,yBAJT,EAKSC,0BALT,EAMSC,0BANT,EAOSC,yBAPT,QAQO,kBARP;AAUA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,GAAG,EAAE,IAAIC,IAAJ,CAAS,4BAAT,CAFP;AAGEC,IAAAA,KAAK,EAAE,IAAID,IAAJ,CAAS,4BAAT,CAHT;AAIEE,IAAAA,KAAK,EAAE;AAJT,GADM,CADW;AAUnBC,EAAAA,WAAW,EAAE,EAVM;AAWnBC,EAAAA,YAAY,EAAE,EAXK;AAYnBC,EAAAA,SAAS,EAAE,EAZQ;AAanBC,EAAAA,KAAK,EAAE,EAbY;AAcnBC,EAAAA,QAAQ,EAAE;AAdS,CAArB;AAkBA,eAAe,SAASC,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBb,YAAsB;AAAA,MAARc,MAAQ;;AAClE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKtB,aAAL;AACE,+BACKoB,KADL;AAEEZ,QAAAA,MAAM,EAAEa,MAAM,CAACE,OAAP,CAAeC;AAFzB;;AAIF,SAAKvB,iBAAL;AACE,+BACKmB,KADL;AAEEF,QAAAA,QAAQ,EAAE;AAFZ;;AAIF,SAAKhB,yBAAL;AACE,+BACKkB,KADL;AAEEN,QAAAA,WAAW,EAAEM,KAAK,CAACN,WAAN,CAAkBW,MAAlB,CAAyBJ,MAAM,CAACE,OAAP,CAAeG,IAAxC,CAFf;AAGER,QAAAA,QAAQ,EAAE;AAHZ;;AAKF,SAAKf,yBAAL;AACE,+BACKiB,KADL;AAEEH,QAAAA,KAAK,EAAEI,MAAM,CAACE,OAAP,CAAeN,KAFxB;AAGEC,QAAAA,QAAQ,EAAE;AAHZ;;AAKF,SAAKd,0BAAL;AACE,+BACKgB,KADL;AAEEL,QAAAA,YAAY,EAAEM,MAAM,CAACE,OAAP,CAAeG;AAF/B;;AAIF,SAAKrB,0BAAL;AACE,+BACKe,KADL;AAEEH,QAAAA,KAAK,EAAEI,MAAM,CAACE,OAAP,CAAeN;AAFxB;;AAIF,SAAKX,yBAAL;AACE,+BACKc,KADL;AAEEN,QAAAA,WAAW,EAAEM,KAAK,CAACN,WAAN,CAAkBW,MAAlB,CAAyBJ,MAAM,CAACE,OAAP,CAAeG,IAAxC;AAFf;;AAIF;AACE,aAAON,KAAP;AAvCJ;AAyCD","sourcesContent":["import {\n         UPDATE_EVENTS,\n         GET_GOOGLE_EVENTS,\n         GET_GOOGLE_EVENTS_SUCCESS,\n         GET_GOOGLE_EVENTS_FAILURE,\n         GET_OUTLOOK_EVENTS_SUCCESS,\n         GET_OUTLOOK_EVENTS_FAILURE,\n         POST_GOOGLE_EVENT_SUCCESS\n} from '../redux/actions';\n\nconst initialState = {\n  events: [\n    {\n      allDay: false,\n      end: new Date('December 12, 2018 02:13:00'),\n      start: new Date('December 12, 2018 01:13:00'),\n      title: 'New Event',\n\n    }\n  ],\n  google_data: [],\n  outlook_data: [],\n  new_event: [],\n  error: '',\n  beginAPI: false\n}\n\n\nexport default function eventsReducer(state = initialState, action) {\n  switch(action.type) {\n    case UPDATE_EVENTS:\n      return {\n        ...state,\n        events: action.payload.updatedEvents\n      }\n    case GET_GOOGLE_EVENTS:\n      return {\n        ...state,\n        beginAPI: true\n      }\n    case GET_GOOGLE_EVENTS_SUCCESS:\n      return {\n        ...state,\n        google_data: state.google_data.concat(action.payload.data),\n        beginAPI: false\n      }\n    case GET_GOOGLE_EVENTS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.error,\n        beginAPI: false\n      }\n    case GET_OUTLOOK_EVENTS_SUCCESS:\n      return {\n        ...state,\n        outlook_data: action.payload.data\n      }\n    case GET_OUTLOOK_EVENTS_FAILURE:\n      return {\n        ...state,\n        error: action.payload.error\n      }\n    case POST_GOOGLE_EVENT_SUCCESS:\n      return {\n        ...state,\n        google_data: state.google_data.concat(action.payload.data)\n      }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}