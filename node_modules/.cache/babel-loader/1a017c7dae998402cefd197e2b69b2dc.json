{"ast":null,"code":"import { map, mergeMap, switchMap } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport { RETRIEVE_STORED_EVENTS, BEGIN_STORE_EVENTS, duplicateAction, updateStoredEvents } from '../../actions/db/events';\nimport getDb from '../../db';\nexport var retrieveEventsEpic = function retrieveEventsEpic(action$) {\n  return action$.pipe(ofType(RETRIEVE_STORED_EVENTS), mergeMap(function () {\n    return from(getDb()).pipe(mergeMap(function (db) {\n      return from(db.events.find().exec()).pipe(map(function (events) {\n        return events.map(function (singleEvent) {\n          return {\n            'id': md5(singleEvent.id),\n            'end': singleEvent.end,\n            'start': singleEvent.start,\n            'summary': singleEvent.summary,\n            'organizer': singleEvent.organizer,\n            'recurrence': singleEvent.recurrence,\n            'iCalUID': singleEvent.iCalUID,\n            'attendees': singleEvent.attendees\n          };\n        });\n      }), map(function (results) {\n        return updateStoredEvents(results);\n      }));\n    }));\n  }));\n};\nexport var storeEventsEpic = function storeEventsEpic(action$) {\n  return action$.pipe(ofType(BEGIN_STORE_EVENTS), mergeMap(function (payload) {\n    return console.log(payload);\n  }));\n};\n\nvar filter = function filter(events) {\n  if (events.data.length > 0) {\n    var formated_events = events.data.map(function (eachEvent) {\n      return {\n        'id': md5(eachEvent.id),\n        'end': eachEvent.end,\n        'start': eachEvent.start,\n        'summary': eachEvent.summary,\n        'organizer': eachEvent.organizer,\n        'recurrence': eachEvent.recurrence,\n        'iCalUID': eachEvent.iCalUID,\n        'attendees': eachEvent.attendees\n      };\n    });\n    return formated_events;\n  } else {\n    return [];\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/db/events.js"],"names":["map","mergeMap","switchMap","ofType","from","md5","RETRIEVE_STORED_EVENTS","BEGIN_STORE_EVENTS","duplicateAction","updateStoredEvents","getDb","retrieveEventsEpic","action$","pipe","db","events","find","exec","singleEvent","id","end","start","summary","organizer","recurrence","iCalUID","attendees","results","storeEventsEpic","payload","console","log","filter","data","length","formated_events","eachEvent"],"mappings":"AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,SAAxB,QAAyC,gBAAzC;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,SACEC,sBADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,kBAJF,QAKO,yBALP;AAMA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC3CV,MAAM,CAACG,sBAAD,CADqC,EAE3CL,QAAQ,CAAC;AAAA,WAAMG,IAAI,CAACM,KAAK,EAAN,CAAJ,CAAcG,IAAd,CACbZ,QAAQ,CAAC,UAAAa,EAAE;AAAA,aAAIV,IAAI,CAACU,EAAE,CAACC,MAAH,CAAUC,IAAV,GAAiBC,IAAjB,EAAD,CAAJ,CAA8BJ,IAA9B,CACXb,GAAG,CAAC,UAAAe,MAAM;AAAA,eAAIA,MAAM,CAACf,GAAP,CAAW,UAAAkB,WAAW,EAAI;AAClC,iBAAO;AACH,kBAAOb,GAAG,CAACa,WAAW,CAACC,EAAb,CADP;AAEH,mBAAQD,WAAW,CAACE,GAFjB;AAGH,qBAASF,WAAW,CAACG,KAHlB;AAIH,uBAAWH,WAAW,CAACI,OAJpB;AAKH,yBAAaJ,WAAW,CAACK,SALtB;AAMH,0BAAcL,WAAW,CAACM,UANvB;AAOH,uBAAWN,WAAW,CAACO,OAPpB;AAQH,yBAAaP,WAAW,CAACQ;AARtB,WAAP;AAUH,SAXW,CAAJ;AAAA,OAAP,CADQ,EAcX1B,GAAG,CAAC,UAAA2B,OAAO,EAAI;AACb,eAAOlB,kBAAkB,CAACkB,OAAD,CAAzB;AACG,OAFF,CAdQ,CAAJ;AAAA,KAAH,CADK,CAAN;AAAA,GAAD,CAFmC,CAAJ;AAAA,CAAlC;AA0BL,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAhB,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CACxCV,MAAM,CAACI,kBAAD,CADkC,EAExCN,QAAQ,CAAC,UAAC4B,OAAD;AAAA,WAAaC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAb;AAAA,GAAD,CAFgC,CAAJ;AAAA,CAA/B;;AAKP,IAAMG,MAAM,GAAG,SAATA,MAAS,CAACjB,MAAD,EAAY;AACzB,MAAGA,MAAM,CAACkB,IAAP,CAAYC,MAAZ,GAAqB,CAAxB,EAA2B;AACzB,QAAMC,eAAe,GAAGpB,MAAM,CAACkB,IAAP,CACvBjC,GADuB,CACnB,UAAAoC,SAAS,EAAI;AACd,aAAS;AACP,cAAO/B,GAAG,CAAC+B,SAAS,CAACjB,EAAX,CADH;AAEP,eAAQiB,SAAS,CAAChB,GAFX;AAGP,iBAASgB,SAAS,CAACf,KAHZ;AAIP,mBAAWe,SAAS,CAACd,OAJd;AAKP,qBAAac,SAAS,CAACb,SALhB;AAMP,sBAAca,SAAS,CAACZ,UANjB;AAOP,mBAAWY,SAAS,CAACX,OAPd;AAQP,qBAAaW,SAAS,CAACV;AARhB,OAAT;AAUD,KAZqB,CAAxB;AAcA,WAAOS,eAAP;AACD,GAhBD,MAiBK;AACH,WAAO,EAAP;AACD;AACF,CArBD","sourcesContent":["import { map, mergeMap, switchMap } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport {\n  RETRIEVE_STORED_EVENTS,\n  BEGIN_STORE_EVENTS,\n  duplicateAction,\n  updateStoredEvents\n} from '../../actions/db/events';\nimport getDb from '../../db';\n\nexport const retrieveEventsEpic = action$ => action$.pipe(\n  ofType(RETRIEVE_STORED_EVENTS),\n  mergeMap(() => from(getDb()).pipe(\n    mergeMap(db => from(db.events.find().exec()).pipe(\n        map(events => events.map(singleEvent => {\n              return {\n                  'id' : md5(singleEvent.id),\n                  'end' : singleEvent.end,\n                  'start': singleEvent.start,\n                  'summary': singleEvent.summary,\n                  'organizer': singleEvent.organizer,\n                  'recurrence': singleEvent.recurrence,\n                  'iCalUID': singleEvent.iCalUID,\n                  'attendees': singleEvent.attendees\n                }\n          })\n        ),\n        map(results => {\n          return updateStoredEvents(results);\n            })\n          )\n        )\n      ),\n    ),\n  )\n\n  export const storeEventsEpic = action$ => action$.pipe(\n    ofType(BEGIN_STORE_EVENTS),\n    mergeMap((payload) => console.log(payload))\n  )\n\n  const filter = (events) => {\n    if(events.data.length > 0) {\n      const formated_events = events.data\n      .map(eachEvent => {\n          return  ({\n            'id' : md5(eachEvent.id),\n            'end' : eachEvent.end,\n            'start': eachEvent.start,\n            'summary': eachEvent.summary,\n            'organizer': eachEvent.organizer,\n            'recurrence': eachEvent.recurrence,\n            'iCalUID': eachEvent.iCalUID,\n            'attendees': eachEvent.attendees\n          })\n        }\n      );\n      return formated_events;\n    }\n    else {\n      return [];\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}