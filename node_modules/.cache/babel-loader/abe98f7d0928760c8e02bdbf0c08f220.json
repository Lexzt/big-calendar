{"ast":null,"code":"import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), map(function () {\n    var events = getEvents();\n    return duplicateAction();\n  }));\n};\n\nvar getEvents = function getEvents() {\n  window.gapi.client.load('calendar', 'v3').then(function () {\n    var syncToken = localStorage.getItem('sync');\n\n    if (syncToken == null) {\n      console.log('performing full sync');\n      return window.gapi.client.calendar.events.list({\n        'calendarId': 'primary'\n      });\n    } else {\n      console.log('performing incremental sync');\n      return window.gapi.client.calendar.events.list({\n        'calendarId': 'primary',\n        'syncToken': syncToken\n      });\n    }\n  }).then(function (resp) {\n    var result = [];\n    var results = new Promise(function (resolve, reject) {\n      fetchEvents(resp, result, resolve, reject);\n    });\n    return results;\n  }).then(function (response) {\n    debugger;\n    var myData = {\n      events: response\n    };\n    var singleEvent = new schema.Entity('events');\n    var mySchema = {\n      events: [singleEvent]\n    };\n    return normalize(myData, mySchema);\n  });\n};\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\n\nvar fetchEvents = function fetchEvents(resp, items, resolve, reject) {\n  var newItems = items.concat(resp.result.items);\n  var pageToken = resp.nextPageToken;\n  var syncToken = resp.nextSyncToken;\n\n  if (pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'pageToken': pageToken\n    }).then(function (nextResp) {\n      return fetchEvents(nextResp, newItems, resolve, reject);\n    }).catch(function (e) {\n      if (e.code === 410) {\n        console.log('Invalid sync token, clearing event store and re-syncing.');\n        localStorage.deleteItem('sync');\n        window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        }).then(function (newResp) {\n          return fetchEvents(newResp, items, resolve, reject);\n        });\n      } else {\n        console.log(e);\n        reject('Something went wrong, Please refresh and try again');\n      }\n    });\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","beginGetEventsEpics","action$","pipe","events","getEvents","window","gapi","client","load","then","syncToken","localStorage","getItem","console","log","calendar","list","resp","result","results","Promise","resolve","reject","fetchEvents","response","myData","singleEvent","Entity","mySchema","items","newItems","concat","pageToken","nextPageToken","nextSyncToken","undefined","nextResp","catch","e","code","deleteItem","newResp","setItem"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  map(() => {\n    const events = getEvents();\n    return duplicateAction();\n  })\n)\n\nconst getEvents = () => {\n  window.gapi.client.load('calendar', 'v3')\n    .then(() => {\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log('performing full sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary'\n        });\n      }\n      else {\n        console.log('performing incremental sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n    })\n    .then(resp => {\n      let result = [];\n      const results = new Promise((resolve, reject) => {\n        fetchEvents(resp, result, resolve, reject);\n      })\n      return results;\n    })\n    .then(response => {\n      debugger\n      const myData = { events : response};\n      const singleEvent = new schema.Entity('events');\n      const mySchema = { events: [ singleEvent ]};\n      return normalize(myData, mySchema);\n    })\n}\n\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n\nconst fetchEvents = (resp, items, resolve, reject) => {\n  const newItems = items.concat(resp.result.items);\n  let pageToken = resp.nextPageToken;\n  let syncToken = resp.nextSyncToken;\n  if(pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary',\n      'pageToken': pageToken\n    }).then(nextResp => fetchEvents(nextResp, newItems, resolve, reject))\n      .catch(e => {\n        if(e.code === 410) {\n          console.log('Invalid sync token, clearing event store and re-syncing.');\n          localStorage.deleteItem('sync');\n          window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n          }).then(newResp => fetchEvents(newResp, items, resolve, reject))\n        } else {\n          console.log(e);\n          reject('Something went wrong, Please refresh and try again');\n        }\n      })\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}