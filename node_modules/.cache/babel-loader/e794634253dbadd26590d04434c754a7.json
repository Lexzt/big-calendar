{"ast":null,"code":"import _toConsumableArray from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Sameenhaja/big-calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Sameenhaja/big-calendar/src/react-calendar-view.js\";\nimport React from \"react\";\nimport BigCalendar from \"react-big-calendar\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport moment from \"moment\";\nimport Modal from 'react-modal';\nimport { withRouter } from 'react-router-dom';\nimport { updateEvents as _updateEvents, getEvents as _getEvents } from '../actions/calendar-events';\nimport { connect } from 'react-redux';\nvar localizer = BigCalendar.momentLocalizer(moment);\nvar DragAndDropCalendar = withDragAndDrop(BigCalendar);\nvar customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\nvar CalendarView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CalendarView, _React$Component);\n\n  function CalendarView(props) {\n    var _this;\n\n    _classCallCheck(this, CalendarView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalendarView).call(this, props));\n\n    _this.moveEventList = function (_ref) {\n      var event = _ref.event,\n          start = _ref.start,\n          end = _ref.end;\n      var events = _this.props.events;\n      var idx = events.indexOf(event);\n\n      var updatedEvent = _objectSpread({}, event, {\n        start: start,\n        end: end\n      });\n\n      var nextEvents = _toConsumableArray(events);\n\n      nextEvents.splice(idx, 1, updatedEvent);\n\n      _this.props.updateEvents(nextEvents);\n    };\n\n    _this.resizeEvent = function (resizeType, _ref2) {\n      var event = _ref2.event,\n          start = _ref2.start,\n          end = _ref2.end;\n      var events = _this.props.events;\n      var nextEvents = events.map(function (existingEvent) {\n        return existingEvent.id === event.id ? _objectSpread({}, existingEvent, {\n          start: start,\n          end: end\n        }) : existingEvent;\n      });\n\n      _this.props.updateEvents(nextEvents);\n    };\n\n    _this.handleSelectDate = function (_ref3) {\n      var start = _ref3.start,\n          end = _ref3.end;\n\n      _this.props.history.push(\"/\".concat(start, \"/$\").concat(end));\n    };\n\n    _this.handleEventClick = function (event) {\n      _this.setState({\n        isShowEvent: true,\n        currentEvent: event,\n        currentEventStartDateTime: moment(event.start).format(\"D, MMMM YYYY, h:mm a\"),\n        currentEventEndDateTime: moment(event.end).format(\"D, MMMM Do YYYY, h:mm a\")\n      });\n    };\n\n    _this.close = function () {\n      _this.setState({\n        isShowEvent: false\n      });\n    };\n\n    _this.afterOpenModal = function () {// references are now sync'd and can be accessed.\n    };\n\n    _this.state = {\n      currentEvent: '',\n      isShowEvent: false,\n      currentEventStartDateTime: ''\n    };\n    return _this;\n  }\n\n  _createClass(CalendarView, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      Modal.setAppElement('body');\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getEvents();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(Modal, {\n        isOpen: this.state.isShowEvent,\n        onAfterOpen: this.afterOpenModal,\n        onRequestClose: this.close,\n        style: customStyles,\n        contentLabel: \"Example Modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        ref: function ref(subtitle) {\n          return _this2.subtitle = subtitle;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, this.state.currentEvent.title), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, this.state.currentEventStartDateTime, \" - \", this.state.currentEventEndDateTime), React.createElement(\"button\", {\n        onClick: this.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"close\")), React.createElement(DragAndDropCalendar, {\n        selectable: true,\n        localizer: localizer,\n        events: this.props.events,\n        onEventDrop: this.moveEventList,\n        onEventResize: this.resizeEvent,\n        onSelectSlot: this.handleSelectDate,\n        onSelectEvent: function onSelectEvent(event) {\n          return _this2.handleEventClick(event);\n        },\n        popup: true,\n        resizable: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CalendarView;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    events: state.events\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateEvents: function updateEvents(nextEvents) {\n      return dispatch(_updateEvents(nextEvents));\n    },\n    getEvents: function getEvents() {\n      return dispatch(_getEvents());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ReactCalendarView));","map":{"version":3,"sources":["/Users/Sameenhaja/big-calendar/src/react-calendar-view.js"],"names":["React","BigCalendar","withDragAndDrop","moment","Modal","withRouter","updateEvents","getEvents","connect","localizer","momentLocalizer","DragAndDropCalendar","customStyles","content","top","left","right","bottom","marginRight","transform","CalendarView","props","moveEventList","event","start","end","events","idx","indexOf","updatedEvent","nextEvents","splice","resizeEvent","resizeType","map","existingEvent","id","handleSelectDate","history","push","handleEventClick","setState","isShowEvent","currentEvent","currentEventStartDateTime","format","currentEventEndDateTime","close","afterOpenModal","state","setAppElement","subtitle","title","Component","mapStateToProps","mapDispatchToProps","dispatch","ReactCalendarView"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport BigCalendar from \"react-big-calendar\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport moment from \"moment\";\nimport Modal from 'react-modal';\nimport { withRouter } from 'react-router-dom';\nimport { updateEvents, getEvents } from '../actions/calendar-events';\nimport { connect } from 'react-redux';\n\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\n\nconst customStyles = {\n  content : {\n    top                   : '50%',\n    left                  : '50%',\n    right                 : 'auto',\n    bottom                : 'auto',\n    marginRight           : '-50%',\n    transform             : 'translate(-50%, -50%)'\n  }\n};\n\nclass CalendarView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentEvent: '',\n      isShowEvent: false,\n      currentEventStartDateTime: ''\n    };\n  }\n\n  componentWillMount() {\n    Modal.setAppElement('body');\n\n  }\n\n  componentDidMount() {\n    this.props.getEvents();\n  }\n\n  moveEventList = ({ event, start, end }) => {\n      const events = this.props.events;\n\n      const idx = events.indexOf(event);\n      const updatedEvent = { ...event, start, end };\n\n      const nextEvents = [...events];\n      nextEvents.splice(idx, 1, updatedEvent);\n      this.props.updateEvents(nextEvents);\n  }\n\n  resizeEvent = (resizeType, { event, start, end }) => {\n    const events = this.props.events;\n\n    const nextEvents = events.map(existingEvent => {\n      return existingEvent.id === event.id\n        ? { ...existingEvent, start, end }\n        : existingEvent;\n    });\n    this.props.updateEvents(nextEvents);\n  }\n\n  handleSelectDate = ({ start, end }) => {\n    this.props.history.push(`/${start}/$${end}`);\n  }\n\n  handleEventClick = (event) => {\n    this.setState({\n      isShowEvent: true,\n      currentEvent: event,\n      currentEventStartDateTime: moment(event.start).format(\"D, MMMM YYYY, h:mm a\"),\n      currentEventEndDateTime: moment(event.end).format(\"D, MMMM Do YYYY, h:mm a\"),\n    })\n  }\n\n  close = () => {\n    this.setState({\n      isShowEvent: false\n    })\n  }\n\n  afterOpenModal = () => {\n    // references are now sync'd and can be accessed.\n  }\n\n  render() {\n    return (\n      <>\n      <Modal\n          isOpen={this.state.isShowEvent}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.close}\n          style={customStyles}\n          contentLabel=\"Example Modal\"\n        >\n          <h2 ref={subtitle => this.subtitle = subtitle}>{this.state.currentEvent.title}</h2>\n          <h4>{this.state.currentEventStartDateTime} - {this.state.currentEventEndDateTime}</h4>\n          <button onClick={this.close}>close</button>\n        </Modal>\n      <DragAndDropCalendar\n        selectable\n        localizer={localizer}\n        events={this.props.events}\n        onEventDrop={this.moveEventList}\n        onEventResize={this.resizeEvent}\n        onSelectSlot={this.handleSelectDate}\n        onSelectEvent={(event) => this.handleEventClick(event)}\n        popup\n        resizable\n      />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    events: state.events,\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateEvents: (nextEvents) => dispatch(updateEvents(nextEvents)),\n  getEvents: () => dispatch(getEvents())\n\n})\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ReactCalendarView));\n"]},"metadata":{},"sourceType":"module"}