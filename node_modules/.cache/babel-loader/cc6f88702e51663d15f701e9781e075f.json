{"ast":null,"code":"import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), mergeMap(function () {\n    window.gapi.client.load('calendar', 'v3', function () {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary'\n      });\n\n      if (syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId': 'primary',\n          'syncToken': syncToken\n        });\n      }\n\n      var result = [];\n      new Promise(function (resolve, reject) {\n        fetchEvents(request, result, resolve, reject);\n      }).pipe(map(function (response) {\n        var myData = {\n          events: response\n        };\n        var singleEvent = new schema.Entity('events');\n        var mySchema = {\n          events: [singleEvent]\n        };\n        var normalizedResults = normalize(myData, mySchema);\n        debugger;\n        console.log(response);\n      }));\n    });\n  }));\n};\n\nvar fetchEvents = function fetchEvents(request, items, resolve, reject) {\n  request.execute(function (resp) {\n    var newItems = items.concat(resp.result.items);\n    var pageToken = resp.nextPageToken;\n    var syncToken = resp.nextSyncToken;\n\n    if (pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      localStorage.setItem('sync', syncToken);\n      resolve(newItems);\n    }\n  }, function (error) {\n    if (error.code === 410) {\n      console.log('Invalid sync token, clearing event store and re-syncing.');\n      localStorage.deleteItem('sync');\n      var newRequest = window.gapi.client.calendar.events.list({\n        'calendarId': 'primary'\n      });\n      fetchEvents(newRequest, items, resolve, reject);\n    } else {\n      console.log(error);\n      reject('Something went wrong, Please refresh and try again');\n    }\n  });\n};\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","map","mergeMap","catchError","ofType","from","normalize","schema","beginGetEventsEpics","action$","pipe","window","gapi","client","load","request","calendar","events","list","syncToken","console","log","result","Promise","resolve","reject","fetchEvents","response","myData","singleEvent","Entity","mySchema","normalizedResults","items","execute","resp","newItems","concat","pageToken","nextPageToken","nextSyncToken","undefined","nextRequest","localStorage","setItem","error","code","deleteItem","newRequest"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events'\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  mergeMap(() => {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).pipe(\n          map(response => {\n              const myData = { events : response};\n              const singleEvent = new schema.Entity('events');\n              const mySchema = { events: [ singleEvent ]};\n              const normalizedResults = normalize(myData, mySchema);\n              debugger;\n              console.log(response);\n        }));\n    })\n  })\n)\n\nconst fetchEvents = (request, items, resolve, reject) => {\n    request.execute((resp) => {\n    const newItems = items.concat(resp.result.items);\n    let pageToken = resp.nextPageToken;\n    let syncToken = resp.nextSyncToken;\n    if(pageToken !== undefined) {\n      var nextRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n        'pageToken': pageToken\n      });\n      fetchEvents(nextRequest, newItems, resolve, reject);\n    } else {\n      localStorage.setItem('sync', syncToken);\n      resolve(newItems);\n    }\n  }, (error) => {\n    if(error.code === 410) {\n      console.log('Invalid sync token, clearing event store and re-syncing.');\n      localStorage.deleteItem('sync');\n      var newRequest = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      fetchEvents(newRequest, items, resolve, reject);\n    } else {\n      console.log(error);\n      reject('Something went wrong, Please refresh and try again');\n    }\n  });\n}\n\n/* const eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}*/\n"]},"metadata":{},"sourceType":"module"}