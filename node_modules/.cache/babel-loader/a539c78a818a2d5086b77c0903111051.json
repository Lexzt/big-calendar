{"ast":null,"code":"import { map, mergeMap } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport { RETRIEVE_STORED_EVENTS, duplicateAction, updateStoredEvents } from '../../actions/db/events';\nimport getDb from '../../db';\nexport var retrieveEventsEpic = function retrieveEventsEpic(action$) {\n  return action$.pipe(ofType(RETRIEVE_STORED_EVENTS), switchMap(function () {\n    return from(getDb()).pipe(mergeMap(function (db) {\n      return from(db.events.find().exec()).pipe(map(function (events) {\n        return events.map(function (singleEvent) {\n          return {\n            'id': md5(singleEvent.id),\n            'end': singleEvent.end,\n            'start': singleEvent.start,\n            'summary': singleEvent.summary,\n            'organizer': singleEvent.organizer,\n            'recurrence': singleEvent.recurrence,\n            'iCalUID': singleEvent.iCalUID,\n            'attendees': singleEvent.attendees\n          };\n        });\n      }), map(function (results) {\n        return updateStoredEvents(results);\n      }));\n    }));\n  }));\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/db/events.js"],"names":["map","mergeMap","ofType","from","md5","RETRIEVE_STORED_EVENTS","duplicateAction","updateStoredEvents","getDb","retrieveEventsEpic","action$","pipe","switchMap","db","events","find","exec","singleEvent","id","end","start","summary","organizer","recurrence","iCalUID","attendees","results"],"mappings":"AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,SACEC,sBADF,EAEEC,eAFF,EAGEC,kBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC3CT,MAAM,CAACG,sBAAD,CADqC,EAE3CO,SAAS,CAAC;AAAA,WAAMT,IAAI,CAACK,KAAK,EAAN,CAAJ,CAAcG,IAAd,CACdV,QAAQ,CAAC,UAAAY,EAAE;AAAA,aAAIV,IAAI,CAACU,EAAE,CAACC,MAAH,CAAUC,IAAV,GAAiBC,IAAjB,EAAD,CAAJ,CAA8BL,IAA9B,CACXX,GAAG,CAAC,UAAAc,MAAM;AAAA,eAAIA,MAAM,CAACd,GAAP,CAAW,UAAAiB,WAAW,EAAI;AAClC,iBAAO;AACH,kBAAOb,GAAG,CAACa,WAAW,CAACC,EAAb,CADP;AAEH,mBAAQD,WAAW,CAACE,GAFjB;AAGH,qBAASF,WAAW,CAACG,KAHlB;AAIH,uBAAWH,WAAW,CAACI,OAJpB;AAKH,yBAAaJ,WAAW,CAACK,SALtB;AAMH,0BAAcL,WAAW,CAACM,UANvB;AAOH,uBAAWN,WAAW,CAACO,OAPpB;AAQH,yBAAaP,WAAW,CAACQ;AARtB,WAAP;AAUH,SAXW,CAAJ;AAAA,OAAP,CADQ,EAcXzB,GAAG,CAAC,UAAA0B,OAAO,EAAI;AACb,eAAOnB,kBAAkB,CAACmB,OAAD,CAAzB;AACD,OAFE,CAdQ,CAAJ;AAAA,KAAH,CADM,CAAN;AAAA,GAAD,CAFkC,CAAJ;AAAA,CAAlC","sourcesContent":["import { map, mergeMap } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport {\n  RETRIEVE_STORED_EVENTS,\n  duplicateAction,\n  updateStoredEvents\n} from '../../actions/db/events';\nimport getDb from '../../db';\n\nexport const retrieveEventsEpic = action$ => action$.pipe(\n  ofType(RETRIEVE_STORED_EVENTS),\n  switchMap(() => from(getDb()).pipe(\n    mergeMap(db => from(db.events.find().exec()).pipe(\n        map(events => events.map(singleEvent => {\n              return {\n                  'id' : md5(singleEvent.id),\n                  'end' : singleEvent.end,\n                  'start': singleEvent.start,\n                  'summary': singleEvent.summary,\n                  'organizer': singleEvent.organizer,\n                  'recurrence': singleEvent.recurrence,\n                  'iCalUID': singleEvent.iCalUID,\n                  'attendees': singleEvent.attendees\n                }\n          })\n        ),\n        map(results => {\n          return updateStoredEvents(results);\n        })\n      )\n    )\n    ),\n  ),\n\n)\n"]},"metadata":{},"sourceType":"module"}