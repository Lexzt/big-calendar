{"ast":null,"code":"import _toConsumableArray from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { UPDATE_STORED_EVENTS } from '../actions/events';\nimport { SUCCESS_STORED_EVENTS } from '../actions/db/events';\nvar initialState = {\n  calEvents: []\n};\n\nvar mergeEvents = function mergeEvents(oldEvents, newData) {\n  var oldIds = oldEvents.map(function (item) {\n    return item.id;\n  });\n  var newEvents = newData.normalData.entities.events;\n  var newIds = [newData.normalData.entities.results.events];\n\n  var newPayload = _toConsumableArray(oldEvents);\n\n  for (var _i = 0; _i < newIds.length; _i++) {\n    var newId = newIds[_i];\n\n    if (!oldIds.includes(newId)) {\n      newPayload.push(newEvents[newId]);\n    }\n  }\n\n  return newPayload;\n};\n\nexport default function eventsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, {\n        calEvents: action.payload\n      });\n\n    case SUCCESS_STORED_EVENTS:\n      {\n        var newEvents = mergeEvents(state.calEvents, action.payload);\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sham/big-calendar/src/newReducers/events.js"],"names":["UPDATE_STORED_EVENTS","SUCCESS_STORED_EVENTS","initialState","calEvents","mergeEvents","oldEvents","newData","oldIds","map","item","id","newEvents","normalData","entities","events","newIds","results","newPayload","newId","includes","push","eventsReducer","state","action","type","Object","assign","payload"],"mappings":";AAAA,SACEA,oBADF,QAEO,mBAFP;AAGA,SACEC,qBADF,QAEO,sBAFP;AAIA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAArB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAAYC,OAAZ,EAAwB;AAC1C,MAAIC,MAAM,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,EAAT;AAAA,GAAlB,CAAb;AACA,MAAIC,SAAS,GAAGL,OAAO,CAACM,UAAR,CAAmBC,QAAnB,CAA4BC,MAA5C;AACA,MAAIC,MAAM,GAAG,CAACT,OAAO,CAACM,UAAR,CAAmBC,QAAnB,CAA4BG,OAA5B,CAAoCF,MAArC,CAAb;;AACA,MAAIG,UAAU,sBAAOZ,SAAP,CAAd;;AACA,wBAAiBU,MAAjB,eAAyB;AAArB,QAAIG,KAAK,GAAIH,MAAJ,IAAT;;AACF,QAAG,CAACR,MAAM,CAACY,QAAP,CAAgBD,KAAhB,CAAJ,EAA4B;AAC1BD,MAAAA,UAAU,CAACG,IAAX,CAAgBT,SAAS,CAACO,KAAD,CAAzB;AACD;AACF;;AACD,SAAOD,UAAP;AACD,CAXD;;AAaA,eAAe,SAASI,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBpB,YAAsB;AAAA,MAARqB,MAAQ;;AAClE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKxB,oBAAL;AACE,aAAOyB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEnB,QAAAA,SAAS,EAAEoB,MAAM,CAACI;AAApB,OAAzB,CAAP;;AACF,SAAK1B,qBAAL;AAA4B;AAC1B,YAAIU,SAAS,GAAGP,WAAW,CAACkB,KAAK,CAACnB,SAAP,EAAkBoB,MAAM,CAACI,OAAzB,CAA3B;AACA,eAAOL,KAAP;AACD;;AACD;AACE,aAAOA,KAAP;AARJ;AAUD","sourcesContent":["import {\n  UPDATE_STORED_EVENTS\n} from '../actions/events';\nimport {\n  SUCCESS_STORED_EVENTS\n} from '../actions/db/events';\n\nconst initialState = {\n  calEvents: [],\n}\n\nconst mergeEvents = (oldEvents, newData) => {\n  let oldIds = oldEvents.map(item => item.id);\n  let newEvents = newData.normalData.entities.events;\n  let newIds = [newData.normalData.entities.results.events];\n  let newPayload = [...oldEvents];\n  for(let newId of newIds) {\n    if(!oldIds.includes(newId)) {\n      newPayload.push(newEvents[newId])\n    }\n  }\n  return newPayload;\n}\n\nexport default function eventsReducer(state = initialState, action) {\n  switch(action.type) {\n    case UPDATE_STORED_EVENTS:\n      return Object.assign({}, state, { calEvents: action.payload });\n    case SUCCESS_STORED_EVENTS: {\n      let newEvents = mergeEvents(state.calEvents, action.payload)\n      return state\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}