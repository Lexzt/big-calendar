{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\nfunction loadGoogleClient() {\n  return _loadGoogleClient.apply(this, arguments);\n}\n\nfunction _loadGoogleClient() {\n  _loadGoogleClient = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return window.gapi.client.load('calendar', 'v3').then(function () {\n              var syncToken = localStorage.getItem('sync');\n              var request;\n\n              if (syncToken == null) {\n                console.log('performing full sync');\n                request = window.gapi.client.calendar.events.list({\n                  'calendarId': 'primary'\n                });\n              } else {\n                console.log('performing incremental sync');\n                request = window.gapi.client.calendar.events.list({\n                  'calendarId': 'primary',\n                  'syncToken': syncToken\n                });\n              }\n\n              return request;\n            }).then(function (resp) {\n              var result = [];\n              var results = new Promise(function (resolve, reject) {\n                fetchEvents(resp, result, resolve, reject);\n              });\n              debugger;\n              return results;\n            }).then(function (response) {\n              debugger;\n              return response;\n            });\n\n          case 2:\n            result = _context2.sent;\n            debugger;\n            return _context2.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _loadGoogleClient.apply(this, arguments);\n}\n\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), map(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var results;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return loadGoogleClient();\n\n          case 2:\n            results = _context.sent;\n            return _context.abrupt(\"return\", results);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }))), mergeMap(function (resp) {\n    from(resp).pipe(map(function (resp) {\n      debugger;\n      return duplicateAction();\n    }));\n  }));\n};\n\nvar normalizeEvents = function normalizeEvents(response) {\n  var singleEvent = new schema.Entity('events');\n  var results = normalize({\n    events: response\n  }, {\n    events: [singleEvent]\n  });\n  return results;\n};\n\nvar fetchEvents = function fetchEvents(resp, items, resolve, reject) {\n  debugger;\n  var newItems = items.concat(resp.result.items);\n  var pageToken = resp.nextPageToken;\n  var syncToken = resp.nextSyncToken;\n\n  if (pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'pageToken': pageToken\n    }).then(function (nextResp) {\n      return fetchEvents(nextResp, newItems, resolve, reject);\n    }).catch(function (e) {\n      if (e.code === 410) {\n        console.log('Invalid sync token, clearing event store and re-syncing.');\n        localStorage.deleteItem('sync');\n        window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        }).then(function (newResp) {\n          return fetchEvents(newResp, items, resolve, reject);\n        });\n      } else {\n        console.log(e);\n        reject('Something went wrong, Please refresh and try again');\n      }\n    });\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","loadGoogleClient","window","gapi","client","load","then","syncToken","localStorage","getItem","request","console","log","calendar","events","list","resp","result","results","Promise","resolve","reject","fetchEvents","response","beginGetEventsEpics","action$","pipe","normalizeEvents","singleEvent","Entity","items","newItems","concat","pageToken","nextPageToken","nextSyncToken","undefined","nextResp","catch","e","code","deleteItem","newResp","setItem"],"mappings":";;AAAA,SAASA,gBAAT,QAAkC,mBAAlC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,UAAxB,QAA0C,gBAA1C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,WAAlC;;SAEeC,gB;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwB,UAAxB,EAAoC,IAApC,EAClBC,IADkB,CACb,YAAM;AACV,kBAAIC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAhB;AACA,kBAAIC,OAAJ;;AACA,kBAAGH,SAAS,IAAI,IAAhB,EAAsB;AACpBI,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAF,gBAAAA,OAAO,GAAIR,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBS,QAAnB,CAA4BC,MAA5B,CAAmCC,IAAnC,CAAwC;AACjD,gCAAe;AADkC,iBAAxC,CAAX;AAGD,eALD,MAMK;AACHJ,gBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAF,gBAAAA,OAAO,GAAGR,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBS,QAAnB,CAA4BC,MAA5B,CAAmCC,IAAnC,CAAwC;AAChD,gCAAe,SADiC;AAEhD,+BAAaR;AAFmC,iBAAxC,CAAV;AAID;;AACD,qBAAOG,OAAP;AACD,aAlBkB,EAmBlBJ,IAnBkB,CAmBb,UAAAU,IAAI,EAAI;AACZ,kBAAIC,MAAM,GAAG,EAAb;AACA,kBAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CC,gBAAAA,WAAW,CAACN,IAAD,EAAOC,MAAP,EAAeG,OAAf,EAAwBC,MAAxB,CAAX;AACD,eAFe,CAAhB;AAGA;AACA,qBAAOH,OAAP;AACD,aA1BkB,EA2BlBZ,IA3BkB,CA2Bb,UAAAiB,QAAQ,EAAI;AAChB;AACA,qBAAOA,QAAP;AACD,aA9BkB,CADvB;;AAAA;AACQN,YAAAA,MADR;AAgCI;AAhCJ,8CAiCWA,MAjCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAoCA,OAAO,IAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC5C7B,MAAM,CAACL,gBAAD,CADsC,EAE5CE,GAAG;AAAA;AAAA;AAAA;AAAA,2BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkBO,gBAAgB,EADlC;;AAAA;AACEiB,YAAAA,OADF;AAAA,6CAEKA,OAFL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAFyC,EAM5CvB,QAAQ,CAAC,UAAAqB,IAAI,EAAI;AACflB,IAAAA,IAAI,CAACkB,IAAD,CAAJ,CAAWU,IAAX,CACEhC,GAAG,CAAC,UAACsB,IAAD,EAAU;AACZ;AACA,aAAOvB,eAAe,EAAtB;AACD,KAHE,CADL;AAMD,GAPO,CANoC,CAAJ;AAAA,CAAnC;;AAgBP,IAAMkC,eAAe,GAAG,SAAlBA,eAAkB,CAACJ,QAAD,EAAc;AACpC,MAAIK,WAAW,GAAG,IAAI5B,MAAM,CAAC6B,MAAX,CAAkB,QAAlB,CAAlB;AACA,MAAIX,OAAO,GAAGnB,SAAS,CAAC;AAAEe,IAAAA,MAAM,EAAGS;AAAX,GAAD,EAAuB;AAAET,IAAAA,MAAM,EAAE,CAAEc,WAAF;AAAV,GAAvB,CAAvB;AACA,SAAOV,OAAP;AACD,CAJD;;AAMA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACN,IAAD,EAAOc,KAAP,EAAcV,OAAd,EAAuBC,MAAvB,EAAkC;AACpD;AACA,MAAMU,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAahB,IAAI,CAACC,MAAL,CAAYa,KAAzB,CAAjB;AACA,MAAIG,SAAS,GAAGjB,IAAI,CAACkB,aAArB;AACA,MAAI3B,SAAS,GAAGS,IAAI,CAACmB,aAArB;;AACA,MAAGF,SAAS,KAAKG,SAAjB,EAA4B;AAC1BlC,IAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBS,QAAnB,CAA4BC,MAA5B,CAAmCC,IAAnC,CAAwC;AACtC,oBAAe,SADuB;AAEtC,mBAAakB;AAFyB,KAAxC,EAGG3B,IAHH,CAGQ,UAAA+B,QAAQ;AAAA,aAAIf,WAAW,CAACe,QAAD,EAAWN,QAAX,EAAqBX,OAArB,EAA8BC,MAA9B,CAAf;AAAA,KAHhB,EAIGiB,KAJH,CAIS,UAAAC,CAAC,EAAI;AACV,UAAGA,CAAC,CAACC,IAAF,KAAW,GAAd,EAAmB;AACjB7B,QAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;AACAJ,QAAAA,YAAY,CAACiC,UAAb,CAAwB,MAAxB;AACAvC,QAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBS,QAAnB,CAA4BC,MAA5B,CAAmCC,IAAnC,CAAwC;AACtC,wBAAe;AADuB,SAAxC,EAEGT,IAFH,CAEQ,UAAAoC,OAAO;AAAA,iBAAIpB,WAAW,CAACoB,OAAD,EAAUZ,KAAV,EAAiBV,OAAjB,EAA0BC,MAA1B,CAAf;AAAA,SAFf;AAGD,OAND,MAMO;AACLV,QAAAA,OAAO,CAACC,GAAR,CAAY2B,CAAZ;AACAlB,QAAAA,MAAM,CAAC,oDAAD,CAAN;AACD;AACF,KAfH;AAgBD,GAjBD,MAiBO;AACLb,IAAAA,YAAY,CAACmC,OAAb,CAAqB,MAArB,EAA6BpC,SAA7B;AACAa,IAAAA,OAAO,CAACW,QAAD,CAAP;AACD;AACF,CA1BD","sourcesContent":["import { GET_EVENTS_BEGIN, } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\nasync function loadGoogleClient() {\n  const result = await window.gapi.client.load('calendar', 'v3')\n    .then(() => {\n      let syncToken = localStorage.getItem('sync');\n      let request;\n      if(syncToken == null) {\n        console.log('performing full sync');\n        request =  window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary'\n        });\n      }\n      else {\n        console.log('performing incremental sync');\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      return request;\n    })\n    .then(resp => {\n      let result = [];\n      const results = new Promise((resolve, reject) => {\n        fetchEvents(resp, result, resolve, reject);\n      })\n      debugger;\n      return results;\n    })\n    .then(response => {\n      debugger\n      return response;\n    });\n    debugger\n    return result;\n}\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  map(async () => {\n    let results = await loadGoogleClient();\n    return results;\n  }),\n  mergeMap(resp => {\n    from(resp).pipe(\n      map((resp) => {\n        debugger;\n        return duplicateAction()\n      })\n    );\n  })\n)\n\nconst normalizeEvents = (response) => {\n  let singleEvent = new schema.Entity('events');\n  let results = normalize({ events : response}, { events: [ singleEvent ]});\n  return results;\n}\n\nconst fetchEvents = (resp, items, resolve, reject) => {\n  debugger\n  const newItems = items.concat(resp.result.items);\n  let pageToken = resp.nextPageToken;\n  let syncToken = resp.nextSyncToken;\n  if(pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary',\n      'pageToken': pageToken\n    }).then(nextResp => fetchEvents(nextResp, newItems, resolve, reject))\n      .catch(e => {\n        if(e.code === 410) {\n          console.log('Invalid sync token, clearing event store and re-syncing.');\n          localStorage.deleteItem('sync');\n          window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n          }).then(newResp => fetchEvents(newResp, items, resolve, reject))\n        } else {\n          console.log(e);\n          reject('Something went wrong, Please refresh and try again');\n        }\n      })\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}