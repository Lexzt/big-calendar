{"ast":null,"code":"\"use strict\";\n/**\r\n * @module BatchResponseContent\r\n */\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Class that handles BatchResponseContent\r\n */\n\nvar BatchResponseContent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates the BatchResponseContent instance\r\n   * @param {BatchResponseBody} response - The response body returned for batch request from server\r\n   */\n  function BatchResponseContent(response) {\n    var self = this;\n    self.responses = new Map();\n    self.update(response);\n  }\n  /**\r\n   * Updates the Batch response content instance with given responses.\r\n   * @param {BatchResponseBody} response - The response json representing batch response message\r\n   */\n\n\n  BatchResponseContent.prototype.update = function (response) {\n    var self = this;\n    self.nextLink = response[\"@nextLink\"];\n    var responses = response.responses;\n\n    for (var i = 0, l = responses.length; i < l; i++) {\n      self.responses.set(responses[i].id, self.createResponseObject(responses[i]));\n    }\n  };\n  /**\r\n   * Creates native Response object from the json representation of it.\r\n   * @param {KeyValuePairObject} responseJSON - The response json value\r\n   * @return The Response Object instance\r\n   */\n\n\n  BatchResponseContent.prototype.createResponseObject = function (responseJSON) {\n    var body = responseJSON.body,\n        options = {};\n    options.status = responseJSON.status;\n\n    if (responseJSON.statusText !== undefined) {\n      options.statusText = responseJSON.statusText;\n    }\n\n    options.headers = responseJSON.headers;\n    return new Response(body, options);\n  };\n  /**\r\n   * To get the response of a request for a given request id\r\n   * @param {string} requestId - The request id value\r\n   * @return The Response object instance for the particular request\r\n   */\n\n\n  BatchResponseContent.prototype.getResponseById = function (requestId) {\n    return this.responses.get(requestId);\n  };\n  /**\r\n   * To get all the responses of the batch request\r\n   * @return The Map of id and Response objects\r\n   */\n\n\n  BatchResponseContent.prototype.getResponses = function () {\n    return this.responses;\n  };\n  /**\r\n   * To get the iterator for the responses\r\n   * @return The Iterable generator for the response objects\r\n   */\n\n\n  BatchResponseContent.prototype.getResponsesIterator = function () {\n    var self, iterator, cur;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          self = this, iterator = self.responses.entries(), cur = iterator.next();\n          _a.label = 1;\n\n        case 1:\n          if (!!cur.done) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , cur.value];\n\n        case 2:\n          _a.sent();\n\n          cur = iterator.next();\n          return [3\n          /*break*/\n          , 1];\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n\n  return BatchResponseContent;\n}();\n\nexports.BatchResponseContent = BatchResponseContent;","map":null,"metadata":{},"sourceType":"script"}