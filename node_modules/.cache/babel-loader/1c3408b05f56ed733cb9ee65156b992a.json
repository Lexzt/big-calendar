{"ast":null,"code":"\"use strict\";\n/**\r\n * @module OneDriveLargeFileUploadTask\r\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar LargeFileUploadTask_1 = require(\"./LargeFileUploadTask\");\n\nvar OneDriveLargeFileUploadTaskUtil_1 = require(\"./OneDriveLargeFileUploadTaskUtil\");\n\n;\n/**\r\n * Class representing OneDriveLargeFileUploadTask\r\n */\n\nvar OneDriveLargeFileUploadTask =\n/** @class */\nfunction (_super) {\n  __extends(OneDriveLargeFileUploadTask, _super);\n  /**\r\n   * Constructs a OneDriveLargeFileUploadTask\r\n   * @param {Client} client - The GraphClient instance\r\n   * @param {FileObject} file - The FileObject holding details of a file that needs to be uploaded\r\n   * @param {LargeFileUploadSession} uploadSession - The upload session to which the upload has to be done\r\n   * @param {LargeFileUploadTaskOptions} options - The upload task options\r\n   */\n\n\n  function OneDriveLargeFileUploadTask(client, file, uploadSession, options) {\n    return _super.call(this, client, file, uploadSession, options) || this;\n  }\n  /**\r\n   * @static\r\n   * @async\r\n   * Creates a OneDriveLargeFileUploadTask\r\n   * @param {Client} client - The GraphClient instance\r\n   * @param {Blob | Buffer | File} file - File represented as Blob, Buffer or File\r\n   * @param {OneDriveLargeFileUploadOptions} options - The options for upload task\r\n   * @return The promise that will be resolves to OneDriveLargeFileUploadTask instance\r\n   */\n\n\n  OneDriveLargeFileUploadTask.create = function (client, file, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fileObj, _file, b, requestUrl, session, rangeSize, err_1;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            fileObj = {};\n            fileObj.name = options.fileName;\n\n            switch (file.constructor.name) {\n              case \"Blob\":\n                fileObj.content = new File([file], fileObj.name);\n                fileObj.size = fileObj.content.size;\n                break;\n\n              case \"File\":\n                _file = file;\n                fileObj.content = _file;\n                fileObj.size = _file.size;\n                break;\n\n              case \"Buffer\":\n                b = file;\n                fileObj.size = b.byteLength - b.byteOffset;\n                fileObj.content = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\n                break;\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            requestUrl = OneDriveLargeFileUploadTask.constructCreateSessionUrl(options.fileName, options.path);\n            return [4\n            /*yield*/\n            , OneDriveLargeFileUploadTask.createUploadSession(client, requestUrl, options.fileName)];\n\n          case 2:\n            session = _a.sent();\n            rangeSize = OneDriveLargeFileUploadTaskUtil_1.getValidRangeSize(options.rangeSize);\n            return [2\n            /*return*/\n            , new OneDriveLargeFileUploadTask(client, fileObj, session, {\n              rangeSize: rangeSize\n            })];\n\n          case 3:\n            err_1 = _a.sent();\n            throw err_1;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * @static\r\n   * Constructs the create session url for Onedrive\r\n   * @param {string} fileName - The name of the file\r\n   * @param {path} [path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH] - The path for the upload\r\n   * @return The constructed create session url\r\n   */\n\n\n  OneDriveLargeFileUploadTask.constructCreateSessionUrl = function (fileName, path) {\n    if (path === void 0) {\n      path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH;\n    }\n\n    fileName = fileName.trim();\n    path = path.trim();\n\n    if (path === \"\") {\n      path = \"/\";\n    }\n\n    if (path[0] !== \"/\") {\n      path = \"/\" + path;\n    }\n\n    if (path[path.length - 1] !== \"/\") {\n      path = path + \"/\";\n    }\n\n    return encodeURI(\"/me/drive/root:\" + path + fileName + \":/createUploadSession\");\n  };\n  /**\r\n   * @static\r\n   * @async\r\n   * Makes request to the server to create an upload session\r\n   * @param {Client} client - The GraphClient instance\r\n   * @param {string} requestUrl - The URL to create the upload session\r\n   * @param {string} fileName - The name of a file to upload, (with extension)\r\n   * @return The promise that resolves to LargeFileUploadSession\r\n   */\n\n\n  OneDriveLargeFileUploadTask.createUploadSession = function (client, requestUrl, fileName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, session, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            payload = {\n              item: {\n                \"@microsoft.graph.conflictBehavior\": \"rename\",\n                name: fileName\n              }\n            };\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.api(requestUrl).post(payload)];\n\n          case 2:\n            session = _a.sent();\n            return [2\n            /*return*/\n            , {\n              url: session.uploadUrl,\n              expiry: new Date(session.expirationDateTime)\n            }];\n\n          case 3:\n            err_2 = _a.sent();\n            throw err_2;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Commits upload session to end uploading\r\n   * @param {string} requestUrl - The URL to commit the upload session\r\n   * @return The promise resolves to committed response\r\n   */\n\n\n  OneDriveLargeFileUploadTask.prototype.commit = function (requestUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var self, payload, err_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            self = this;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            payload = {\n              name: self.file.name,\n              \"@microsoft.graph.conflictBehavior\": \"rename\",\n              \"@microsoft.graph.sourceUrl\": self.uploadSession.url\n            };\n            return [4\n            /*yield*/\n            , self.client.api(requestUrl).put(payload)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            err_3 = _a.sent();\n            throw err_3;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Default path for the file being uploaded\r\n   */\n\n\n  OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH = \"/\";\n  return OneDriveLargeFileUploadTask;\n}(LargeFileUploadTask_1.LargeFileUploadTask);\n\nexports.OneDriveLargeFileUploadTask = OneDriveLargeFileUploadTask;","map":null,"metadata":{},"sourceType":"script"}