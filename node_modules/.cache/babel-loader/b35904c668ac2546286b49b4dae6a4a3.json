{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport { RETRIEVE_STORED_EVENTS, duplicateAction, updateStoredEvents } from '../../actions/db/events';\nimport getDb from '../../db';\n/*function retrieveEvents(db) {\n  let data = [];\n  await db.events.find().exec().then(events => {\n      data = events.map(singleEvent => {\n        return {\n          'id' : md5(singleEvent.id),\n          'end' : singleEvent.end,\n          'start': singleEvent.start,\n          'summary': singleEvent.summary,\n          'organizer': singleEvent.organizer,\n          'recurrence': singleEvent.recurrence,\n          'iCalUID': singleEvent.iCalUID,\n          'attendees': singleEvent.attendees\n        }\n      });\n  });\n  debugger\n  return data;\n}*/\n\nexport var retrieveEventsEpic = function retrieveEventsEpic(action$) {\n  return action$.pipe(ofType(RETRIEVE_STORED_EVENTS), map(function () {\n    var results = from(getDb());\n    results.subscribe(function (db) {\n      var resp = from(db.events.find().exec());\n      resp.subscribe(function (events) {\n        console.log(events);\n        return duplicateAction();\n      });\n    });\n  }));\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/db/events.js"],"names":["map","ofType","from","md5","RETRIEVE_STORED_EVENTS","duplicateAction","updateStoredEvents","getDb","retrieveEventsEpic","action$","pipe","results","subscribe","db","resp","events","find","exec","console","log"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,SACEC,sBADF,EAEEC,eAFF,EAGEC,kBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAkB,UAAlB;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC3CT,MAAM,CAACG,sBAAD,CADqC,EAE3CJ,GAAG,CAAC,YAAM;AACR,QAAMW,OAAO,GAAGT,IAAI,CAACK,KAAK,EAAN,CAApB;AACAI,IAAAA,OAAO,CAACC,SAAR,CAAkB,UAAAC,EAAE,EAAI;AACtB,UAAMC,IAAI,GAAGZ,IAAI,CAACW,EAAE,CAACE,MAAH,CAAUC,IAAV,GAAiBC,IAAjB,EAAD,CAAjB;AACAH,MAAAA,IAAI,CAACF,SAAL,CAAe,UAAAG,MAAM,EAAI;AACvBG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,eAAOV,eAAe,EAAtB;AACD,OAHD;AAID,KAND;AAOD,GATE,CAFwC,CAAJ;AAAA,CAAlC","sourcesContent":["import { map } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport md5 from 'md5';\nimport {\n  RETRIEVE_STORED_EVENTS,\n  duplicateAction,\n  updateStoredEvents\n} from '../../actions/db/events';\nimport getDb from '../../db';\n\n/*function retrieveEvents(db) {\n  let data = [];\n  await db.events.find().exec().then(events => {\n      data = events.map(singleEvent => {\n        return {\n          'id' : md5(singleEvent.id),\n          'end' : singleEvent.end,\n          'start': singleEvent.start,\n          'summary': singleEvent.summary,\n          'organizer': singleEvent.organizer,\n          'recurrence': singleEvent.recurrence,\n          'iCalUID': singleEvent.iCalUID,\n          'attendees': singleEvent.attendees\n        }\n      });\n  });\n  debugger\n  return data;\n}*/\n\nexport const retrieveEventsEpic = action$ => action$.pipe(\n  ofType(RETRIEVE_STORED_EVENTS),\n  map(() => {\n    const results = from(getDb());\n    results.subscribe(db => {\n      const resp = from(db.events.find().exec());\n      resp.subscribe(events => {\n        console.log(events);\n        return duplicateAction();\n      })\n    })\n  }),\n)\n"]},"metadata":{},"sourceType":"module"}