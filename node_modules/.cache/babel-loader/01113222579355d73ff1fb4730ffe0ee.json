{"ast":null,"code":"import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), mergeMap(function () {\n    var load = window.gapi.client.load('calendar', 'v3');\n    from(load).pipe(mergeMap(function () {\n      var syncToken = localStorage.getItem('sync');\n      var request;\n\n      if (syncToken == null) {\n        console.log('performing full sync');\n        request = window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        });\n      } else {\n        console.log('performing incremental sync');\n        request = window.gapi.client.calendar.events.list({\n          'calendarId': 'primary',\n          'syncToken': syncToken\n        });\n      }\n\n      from(request).pipe(map(function (resp) {\n        var result = [];\n        var results = new Promise(function (resolve, reject) {\n          getEvents(resp, result, resolve, reject);\n        });\n        debugger;\n        return duplicateAction();\n      }));\n    }));\n  }));\n};\n\nvar normalizeEvents = function normalizeEvents(response) {\n  var singleEvent = new schema.Entity('events');\n  var results = normalize({\n    events: response\n  }, {\n    events: [singleEvent]\n  });\n  return results;\n};\n/*\nconst getEvents = async () => {\n/*window.gapi.client.load('calendar', 'v3')\n  .then(() => {\n    let syncToken = localStorage.getItem('sync');\n    let request;\n    if(syncToken == null) {\n      console.log('performing full sync');\n      request =  window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary'\n      });\n    }\n    else {\n      console.log('performing incremental sync');\n      request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n        'syncToken': syncToken\n      });\n    }\n    return request;\n  })\n  .then(resp => {\n    let result = [];\n    const results = new Promise((resolve, reject) => {\n      fetchEvents(resp, result, resolve, reject);\n    })\n    return results;\n  })\n  .then(response => {\n    debugger;\n  })\n  return duplicateAction();\n}\n*/","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","beginGetEventsEpics","action$","pipe","load","window","gapi","client","syncToken","localStorage","getItem","request","console","log","calendar","events","list","resp","result","results","Promise","resolve","reject","getEvents","normalizeEvents","response","singleEvent","Entity"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,UAAxB,QAA0C,gBAA1C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,WAAlC;AAGA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC5CN,MAAM,CAACL,gBAAD,CADsC,EAE5CG,QAAQ,CAAC,YAAM;AACb,QAAIS,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBH,IAAnB,CAAwB,UAAxB,EAAmC,IAAnC,CAAX;AACAN,IAAAA,IAAI,CAACM,IAAD,CAAJ,CAAWD,IAAX,CACIR,QAAQ,CAAC,YAAM;AACb,UAAIa,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAhB;AACA,UAAIC,OAAJ;;AACA,UAAGH,SAAS,IAAI,IAAhB,EAAsB;AACpBI,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAF,QAAAA,OAAO,GAAIN,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBO,QAAnB,CAA4BC,MAA5B,CAAmCC,IAAnC,CAAwC;AACjD,wBAAe;AADkC,SAAxC,CAAX;AAGD,OALD,MAMK;AACHJ,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAF,QAAAA,OAAO,GAAGN,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBO,QAAnB,CAA4BC,MAA5B,CAAmCC,IAAnC,CAAwC;AAChD,wBAAe,SADiC;AAEhD,uBAAaR;AAFmC,SAAxC,CAAV;AAID;;AACDV,MAAAA,IAAI,CAACa,OAAD,CAAJ,CAAcR,IAAd,CACET,GAAG,CAAC,UAAAuB,IAAI,EAAI;AACV,YAAIC,MAAM,GAAG,EAAb;AACA,YAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CC,UAAAA,SAAS,CAACN,IAAD,EAAOC,MAAP,EAAeG,OAAf,EAAwBC,MAAxB,CAAT;AACD,SAFe,CAAhB;AAGA;AACA,eAAO7B,eAAe,EAAtB;AACD,OAPE,CADL;AAUD,KA1BO,CADZ;AA6BD,GA/BO,CAFoC,CAAJ;AAAA,CAAnC;;AAoCP,IAAM+B,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAc;AACpC,MAAIC,WAAW,GAAG,IAAI1B,MAAM,CAAC2B,MAAX,CAAkB,QAAlB,CAAlB;AACA,MAAIR,OAAO,GAAGpB,SAAS,CAAC;AAAEgB,IAAAA,MAAM,EAAGU;AAAX,GAAD,EAAuB;AAAEV,IAAAA,MAAM,EAAE,CAAEW,WAAF;AAAV,GAAvB,CAAvB;AACA,SAAOP,OAAP;AACD,CAJD;AAMA","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  mergeMap(() => {\n    let load = window.gapi.client.load('calendar','v3');\n    from(load).pipe(\n        mergeMap(() => {\n          let syncToken = localStorage.getItem('sync');\n          let request;\n          if(syncToken == null) {\n            console.log('performing full sync');\n            request =  window.gapi.client.calendar.events.list({\n              'calendarId' : 'primary'\n            });\n          }\n          else {\n            console.log('performing incremental sync');\n            request = window.gapi.client.calendar.events.list({\n              'calendarId' : 'primary',\n              'syncToken': syncToken\n            });\n          }\n          from(request).pipe(\n            map(resp => {\n              let result = [];\n              const results = new Promise((resolve, reject) => {\n                getEvents(resp, result, resolve, reject);\n              })\n              debugger\n              return duplicateAction();\n            })\n          );\n        })\n    )\n  })\n)\n\nconst normalizeEvents = (response) => {\n  let singleEvent = new schema.Entity('events');\n  let results = normalize({ events : response}, { events: [ singleEvent ]});\n  return results;\n}\n\n/*\nconst getEvents = async () => {\n/*window.gapi.client.load('calendar', 'v3')\n  .then(() => {\n    let syncToken = localStorage.getItem('sync');\n    let request;\n    if(syncToken == null) {\n      console.log('performing full sync');\n      request =  window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary'\n      });\n    }\n    else {\n      console.log('performing incremental sync');\n      request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n        'syncToken': syncToken\n      });\n    }\n    return request;\n  })\n  .then(resp => {\n    let result = [];\n    const results = new Promise((resolve, reject) => {\n      fetchEvents(resp, result, resolve, reject);\n    })\n    return results;\n  })\n  .then(response => {\n    debugger;\n  })\n  return duplicateAction();\n}\n*/\n"]},"metadata":{},"sourceType":"module"}