{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), mergeMap(function () {\n    var load = window.gapi.client.load('calendar', 'v3');\n    from(load).pipe(mergeMap(function () {\n      var syncToken = localStorage.getItem('sync');\n      var request;\n\n      if (syncToken == null) {\n        console.log('performing full sync');\n        request = window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        });\n      } else {\n        console.log('performing incremental sync');\n        request = window.gapi.client.calendar.events.list({\n          'calendarId': 'primary',\n          'syncToken': syncToken\n        });\n      }\n\n      from(request).pipe(map(function (resp) {\n        var result = [];\n        var results = new Promise(function (resolve, reject) {\n          fetchEvents(resp, result, resolve, reject);\n        });\n        debugger;\n        return duplicateAction();\n      }));\n    }));\n    /*window.gapi.client.load('calendar', 'v3')\n      .then(() => {\n        let syncToken = localStorage.getItem('sync');\n        let request;\n        if(syncToken == null) {\n          console.log('performing full sync');\n          request =  window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary'\n          });\n        }\n        else {\n          console.log('performing incremental sync');\n          request = window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n            'syncToken': syncToken\n          });\n        }\n        return request;\n      })\n      .then(resp => {\n        let result = [];\n        const results = new Promise((resolve, reject) => {\n          fetchEvents(resp, result, resolve, reject);\n        })\n        return results;\n      })\n      .then(response => {\n        debugger;\n      })\n      return duplicateAction();*/\n  }));\n};\n\nvar normalizeEvents = function normalizeEvents(response) {\n  var singleEvent = new schema.Entity('events');\n  var results = normalize({\n    events: response\n  }, {\n    events: [singleEvent]\n  });\n  return results;\n};\n\nvar getEvents =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            window.gapi.client.load('calendar', 'v3').then(function () {\n              var syncToken = localStorage.getItem('sync');\n\n              if (syncToken == null) {\n                console.log('performing full sync');\n                return window.gapi.client.calendar.events.list({\n                  'calendarId': 'primary'\n                });\n              } else {\n                console.log('performing incremental sync');\n                return window.gapi.client.calendar.events.list({\n                  'calendarId': 'primary',\n                  'syncToken': syncToken\n                });\n              }\n            }).then(function (resp) {\n              var result = [];\n              var results = new Promise(function (resolve, reject) {\n                fetchEvents(resp, result, resolve, reject);\n              });\n              return results;\n            }).then(function (response) {\n              debugger;\n              var myData = {\n                events: response\n              };\n              var singleEvent = new schema.Entity('events');\n              var mySchema = {\n                events: [singleEvent]\n              };\n              return normalize(myData, mySchema);\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getEvents() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","beginGetEventsEpics","action$","pipe","load","window","gapi","client","syncToken","localStorage","getItem","request","console","log","calendar","events","list","resp","result","results","Promise","resolve","reject","fetchEvents","normalizeEvents","response","singleEvent","Entity","getEvents","then","myData","mySchema"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,UAAxB,QAA0C,gBAA1C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,WAAlC;AAGA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,OAAO;AAAA,SAAIA,OAAO,CAACC,IAAR,CAC5CN,MAAM,CAACL,gBAAD,CADsC,EAE5CG,QAAQ,CAAC,YAAM;AACb,QAAIS,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBH,IAAnB,CAAwB,UAAxB,EAAmC,IAAnC,CAAX;AACAN,IAAAA,IAAI,CAACM,IAAD,CAAJ,CAAWD,IAAX,CACIR,QAAQ,CAAC,YAAM;AACb,UAAIa,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAhB;AACA,UAAIC,OAAJ;;AACA,UAAGH,SAAS,IAAI,IAAhB,EAAsB;AACpBI,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAF,QAAAA,OAAO,GAAIN,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBO,QAAnB,CAA4BC,MAA5B,CAAmCC,IAAnC,CAAwC;AACjD,wBAAe;AADkC,SAAxC,CAAX;AAGD,OALD,MAMK;AACHJ,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAF,QAAAA,OAAO,GAAGN,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBO,QAAnB,CAA4BC,MAA5B,CAAmCC,IAAnC,CAAwC;AAChD,wBAAe,SADiC;AAEhD,uBAAaR;AAFmC,SAAxC,CAAV;AAID;;AACDV,MAAAA,IAAI,CAACa,OAAD,CAAJ,CAAcR,IAAd,CACET,GAAG,CAAC,UAAAuB,IAAI,EAAI;AACV,YAAIC,MAAM,GAAG,EAAb;AACA,YAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CC,UAAAA,WAAW,CAACN,IAAD,EAAOC,MAAP,EAAeG,OAAf,EAAwBC,MAAxB,CAAX;AACD,SAFe,CAAhB;AAGA;AACA,eAAO7B,eAAe,EAAtB;AACD,OAPE,CADL;AAUD,KA1BO,CADZ;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BD,GA7DO,CAFoC,CAAJ;AAAA,CAAnC;;AAkEP,IAAM+B,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAc;AACpC,MAAIC,WAAW,GAAG,IAAI1B,MAAM,CAAC2B,MAAX,CAAkB,QAAlB,CAAlB;AACA,MAAIR,OAAO,GAAGpB,SAAS,CAAC;AAAEgB,IAAAA,MAAM,EAAGU;AAAX,GAAD,EAAuB;AAAEV,IAAAA,MAAM,EAAE,CAAEW,WAAF;AAAV,GAAvB,CAAvB;AACA,SAAOP,OAAP;AACD,CAJD;;AAMA,IAAMS,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAChBvB,YAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBH,IAAnB,CAAwB,UAAxB,EAAoC,IAApC,EACGyB,IADH,CACQ,YAAM;AACV,kBAAIrB,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAhB;;AACA,kBAAGF,SAAS,IAAI,IAAhB,EAAsB;AACpBI,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,uBAAOR,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBO,QAAnB,CAA4BC,MAA5B,CAAmCC,IAAnC,CAAwC;AAC7C,gCAAe;AAD8B,iBAAxC,CAAP;AAGD,eALD,MAMK;AACHJ,gBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,uBAAOR,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBO,QAAnB,CAA4BC,MAA5B,CAAmCC,IAAnC,CAAwC;AAC7C,gCAAe,SAD8B;AAE7C,+BAAaR;AAFgC,iBAAxC,CAAP;AAID;AACF,aAhBH,EAiBGqB,IAjBH,CAiBQ,UAAAZ,IAAI,EAAI;AACZ,kBAAIC,MAAM,GAAG,EAAb;AACA,kBAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CC,gBAAAA,WAAW,CAACN,IAAD,EAAOC,MAAP,EAAeG,OAAf,EAAwBC,MAAxB,CAAX;AACD,eAFe,CAAhB;AAGA,qBAAOH,OAAP;AACD,aAvBH,EAwBGU,IAxBH,CAwBQ,UAAAJ,QAAQ,EAAI;AAChB;AACA,kBAAMK,MAAM,GAAG;AAAEf,gBAAAA,MAAM,EAAGU;AAAX,eAAf;AACA,kBAAMC,WAAW,GAAG,IAAI1B,MAAM,CAAC2B,MAAX,CAAkB,QAAlB,CAApB;AACA,kBAAMI,QAAQ,GAAG;AAAEhB,gBAAAA,MAAM,EAAE,CAAEW,WAAF;AAAV,eAAjB;AACA,qBAAO3B,SAAS,CAAC+B,MAAD,EAASC,QAAT,CAAhB;AACD,aA9BH;;AADgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATH,SAAS;AAAA;AAAA;AAAA,GAAf","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  mergeMap(() => {\n    let load = window.gapi.client.load('calendar','v3');\n    from(load).pipe(\n        mergeMap(() => {\n          let syncToken = localStorage.getItem('sync');\n          let request;\n          if(syncToken == null) {\n            console.log('performing full sync');\n            request =  window.gapi.client.calendar.events.list({\n              'calendarId' : 'primary'\n            });\n          }\n          else {\n            console.log('performing incremental sync');\n            request = window.gapi.client.calendar.events.list({\n              'calendarId' : 'primary',\n              'syncToken': syncToken\n            });\n          }\n          from(request).pipe(\n            map(resp => {\n              let result = [];\n              const results = new Promise((resolve, reject) => {\n                fetchEvents(resp, result, resolve, reject);\n              })\n              debugger\n              return duplicateAction();\n            })\n          );\n        })\n    )\n    /*window.gapi.client.load('calendar', 'v3')\n      .then(() => {\n        let syncToken = localStorage.getItem('sync');\n        let request;\n        if(syncToken == null) {\n          console.log('performing full sync');\n          request =  window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary'\n          });\n        }\n        else {\n          console.log('performing incremental sync');\n          request = window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n            'syncToken': syncToken\n          });\n        }\n        return request;\n      })\n      .then(resp => {\n        let result = [];\n        const results = new Promise((resolve, reject) => {\n          fetchEvents(resp, result, resolve, reject);\n        })\n        return results;\n      })\n      .then(response => {\n        debugger;\n      })\n      return duplicateAction();*/\n  })\n)\n\nconst normalizeEvents = (response) => {\n  let singleEvent = new schema.Entity('events');\n  let results = normalize({ events : response}, { events: [ singleEvent ]});\n  return results;\n}\n\nconst getEvents = async () => {\n  window.gapi.client.load('calendar', 'v3')\n    .then(() => {\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log('performing full sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary'\n        });\n      }\n      else {\n        console.log('performing incremental sync');\n        return window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n    })\n    .then(resp => {\n      let result = [];\n      const results = new Promise((resolve, reject) => {\n        fetchEvents(resp, result, resolve, reject);\n      })\n      return results;\n    })\n    .then(response => {\n      debugger\n      const myData = { events : response};\n      const singleEvent = new schema.Entity('events');\n      const mySchema = { events: [ singleEvent ]};\n      return normalize(myData, mySchema);\n    })\n}\n"]},"metadata":{},"sourceType":"module"}