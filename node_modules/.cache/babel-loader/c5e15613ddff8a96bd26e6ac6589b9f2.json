{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\nfunction loadGoogleClient() {\n  return _loadGoogleClient.apply(this, arguments);\n}\n\nfunction _loadGoogleClient() {\n  _loadGoogleClient = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return window.gapi.load('calendar', 'v3');\n\n          case 2:\n            result = _context.sent;\n            debugger;\n            return _context.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _loadGoogleClient.apply(this, arguments);\n}\n\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), mergeMap(function () {\n    var load = loadGoogleClient();\n    debugger;\n    from(load).pipe(mergeMap(function () {\n      debugger;\n      var syncToken = localStorage.getItem('sync');\n      var request;\n\n      if (syncToken == null) {\n        console.log('performing full sync');\n        request = new Promise(function (resolve, reject) {\n          return resolve(window.gapi.client.calendar.events.list({\n            'calendarId': 'primary'\n          }));\n        });\n      } else {\n        console.log('performing incremental sync');\n        request = new Promise(function (resolve, reject) {\n          return resolve(window.gapi.client.calendar.events.list({\n            'calendarId': 'primary',\n            'syncToken': syncToken\n          }));\n        });\n      }\n\n      debugger;\n      from(request).pipe(map(function (resp) {\n        var result = [];\n        var results = new Promise(function (resolve, reject) {\n          fetchEvents(resp, result, resolve, reject);\n        });\n        debugger;\n        return duplicateAction();\n      }));\n    }));\n    /*window.gapi.client.load('calendar', 'v3')\n      .then(() => {\n        let syncToken = localStorage.getItem('sync');\n        let request;\n        if(syncToken == null) {\n          console.log('performing full sync');\n          request =  window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary'\n          });\n        }\n        else {\n          console.log('performing incremental sync');\n          request = window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n            'syncToken': syncToken\n          });\n        }\n        return request;\n      })\n      .then(resp => {\n        let result = [];\n        const results = new Promise((resolve, reject) => {\n          fetchEvents(resp, result, resolve, reject);\n        })\n        return results;\n      })\n      .then(response => {\n        debugger;\n      })\n      return duplicateAction();*/\n  }));\n};\n\nvar normalizeEvents = function normalizeEvents(response) {\n  var singleEvent = new schema.Entity('events');\n  var results = normalize({\n    events: response\n  }, {\n    events: [singleEvent]\n  });\n  return results;\n};\n\nvar fetchEvents = function fetchEvents(resp, items, resolve, reject) {\n  var newItems = items.concat(resp.result.items);\n  var pageToken = resp.nextPageToken;\n  var syncToken = resp.nextSyncToken;\n\n  if (pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'pageToken': pageToken\n    }).then(function (nextResp) {\n      return fetchEvents(nextResp, newItems, resolve, reject);\n    }).catch(function (e) {\n      if (e.code === 410) {\n        console.log('Invalid sync token, clearing event store and re-syncing.');\n        localStorage.deleteItem('sync');\n        window.gapi.client.calendar.events.list({\n          'calendarId': 'primary'\n        }).then(function (newResp) {\n          return fetchEvents(newResp, items, resolve, reject);\n        });\n      } else {\n        console.log(e);\n        reject('Something went wrong, Please refresh and try again');\n      }\n    });\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","duplicateAction","map","mergeMap","catchError","ofType","from","normalize","schema","loadGoogleClient","window","gapi","load","result","beginGetEventsEpics","action$","pipe","syncToken","localStorage","getItem","request","console","log","Promise","resolve","reject","client","calendar","events","list","resp","results","fetchEvents","normalizeEvents","response","singleEvent","Entity","items","newItems","concat","pageToken","nextPageToken","nextSyncToken","undefined","then","nextResp","catch","e","code","deleteItem","newResp","setItem"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events';\nimport { duplicateAction } from '../actions/db/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nimport { normalize, schema } from 'normalizr';\n\nasync function loadGoogleClient() {\n  let result = await window.gapi.load('calendar', 'v3');\n  debugger\n  return result;\n}\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  mergeMap(() => {\n    const load =  loadGoogleClient();\n    debugger\n    from(load).pipe(\n      mergeMap(() => {\n        debugger\n        let syncToken = localStorage.getItem('sync');\n        let request;\n        if(syncToken == null) {\n          console.log('performing full sync');\n          request = new Promise((resolve,reject) => {\n            return resolve(window.gapi.client.calendar.events.list({\n              'calendarId' : 'primary'\n            }))\n          });\n        }\n        else {\n          console.log('performing incremental sync');\n          request = new Promise((resolve,reject) => {\n            return resolve(window.gapi.client.calendar.events.list({\n              'calendarId' : 'primary',\n              'syncToken'  : syncToken\n            }))\n          });\n        }\n        debugger\n        from(request).pipe(\n          map(resp => {\n            let result = [];\n            const results = new Promise((resolve, reject) => {\n              fetchEvents(resp, result, resolve, reject);\n            })\n            debugger;\n            return duplicateAction();\n          })\n        )\n      })\n    )\n    /*window.gapi.client.load('calendar', 'v3')\n      .then(() => {\n        let syncToken = localStorage.getItem('sync');\n        let request;\n        if(syncToken == null) {\n          console.log('performing full sync');\n          request =  window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary'\n          });\n        }\n        else {\n          console.log('performing incremental sync');\n          request = window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n            'syncToken': syncToken\n          });\n        }\n        return request;\n      })\n      .then(resp => {\n        let result = [];\n        const results = new Promise((resolve, reject) => {\n          fetchEvents(resp, result, resolve, reject);\n        })\n        return results;\n      })\n      .then(response => {\n        debugger;\n      })\n      return duplicateAction();*/\n  })\n)\n\nconst normalizeEvents = (response) => {\n  let singleEvent = new schema.Entity('events');\n  let results = normalize({ events : response}, { events: [ singleEvent ]});\n  return results;\n}\n\nconst fetchEvents = (resp, items, resolve, reject) => {\n  const newItems = items.concat(resp.result.items);\n  let pageToken = resp.nextPageToken;\n  let syncToken = resp.nextSyncToken;\n  if(pageToken !== undefined) {\n    window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary',\n      'pageToken': pageToken\n    }).then(nextResp => fetchEvents(nextResp, newItems, resolve, reject))\n      .catch(e => {\n        if(e.code === 410) {\n          console.log('Invalid sync token, clearing event store and re-syncing.');\n          localStorage.deleteItem('sync');\n          window.gapi.client.calendar.events.list({\n            'calendarId' : 'primary',\n          }).then(newResp => fetchEvents(newResp, items, resolve, reject))\n        } else {\n          console.log(e);\n          reject('Something went wrong, Please refresh and try again');\n        }\n      })\n  } else {\n    localStorage.setItem('sync', syncToken);\n    resolve(newItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}