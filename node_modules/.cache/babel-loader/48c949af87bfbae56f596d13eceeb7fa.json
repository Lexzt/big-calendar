{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sham/big-calendar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GET_EVENTS_BEGIN } from '../actions/events';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\nexport var beginGetEventsEpics = function beginGetEventsEpics(action$) {\n  return action$.pipe(ofType(GET_EVENTS_BEGIN), mergeMap(function () {\n    var request = window.gapi.client.calendar.events.list({\n      'calendarId': 'primary'\n    });\n    from(request.execute()).pipe(map(function (resp) {\n      return console.log(resp);\n    }));\n  }));\n};\n\nvar eventsMiddleware = function eventsMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      if (action.type === 'GET_EVENTS_BEGIN') {\n        window.gapi.client.load('calendar', 'v3', function () {\n          var request = window.gapi.client.calendar.events.list({\n            'calendarId': 'primary'\n          });\n          var syncToken = localStorage.getItem('sync');\n\n          if (syncToken == null) {\n            console.log(\"Performing full sync\");\n          } else {\n            console.log(\"Performing incremental sync\");\n            request = window.gapi.client.calendar.events.list({\n              'calendarId': 'primary',\n              'syncToken': syncToken\n            });\n          }\n\n          var result = [];\n          new Promise(function (resolve, reject) {\n            fetchEvents(request, result, resolve, reject);\n          }).then(\n          /*#__PURE__*/\n          function () {\n            var _ref = _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee(response) {\n              var myData, singleEvent, mySchema, normalizedResults;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      myData = {\n                        events: response\n                      };\n                      singleEvent = new schema.Entity('events');\n                      mySchema = {\n                        events: [singleEvent]\n                      };\n                      normalizedResults = normalize(myData, mySchema);\n                      next({\n                        type: 'GET_EVENTS_SUCCESS',\n                        payload: {\n                          data: response\n                        }\n                      });\n\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee, this);\n            }));\n\n            return function (_x) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n        });\n      }\n\n      if (action.type === 'POST_EVENT_BEGIN') {\n        var calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n        }; //deprecated function: take note\n\n        window.gapi.client.load('calendar', 'v3', function () {\n          var request = window.gapi.client.calendar.events.insert(calendarObject);\n          request.execute(function (resp) {\n            var newId = resp.id;\n            next({\n              type: 'POST_EVENT_SUCCESS',\n              payload: {\n                data: [resp]\n              }\n            }, function (error) {\n              next({\n                type: 'POST_EVENT_FAILURE',\n                payload: error\n              });\n            });\n          });\n        });\n      }\n\n      return next(action);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/sham/big-calendar/src/epics/events.js"],"names":["GET_EVENTS_BEGIN","map","mergeMap","catchError","ofType","from","beginGetEventsEpics","action$","pipe","request","window","gapi","client","calendar","events","list","execute","resp","console","log","eventsMiddleware","store","next","action","type","load","syncToken","localStorage","getItem","result","Promise","resolve","reject","fetchEvents","then","response","myData","singleEvent","schema","Entity","mySchema","normalizedResults","normalize","payload","data","calendarObject","insert","newId","id","error"],"mappings":"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","sourcesContent":["import { GET_EVENTS_BEGIN } from '../actions/events'\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ofType } from 'redux-observable';\nimport { from } from 'rxjs';\n\nexport const beginGetEventsEpics = action$ => action$.pipe(\n  ofType(GET_EVENTS_BEGIN),\n  mergeMap(() => {\n    let request = window.gapi.client.calendar.events.list({\n      'calendarId' : 'primary'\n    })\n    from(request.execute()).pipe(\n      map(resp => console.log(resp))\n    )\n  })\n)\n\nconst eventsMiddleware = store => next => action => {\n  if(action.type === 'GET_EVENTS_BEGIN') {\n    window.gapi.client.load('calendar', 'v3', function() {\n      var request = window.gapi.client.calendar.events.list({\n        'calendarId' : 'primary',\n      });\n      let syncToken = localStorage.getItem('sync');\n      if(syncToken == null) {\n        console.log(\"Performing full sync\");\n      } else {\n        console.log(\"Performing incremental sync\");\n        request = window.gapi.client.calendar.events.list({\n          'calendarId' : 'primary',\n          'syncToken': syncToken\n        });\n      }\n      let result = [];\n      new Promise((resolve, reject) => {\n        fetchEvents(request, result, resolve, reject);\n      }).then(async response => {\n          const myData = { events : response};\n          const singleEvent = new schema.Entity('events');\n          const mySchema = { events: [ singleEvent ]};\n          const normalizedResults = normalize(myData, mySchema);\n          next({\n            type: 'GET_EVENTS_SUCCESS',\n            payload: {\n              data: response,\n            }\n          })\n        });\n    })\n  }\n  if(action.type === 'POST_EVENT_BEGIN') {\n      let calendarObject = {\n          'calendarId': 'primary',\n          'resource': action.payload\n      };\n\n      //deprecated function: take note\n      window.gapi.client.load('calendar', 'v3', function() {\n        var request = window.gapi.client.calendar.events.insert(calendarObject);\n        request.execute((resp) => {\n          const newId = resp.id\n          next({\n            type: 'POST_EVENT_SUCCESS',\n            payload: {\n              data: [resp],\n            }\n          }, (error) => {\n            next({\n              type: 'POST_EVENT_FAILURE',\n              payload: error\n            })\n          })\n        });\n      })\n  }\n  return next(action);\n}\n"]},"metadata":{},"sourceType":"module"}